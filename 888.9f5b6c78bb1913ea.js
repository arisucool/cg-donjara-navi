(self.webpackChunkcg_donjara_navi=self.webpackChunkcg_donjara_navi||[]).push([[888],{2888:(Je,Ge,H)=>{"use strict";H.r(Ge),H.d(Ge,{NaviModule:()=>hj});var De={};H.r(De),H.d(De,{assertParamsValid:()=>fd,computeFlatOffset:()=>gd,computeOutShape:()=>Tg,getNormalizedAxes:()=>Ag,isSliceContinous:()=>md,maskToAxes:()=>eu,parseSliceParams:()=>tu,sliceInfo:()=>yd,startForAxis:()=>Og,startIndicesWithElidedDims:()=>Dg,stopForAxis:()=>Lg,stopIndicesWithElidedDims:()=>Rg,stridesForAxis:()=>Fg,stridesWithElidedDims:()=>$g});var Yt={};H.r(Yt),H.d(Yt,{collectGatherOpShapeInfo:()=>Sp,computeOutShape:()=>gy,segOpComputeOptimalWindowSize:()=>my});var Ae={};H.r(Ae),H.d(Ae,{ERF_A1:()=>pp,ERF_A2:()=>fp,ERF_A3:()=>mp,ERF_A4:()=>gp,ERF_A5:()=>yp,ERF_P:()=>dp,PARALLELIZE_THRESHOLD:()=>ip,SELU_SCALE:()=>Tu,SELU_SCALEALPHA:()=>Su,applyActivation:()=>bu,assertAndGetBroadcastShape:()=>Be,assertAxesAreInnerMostDims:()=>cn,assertParamsConsistent:()=>ap,assignToTypedArray:()=>cy,axesAreInnerMostDims:()=>Td,calculateShapes:()=>ci,checkEinsumDimSizes:()=>Ip,combineLocations:()=>Ug,complexWithEvenIndex:()=>ly,complexWithOddIndex:()=>uy,computeConv2DInfo:()=>tn,computeConv3DInfo:()=>sr,computeDefaultPad:()=>wd,computeDilation2DInfo:()=>Xa,computeOptimalWindowSize:()=>Nu,computeOutAndReduceShapes:()=>nn,computeOutShape:()=>Ns,computePool2DInfo:()=>Jn,computePool3DInfo:()=>Os,convertConv2DDataFormat:()=>Ls,decodeEinsumEquation:()=>wp,eitherStridesOrDilationsAreOne:()=>un,expandShapeToKeepDim:()=>At,exponent:()=>dy,exponents:()=>hy,fromStringArrayToUint8:()=>yy,fromUint8ToStringArray:()=>Pr,getAxesPermutation:()=>Dt,getBroadcastDims:()=>mo,getComplexWithIndex:()=>xp,getEinsumComputePath:()=>Cp,getEinsumPermutation:()=>vp,getFusedBiasGradient:()=>xu,getFusedDyActivation:()=>yu,getImageCenter:()=>lp,getInnerMostAxes:()=>zt,getPermuted:()=>li,getReductionAxes:()=>Gt,getReshaped:()=>ii,getReshapedPermuted:()=>ui,getSliceBeginCoords:()=>up,getSliceSize:()=>cp,getUndoAxesPermutation:()=>go,isIdentityPermutation:()=>kp,log:()=>vv,mergeRealAndImagArrays:()=>Vs,prepareAndValidate:()=>hp,prepareSplitSize:()=>Np,segment_util:()=>Yt,shouldFuse:()=>wu,slice_util:()=>De,splitRealAndImagArrays:()=>iy,tupleValuesAreOne:()=>rr,upcastType:()=>Ln,validateInput:()=>ay,validateUpdateShape:()=>oy,warn:()=>Cn});var bt={};H.r(bt),H.d(bt,{json:()=>F2});var Pe={};H.r(Pe),H.d(Pe,{json:()=>O2});var _e={};H.r(_e),H.d(_e,{json:()=>L2});var Le={};H.r(Le),H.d(Le,{json:()=>P2});var ge={};H.r(ge),H.d(ge,{json:()=>z2});var z={};H.r(z),H.d(z,{json:()=>M2});var ae={};H.r(ae),H.d(ae,{json:()=>B2});var he={};H.r(he),H.d(he,{json:()=>V2});var J={};H.r(J),H.d(J,{json:()=>W2});var re={};H.r(re),H.d(re,{json:()=>U2});var ye={};H.r(ye),H.d(ye,{json:()=>G2});var Ce={};H.r(Ce),H.d(Ce,{json:()=>H2});var ot={};H.r(ot),H.d(ot,{json:()=>j2});var Bt={};H.r(Bt),H.d(Bt,{json:()=>K2});var Ot={};H.r(Ot),H.d(Ot,{json:()=>q2});var qn={};H.r(qn),H.d(qn,{json:()=>X2});var On={};H.r(On),H.d(On,{json:()=>Y2});var He={};H.r(He),H.d(He,{json:()=>Z2});var Qe={};H.r(Qe),H.d(Qe,{json:()=>J2});var et={};H.r(et),H.d(et,{addImpl:()=>Yb,bincountImpl:()=>sm,bincountReduceImpl:()=>n0,ceilImpl:()=>s0,concatImpl:()=>r0,equalImpl:()=>i0,expImpl:()=>u0,expm1Impl:()=>h0,floorImpl:()=>f0,gatherNdImpl:()=>m0,gatherV2Impl:()=>g0,greaterEqualImpl:()=>x0,greaterImpl:()=>y0,lessEqualImpl:()=>w0,lessImpl:()=>b0,linSpaceImpl:()=>v0,logImpl:()=>I0,maxImpl:()=>C0,maximumImpl:()=>N0,minimumImpl:()=>S0,multiplyImpl:()=>rm,negImpl:()=>$0,notEqualImpl:()=>_0,prodImpl:()=>R0,rangeImpl:()=>F0,rsqrtImpl:()=>O0,sigmoidImpl:()=>WA,simpleAbsImpl:()=>Jb,sliceImpl:()=>t0,sparseFillEmptyRowsImpl:()=>z0,sparseReshapeImpl:()=>M0,sparseSegmentReductionImpl:()=>cm,sqrtImpl:()=>jL,squaredDifferenceImpl:()=>B0,stridedSliceImpl:()=>V0,stringNGramsImpl:()=>W0,stringSplitImpl:()=>U0,stringToHashBucketFastImpl:()=>G0,subImpl:()=>d0,tileImpl:()=>H0,topKImpl:()=>K0,transposeImpl:()=>tm,uniqueImpl:()=>X0});var ne=H(6895),Y=H(8996),$=H(4650);function pe(n,t,e,s,r,o,a){try{var i=n[o](a),l=i.value}catch(u){return void e(u)}i.done?t(l):Promise.resolve(l).then(s,r)}function L(n){return function(){var t=this,e=arguments;return new Promise(function(s,r){var o=n.apply(t,e);function a(l){pe(o,s,r,a,i,"next",l)}function i(l){pe(o,s,r,a,i,"throw",l)}a(void 0)})}}class st{constructor(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}get(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)}set(t,e){this.dataIdsCount++,this.data.set(t,e)}has(t){return this.data.has(t)}delete(t){return this.dataIdsCount--,this.data.delete(t)}numDataIds(){return this.dataIdsCount}}class St{refCount(t){return rt("refCount")}incRef(t){return rt("incRef")}timerAvailable(){return!0}time(t){return rt("time")}read(t){return rt("read")}readSync(t){return rt("readSync")}numDataIds(){return rt("numDataIds")}disposeData(t,e){return rt("disposeData")}write(t,e,s){return rt("write")}move(t,e,s,r,o){return rt("move")}memory(){return rt("memory")}floatPrecision(){return rt("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return rt("dispose")}}function rt(n){throw new Error(`'${n}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function Zt(n){let t=n.length,e=0;for(;t>0;)e=Math.random()*t|0,t--,Et(n,t,e)}function Vt(n,t,e){return Math.max(n,Math.min(t,e))}function Pt(n){return n%2==0?n:n+1}function Et(n,t,e){const s=n[t];n[t]=n[e],n[e]=s}function C(n,t){if(!n)throw new Error("string"==typeof t?t:t())}function Xn(n,t,e=""){C(je(n,t),()=>e+` Shapes ${n} and ${t} must match`)}function Dc(n){C(null!=n,()=>"The input to the tensor constructor must be a non-null value.")}function Qr(n,t=[],e=!1){if(null==t&&(t=[]),Array.isArray(n)||bs(n)&&!e)for(let s=0;s<n.length;++s)Qr(n[s],t,e);else t.push(n);return t}function q(n){if(0===n.length)return 1;let t=n[0];for(let e=1;e<n.length;e++)t*=n[e];return t}function je(n,t){if(n===t)return!0;if(null==n||null==t||n.length!==t.length)return!1;for(let e=0;e<n.length;e++)if(n[e]!==t[e])return!1;return!0}function Jt(n){return n%1==0}function Rc(n){const t=Math.ceil(Math.sqrt(n));return[t,Math.ceil(n/t)]}function eo(n,t){return t<=n.length?n:n+" ".repeat(t-n.length)}function $m(n,t=(s=>0),e){return new Promise((s,r)=>{let o=0;const a=()=>{if(n())return void s();o++;const i=t(o);null!=e&&o>=e?r():setTimeout(a,i)};a()})}function _m(n,t){let e=1,s=-1;for(let o=0;o<n.length;++o)if(n[o]>=0)e*=n[o];else if(-1===n[o]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${o}`);s=o}else if(n[o]<0)throw Error(`Shapes can not be < 0. Found ${n[o]} at dim ${o}`);if(-1===s){if(t>0&&t!==e)throw Error(`Size(${t}) must match the product of shape ${n}`);return n}if(0===e)throw Error(`Cannot infer the missing size in [${n}] when there are 0 elements`);if(t%e!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${e}`);const r=n.slice();return r[s]=t/e,r}function Me(n,t){const e=t.length;return C((n=null==n?t.map((s,r)=>r):[].concat(n)).every(s=>s>=-e&&s<e),()=>`All values in axis param must be in range [-${e}, ${e}) but got axis ${n}`),C(n.every(s=>Jt(s)),()=>`All values in axis param must be integers but got axis ${n}`),n.map(s=>s<0?e+s:s)}function Xs(n,t){const e=[],s=[],r=null!=t&&Array.isArray(t)&&0===t.length,o=null==t||r?null:Me(t,n).sort();let a=0;for(let i=0;i<n.length;++i){if(null!=o){if(o[a]===i&&1!==n[i])throw new Error(`Can't squeeze axis ${i} since its dim '${n[i]}' is not 1`);(null==o[a]||o[a]>i)&&1===n[i]&&(e.push(n[i]),s.push(i)),o[a]<=i&&a++}1!==n[i]&&(e.push(n[i]),s.push(i))}return{newShape:e,keptDims:s}}function an(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);e=new Uint8Array(t)}return e}function In(n,t){let e=null;if(null==n||"float32"===n)e=new Float32Array(t);else if("int32"===n)e=new Int32Array(t);else if("bool"===n)e=new Uint8Array(t);else{if("string"!==n)throw new Error(`Unknown data type ${n}`);e=new Array(t)}return e}function Em(n,t){return!("complex64"===t||"float32"===t&&"complex64"!==n||"int32"===t&&"float32"!==n&&"complex64"!==n||"bool"===t&&"bool"===n)}function bs(n){return n instanceof Float32Array||n instanceof Int32Array||n instanceof Uint8Array}function Fc(n){if("float32"===n||"int32"===n)return 4;if("complex64"===n)return 8;if("bool"===n)return 1;throw new Error(`Unknown dtype ${n}`)}function Go(n){return"string"==typeof n||n instanceof String}function Oc(n){return"number"==typeof n}function Ho(n){return Array.isArray(n)?Ho(n[0]):n instanceof Float32Array?"float32":n instanceof Int32Array||n instanceof Uint8Array?"int32":Oc(n)?"float32":Go(n)?"string":function wv(n){return"boolean"==typeof n}(n)?"bool":"float32"}function Lc(n){return!!(n&&n.constructor&&n.call&&n.apply)}function Pc(n,t){for(let e=t;e<n;++e)if(n%e==0)return e;return n}function Se(n){const t=n.length;if(t<2)return[];const e=new Array(t-1);e[t-2]=n[t-1];for(let s=t-3;s>=0;--s)e[s]=e[s+1]*n[s+1];return e}function Am(n,t,e,s=!1){const r=new Array;if(1===t.length){const o=t[0]*(s?2:1);for(let a=0;a<o;a++)r[a]=e[n+a]}else{const o=t[0],a=t.slice(1),i=a.reduce((l,u)=>l*u)*(s?2:1);for(let l=0;l<o;l++)r[l]=Am(n+l*i,a,e,s)}return r}function Yn(n,t,e=!1){if(0===n.length)return t[0];const s=n.reduce((r,o)=>r*o)*(e?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${n}] does not match the input size ${t.length}${e?" for a complex tensor":""}.`);return Am(0,n,t,e)}function Dm(n,t){const e=pn(n,t);for(let s=0;s<e.length;s++)e[s]=1;return e}function pn(n,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t)return new Uint8Array(n);throw new Error(`Unknown data type ${t}`)}function Rm(n,t){const e=n.reduce((s,r)=>s*r,1);if(null==t||"float32"===t)return Yn(n,new Float32Array(e));if("int32"===t)return Yn(n,new Int32Array(e));if("bool"===t)return Yn(n,new Uint8Array(e));throw new Error(`Unknown data type ${t}`)}function Fm(n){n.forEach(t=>{C(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${n}].`)})}function ws(n,t,e){if(0===t)return 0;if(1===t)return n[0];let s=n[n.length-1];for(let r=0;r<n.length-1;++r)s+=e[r]*n[r];return s}function jo(n,t,e){if(0===t)return[];if(1===t)return[n];const s=new Array(t);for(let r=0;r<s.length-1;++r)s[r]=Math.floor(n/e[r]),n-=s[r]*e[r];return s[s.length-1]=n,s}function Ko(n){return n&&n.then&&"function"==typeof n.then}function Cn(...n){X().getBool("IS_TEST")||X().getBool("PROD")||console.warn(...n)}function vv(...n){X().getBool("IS_TEST")||X().getBool("PROD")||console.log(...n)}const Om="tfjsflags";class Iv{constructor(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=Cv,this.populateURLFlags()}setPlatform(t,e){null!=this.platform&&Cn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`),this.platformName=t,this.platform=e}registerFlag(t,e,s){if(this.flagRegistry[t]={evaluationFn:e,setHook:s},null!=this.urlFlags[t]){const r=this.urlFlags[t];Cn(`Setting feature override from URL ${t}: ${r}.`),this.set(t,r)}}getAsync(t){var e=this;return L(function*(){return t in e.flags||(e.flags[t]=yield e.evaluateFlag(t)),e.flags[t]})()}get(t){if(t in this.flags)return this.flags[t];const e=this.evaluateFlag(t);if(Ko(e))throw new Error(`Flag ${t} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[t]=e,this.flags[t]}getNumber(t){return this.get(t)}getBool(t){return this.get(t)}getFlags(){return this.flags}get features(){return this.flags}set(t,e){if(null==this.flagRegistry[t])throw new Error(`Cannot set flag ${t} as it has not been registered.`);this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)}evaluateFlag(t){if(null==this.flagRegistry[t])throw new Error(`Cannot evaluate flag '${t}': no evaluation function found.`);return this.flagRegistry[t].evaluationFn()}setFlags(t){this.flags=Object.assign({},t)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(typeof this.global>"u"||typeof this.global.location>"u"||typeof this.global.location.search>"u")return;const t=this.getQueryParams(this.global.location.search);Om in t&&t[Om].split(",").forEach(s=>{const[r,o]=s.split(":");this.urlFlags[r]=function Nv(n,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${n}.`)}(r,o)})}}function Cv(n){const t={};return n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...s)=>(function kv(n,t,e){n[decodeURIComponent(t)]=decodeURIComponent(e||"")}(t,s[0],s[1]),s.join("="))),t}function X(){return Lm}let zc,Lm=null;function Pm(){if(null==zc){let n;if(typeof window<"u")n=window;else if(typeof global<"u")n=global;else if(typeof process<"u")n=process;else{if(!(typeof self<"u"))throw new Error("Could not find a global object");n=self}zc=n}return zc}function Mc(n,t){const e=function Tv(){const n=Pm();return null==n._tfGlobals&&(n._tfGlobals=new Map),n._tfGlobals}();if(e.has(n))return e.get(n);{const s=t();return e.set(n,s),e.get(n)}}const zi="Abs",qo="Acos",Xo="Acosh",to="Add",Mi="AddN",Bi="ArgMax",Vi="ArgMin",Yo="Asin",Zo="Asinh",Jo="Atan",Qo="Atanh",ea="Atan2",Wi="AvgPool",Wc="AvgPoolGrad",Ui="AvgPool3D",Uc="AvgPool3DGrad",Gi="BatchMatMul",Hi="BatchToSpaceND",Gc="Bincount",zm="BroadcastArgs",ta="Cast",na="Ceil",sa="ClipByValue",Hc="Complex",ji="ComplexAbs",Ki="Concat",qi="Conv2D",jc="Conv2DBackpropFilter",Xi="Conv2DBackpropInput",Yi="Conv3D",Kc="Conv3DBackpropFilterV2",qc="Conv3DBackpropInputV2",ra="Cos",oa="Cosh",Zi="Cumsum",Xc="CropAndResize",Yc="DenseBincount",Zc="DepthToSpace",Ji="DepthwiseConv2dNative",Jc="DepthwiseConv2dNativeBackpropFilter",Qc="DepthwiseConv2dNativeBackpropInput",Qi="Dilation2D",eh="Dilation2DBackpropInput",th="Dilation2DBackpropFilter",aa="RealDiv",nh="Einsum",ia="Elu",sh="EluGrad",la="Erf",el="Equal",ua="Exp",tl="ExpandDims",ca="Expm1",oh="Fill",ah="FlipLeftRight",ha="Floor",da="FloorDiv",nl="FusedBatchNorm",sl="GatherV2",ih="GatherNd",rl="Greater",pa="GreaterEqual",fa="Identity",lh="IFFT",uh="Imag",ma="IsFinite",ga="IsInf",ya="IsNan",ol="LeakyRelu",al="Less",il="LessEqual",ch="LinSpace",xa="Log",ba="Log1p",ll="LogicalAnd",ul="LogicalNot",cl="LogicalOr",hl="LRN",hh="LRNGrad",dl="Max",wa="Maximum",pl="MaxPool",dh="MaxPoolGrad",fl="MaxPool3D",ph="MaxPool3DGrad",fh="MaxPoolWithArgmax",ml="Mean",gl="Min",va="Minimum",yl="MirrorPad",Ia="Mod",mh="Multinomial",Ca="Multiply",xl="Neg",bl="NotEqual",gh="NonMaxSuppressionV3",yh="NonMaxSuppressionV4",xh="NonMaxSuppressionV5",wl="OnesLike",vl="OneHot",Il="Pack",Cl="PadV2",ka="Pow",kl="Prelu",bh="Prod",wh="Range",vh="Real",Na="Reciprocal",Sa="Relu",Nl="Reshape",Sl="ResizeNearestNeighbor",Ih="ResizeNearestNeighborGrad",Tl="ResizeBilinear",Ch="ResizeBilinearGrad",Ta="Relu6",$l="Reverse",$a="Round",_a="Rsqrt",kh="ScatterNd",_l="Select",Ea="Selu",El="Slice",Aa="Sin",Da="Sinh",Ra="Sign",Fa="Sigmoid",Oa="Softplus",La="Sqrt",Al="Sum",Dl="SpaceToBatchND",Rl="SplitV",Fl="Softmax",Nh="SparseFillEmptyRows",Sh="SparseReshape",Th="SparseSegmentMean",$h="SparseSegmentSum",_h="SparseToDense",Pa="SquaredDifference",Eh="Square",Ah="StridedSlice",Dh="StringNGrams",Rh="StringSplit",Fh="StringToHashBucketFast",za="Sub",Ma="Tan",Ba="Tanh",Va="Tile",Oh="TopK",Lh="Transform",Ol="Transpose",Ph="Unique",Ll="Unpack",Pl="UnsortedSegmentSum",zl="ZerosLike",Wa="Step",zh="FromPixels",Mh="RotateWithOffset",Ml="_FusedMatMul",Bl="FusedConv2D",Vl="FusedDepthwiseConv2D",no=Mc("kernelRegistry",()=>new Map),Ua=Mc("gradRegistry",()=>new Map);function Bh(n,t){const e=Uh(n,t);return no.get(e)}function Bm(n){return Ua.get(n)}function Vh(n){const t=no.entries(),e=[];for(;;){const{done:s,value:r}=t.next();if(s)break;const[o,a]=r,[i]=o.split("_");i===n&&e.push(a)}return e}function Wh(n){const{kernelName:t,backendName:e}=n,s=Uh(t,e);no.has(s)&&Cn(`The kernel '${t}' for backend '${e}' is already registered`),no.set(s,n)}function Ev(n){const{kernelName:t}=n;Ua.has(t)&&X().getBool("DEBUG")&&Cn(`Overriding the gradient for '${t}'`),Ua.set(t,n)}function Uh(n,t){return`${t}_${n}`}var Vm=H(7658);const Cr=H.n(Vm)()||Vm;function Wl(n){return Cr.fromString(n,!0,16)}const Wm=Wl("c3a5c85c97cb3127"),kr=Wl("b492b66fbe98f273"),mn=Wl("9ae16a3b2f90404f");function Gh(n){return n.xor(n.shru(47))}function Um(n,t,e){const s=n.slice(t,t+e);return Cr.fromBytes(Array.from(s),!0,!0)}function dt(n,t){return Um(n,t,8)}function Gm(n,t){return Um(n,t,4)}function Qt(n,t){return 0===t?n:n.shru(t).or(n.shl(64-t))}function Ys(n,t,e=Wl("9ddfea08eb382d69")){let s=n.xor(t).mul(e);s=s.xor(s.shru(47));let r=t.xor(s).mul(e);return r=r.xor(r.shru(47)),r=r.mul(e),r}function Ul(n,t,e,s){return function Dv(n,t,e,s,r,o){r=r.add(n),o=Qt(o.add(r).add(s),21);const a=r;return r=(r=r.add(t)).add(e),o=o.add(Qt(r,44)),[r.add(s),o.add(a)]}(dt(n,t),dt(n,t+8),dt(n,t+16),dt(n,t+24),e,s)}function Lv(n,t=n.length){const e=Cr.fromNumber(81,!0);if(t<=32)return t<=16?function Rv(n,t=n.length){if(t>=8){const e=mn.add(2*t),s=dt(n,0).add(mn),r=dt(n,t-8);return Ys(Qt(r,37).mul(e).add(s),Qt(s,25).add(r).mul(e),e)}if(t>=4){const e=mn.add(2*t);return Ys(Gm(n,0).shl(3).add(t),Gm(n,t-4),e)}if(t>0){const a=t+(n[t-1]<<2);return Gh(mn.mul(n[0]+(n[t>>1]<<8)).xor(Wm.mul(a))).mul(mn)}return mn}(n,t):function Fv(n,t=n.length){const e=mn.add(2*t),s=dt(n,0).mul(kr),r=dt(n,8),o=dt(n,t-8).mul(e),a=dt(n,t-16).mul(mn);return Ys(Qt(s.add(r),43).add(Qt(o,30)).add(a),s.add(Qt(r.add(mn),18)).add(o),e)}(n,t);if(t<=64)return function Ov(n,t=n.length){const e=mn.add(2*t),s=dt(n,0).mul(mn),r=dt(n,8),o=dt(n,t-8).mul(e),a=dt(n,t-16).mul(mn),i=Qt(s.add(r),43).add(Qt(o,30)).add(a),l=Ys(i,s.add(Qt(r.add(mn),18)).add(o),e),u=dt(n,16).mul(e),c=dt(n,24),h=i.add(dt(n,t-32)).mul(e),d=l.add(dt(n,t-24)).mul(e);return Ys(Qt(u.add(c),43).add(Qt(h,30)).add(d),u.add(Qt(c.add(s),18)).add(h),e)}(n,t);let s=e,r=e.mul(kr).add(113),o=Gh(r.mul(mn).add(113)).mul(mn),a=[Cr.UZERO,Cr.UZERO],i=[Cr.UZERO,Cr.UZERO];s=s.mul(mn).add(dt(n,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Qt(s.add(r).add(a[0]).add(dt(n,l+8)),37).mul(kr),r=Qt(r.add(a[1]).add(dt(n,l+48)),42).mul(kr),s=s.xor(i[1]),r=r.add(a[0]).add(dt(n,l+40)),o=Qt(o.add(i[0]),33).mul(kr),a=Ul(n,l,a[1].mul(kr),s.add(i[0])),i=Ul(n,l+32,o.add(i[1]),r.add(dt(n,l+16))),[o,s]=[s,o],l+=64}while(l!==u);const h=kr.add(o.and(255).shl(1));return l=c,i[0]=i[0].add(t-1&63),a[0]=a[0].add(i[0]),i[0]=i[0].add(a[0]),s=Qt(s.add(r).add(a[0]).add(dt(n,l+8)),37).mul(h),r=Qt(r.add(a[1]).add(dt(n,l+48)),42).mul(h),s=s.xor(i[1].mul(9)),r=r.add(a[0].mul(9).add(dt(n,l+40))),o=Qt(o.add(i[0]),33).mul(h),a=Ul(n,l,a[1].mul(h),s.add(i[0])),i=Ul(n,l+32,o.add(i[1]),r.add(dt(n,l+16))),[o,s]=[s,o],Ys(Ys(a[0],i[0],h).add(Gh(r).mul(Wm)).add(o),Ys(a[1],i[1],h).add(s),h)}function Zs(n,t){return"string"===t?Js(n):Nr([n],t)}function Nr(n,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(n)&&(n=Qr(n)),X().getBool("DEBUG")&&function yv(n,t){for(let e=0;e<n.length;e++){const s=n[e];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(n,t),function Pv(n,t){return n instanceof Float32Array&&"float32"===t||n instanceof Int32Array&&"int32"===t||n instanceof Uint8Array&&"bool"===t}(n,t))return n;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(n);if("int32"===t)return new Int32Array(n);if("bool"===t){const e=new Uint8Array(n.length);for(let s=0;s<e.length;++s)0!==Math.round(n[s])&&(e[s]=1);return e}throw new Error(`Unknown data type ${t}`)}function kn(){return X().platform.now()}function Js(n,t="utf-8"){return t=t||"utf-8",X().platform.encode(n,t)}function so(n,t="utf-8"){return t=t||"utf-8",X().platform.decode(n,t)}class zv{constructor(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new Bv)}profileKernel(t,e,s){let r;const o=()=>{r=s()};let a;const i=kn();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(o);else{o();for(const u of r)u.dataSync();a=Promise.resolve({kernelMs:kn()-i})}if(X().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let u=0;u<r.length;u++){const c=r[u];c.data().then(h=>{Mv(h,c.dtype,t)})}return{kernelName:t,outputs:r,inputs:e,timeMs:a.then(u=>u.kernelMs),extraInfo:a.then(u=>null!=u.getExtraProfileInfo?u.getExtraProfileInfo():"")}}logKernelProfile(t){const{kernelName:e,outputs:s,timeMs:r,inputs:o,extraInfo:a}=t;s.forEach(i=>{Promise.all([i.data(),r,a]).then(l=>{this.logger.logKernelProfile(e,i,l[0],l[1],o,l[2])})})}}function Mv(n,t,e){if("float32"!==t)return!1;for(let s=0;s<n.length;s++){const r=n[s];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${e}'`),!0}return!1}class Bv{logKernelProfile(t,e,s,r,o,a){const i="number"==typeof r?eo(`${r}ms`,9):r.error,l=eo(t,25),u=e.rank,c=e.size,h=eo(e.shape.toString(),14);let d="";for(const p in o){const f=o[p];if(null!=f){const m=f.shape||e.shape,g=m.length;d+=`${p}: ${g}D ${g>0?m:""} `}}console.log(`%c${l}\t%c${i}\t%c${u}D ${h}\t%c${c}\t%c${d}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}const Hm=20,Ga=3,Hh=7;function Uv(n,t,e,s){const r=Se(t),o=function Gv(n,t,e,s){const r=q(t),o=s[s.length-1],a=new Array(o).fill(0),i=t.length,l="complex64"===e?ja(n):n;if(i>1)for(let u=0;u<r/o;u++){const c=u*o;for(let h=0;h<o;h++)a[h]=Math.max(a[h],Ha(l[c+h],0,e).length)}return a}(n,t,e,r),a=t.length,i=Gl(n,t,e,r,o),l=["Tensor"];return s&&(l.push(`  dtype: ${e}`),l.push(`  rank: ${a}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(i.map(u=>"    "+u).join("\n")),l.join("\n")}function Ha(n,t,e){let s;return s=Array.isArray(n)?`${parseFloat(n[0].toFixed(Hh))} + ${parseFloat(n[1].toFixed(Hh))}j`:Go(n)?`'${n}'`:"bool"===e?jm(n):parseFloat(n.toFixed(Hh)).toString(),eo(s,t)}function jm(n){return 0===n?"false":"true"}function Gl(n,t,e,s,r,o=!0){const a="complex64"===e?2:1,i=t[0],l=t.length;if(0===l)return"complex64"===e?[Ha(ja(n)[0],0,e)]:"bool"===e?[jm(n[0])]:[n[0].toString()];if(1===l){if(i>Hm){let y=Array.from(n.slice(0,Ga*a)),x=Array.from(n.slice((i-Ga)*a,i*a));return"complex64"===e&&(y=ja(y),x=ja(x)),["["+y.map((b,w)=>Ha(b,r[w],e)).join(", ")+", ..., "+x.map((b,w)=>Ha(b,r[i-Ga+w],e)).join(", ")+"]"]}return["["+("complex64"===e?ja(n):Array.from(n)).map((g,y)=>Ha(g,r[y],e)).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*a,d=[];if(i>Hm){for(let m=0;m<Ga;m++){const g=m*h;d.push(...Gl(n.slice(g,g+h),u,e,c,r,!1))}d.push("...");for(let m=i-Ga;m<i;m++){const g=m*h;d.push(...Gl(n.slice(g,g+h),u,e,c,r,m===i-1))}}else for(let m=0;m<i;m++){const g=m*h;d.push(...Gl(n.slice(g,g+h),u,e,c,r,m===i-1))}const p=2===l?",":"";d[0]="["+d[0]+p;for(let m=1;m<d.length-1;m++)d[m]=" "+d[m]+p;let f=",\n";for(let m=2;m<l;m++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(o?"":f),d}function ja(n){const t=[];for(let e=0;e<n.length;e+=2)t.push([n[e],n[e+1]]);return t}class en{constructor(t,e,s){if(this.dtype=e,this.shape=t.slice(),this.size=q(t),null!=s){const r=s.length;C(r===this.size,()=>`Length of values '${r}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=s||In(e,this.size),this.strides=Se(t)}set(t,...e){0===e.length&&(e=[0]),C(e.length===this.rank,()=>`The number of provided coordinates (${e.length}) must match the rank (${this.rank})`);const s=this.locToIndex(e);this.values[s]=t}get(...t){0===t.length&&(t=[0]);let e=0;for(const r of t){if(r<0||r>=this.shape[e])throw new Error(`Requested out of range element at ${t}.   Buffer shape=${this.shape}`);e++}let s=t[t.length-1];for(let r=0;r<t.length-1;++r)s+=this.strides[r]*t[r];return this.values[s]}locToIndex(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];let e=t[t.length-1];for(let s=0;s<t.length-1;++s)e+=this.strides[s]*t[s];return e}indexToLoc(t){if(0===this.rank)return[];if(1===this.rank)return[t];const e=new Array(this.shape.length);for(let s=0;s<e.length-1;++s)e[s]=Math.floor(t/this.strides[s]),t-=e[s]*this.strides[s];return e[e.length-1]=t,e}get rank(){return this.shape.length}toTensor(){return vs().makeTensor(this.values,this.shape,this.dtype)}}let vs=null,ro=null,Km=null;class Tt{constructor(t,e,s,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=q(t),this.strides=Se(t),this.dataId=s,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}buffer(){var t=this;return L(function*(){const e=yield t.data();return ro.buffer(t.shape,t.dtype,e)})()}bufferSync(){return ro.buffer(this.shape,this.dtype,this.dataSync())}array(){var t=this;return L(function*(){const e=yield t.data();return Yn(t.shape,e,"complex64"===t.dtype)})()}arraySync(){return Yn(this.shape,this.dataSync(),"complex64"===this.dtype)}data(){var t=this;return L(function*(){t.throwIfDisposed();const e=vs().read(t.dataId);if("string"===t.dtype){const s=yield e;try{return s.map(r=>so(r))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e})()}dataSync(){this.throwIfDisposed();const t=vs().readSync(this.dataId);if("string"===this.dtype)try{return t.map(e=>so(e))}catch{throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t}bytes(){var t=this;return L(function*(){t.throwIfDisposed();const e=yield vs().read(t.dataId);return"string"===t.dtype?e:new Uint8Array(e.buffer)})()}dispose(){this.isDisposed||(vs().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(t=!1){return ro.print(this,t)}clone(){return this.throwIfDisposed(),ro.clone(this)}toString(t=!1){return Uv(this.dataSync(),this.shape,this.dtype,t)}cast(t){return this.throwIfDisposed(),ro.cast(this,t)}variable(t=!0,e,s){return this.throwIfDisposed(),vs().makeVariable(this,t,e,s)}}function U(){return Mc("Tensor",()=>Tt)}Object.defineProperty(Tt,Symbol.hasInstance,{value:n=>!!n&&null!=n.data&&null!=n.dataSync&&null!=n.throwIfDisposed}),U();class Hl extends Tt{constructor(t,e,s,r){super(t.shape,t.dtype,t.dataId,r),this.trainable=e,this.name=s}assign(t){if(t.dtype!==this.dtype)throw new Error(`dtype of the new value (${t.dtype}) and previous value (${this.dtype}) must match`);if(!je(t.shape,this.shape))throw new Error(`shape of the new value (${t.shape}) and previous value (${this.shape}) must match`);vs().disposeTensor(this),this.dataId=t.dataId,vs().incRef(this,null)}dispose(){vs().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(Hl,Symbol.hasInstance,{value:n=>n instanceof Tt&&null!=n.assign&&n.assign instanceof Function});var jl=(()=>{return(n=jl||(jl={})).float32="float32",n.int32="int32",n.bool="int32",n.complex64="complex64",jl;var n})(),Kl=(()=>{return(n=Kl||(Kl={})).float32="float32",n.int32="int32",n.bool="bool",n.complex64="complex64",Kl;var n})(),ql=(()=>{return(n=ql||(ql={})).float32="float32",n.int32="float32",n.bool="float32",n.complex64="complex64",ql;var n})(),Xl=(()=>{return(n=Xl||(Xl={})).float32="complex64",n.int32="complex64",n.bool="complex64",n.complex64="complex64",Xl;var n})();const qv={float32:ql,int32:jl,bool:Kl,complex64:Xl};function Ln(n,t){if("string"===n||"string"===t){if("string"===n&&"string"===t)return"string";throw new Error(`Can not upcast ${n} with ${t}`)}return qv[n][t]}function jh(n){return Ln(n,"int32")}function $t(n,t){if(n.dtype===t.dtype)return[n,t];const e=Ln(n.dtype,t.dtype);return[n.cast(e),t.cast(e)]}function qm(n){const t=[];return Xm(n,t,new Set),t}function Xm(n,t,e){if(null==n)return;if(n instanceof Tt)return void t.push(n);if(!function Xv(n){return Array.isArray(n)||"object"==typeof n}(n))return;const s=n;for(const r in s){const o=s[r];e.has(o)||(e.add(o),Xm(o,t,e))}}function Kh(n){return null!=n.kernelName}class Ym{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(t=>t.name)))}}}dispose(){for(const t in this.registeredVariables)this.registeredVariables[t].dispose()}}let Yv=(()=>{class n{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Ym}ready(){var e=this;return L(function*(){if(null!=e.pendingBackendInit)return e.pendingBackendInit.then(()=>{});if(null!=e.backendInstance)return;const s=e.getSortedBackends();for(let r=0;r<s.length;r++){const o=s[r];if(yield e.initializeBackend(o).success)return void(yield e.setBackend(o))}throw new Error("Could not initialize any backends, all backend initializations failed.")})()}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:s}=this.initializeBackendsAndReturnBest();if(s)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:s}=this.initializeBackend(e);if(s)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,s,r=1){return e in this.registryFactory?(Cn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:s,priority:r},!0)}setBackend(e){var s=this;return L(function*(){if(null==s.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(s.backendName=e,null==s.registry[e]){s.backendInstance=null;const{success:r,asyncInit:o}=s.initializeBackend(e);if(!(o?yield r:r))return!1}return s.backendInstance=s.registry[e],s.setupRegisteredKernels(),s.profiler=new zv(s.backendInstance),!0})()}setupRegisteredKernels(){Vh(this.backendName).forEach(s=>{null!=s.setupFunc&&s.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){Vh(e).forEach(r=>{null!=r.disposeFunc&&r.disposeFunc(this.registry[e])})}initializeBackend(e){const s=this.registryFactory[e];if(null==s)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const r=s.factory();if(!r||r instanceof St||"function"!=typeof r.then)return this.registry[e]=r,{success:!0,asyncInit:!1};{const o=++this.pendingBackendInitId,a=r.then(i=>!(o<this.pendingBackendInitId||(this.registry[e]=i,this.pendingBackendInit=null,0))).catch(i=>(o<this.pendingBackendInitId||(this.pendingBackendInit=null,Cn(`Initialization of backend ${e} failed`),Cn(i.stack||i.message)),!1));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}}catch(r){return Cn(`Initialization of backend ${e} failed`),Cn(r.stack||r.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,s)=>this.registryFactory[s].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let s=0;s<e.length;s++){const r=e[s],{success:o,asyncInit:a}=this.initializeBackend(r);if(a||o)return{name:r,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,s){const r=this.state.tensorInfo.get(s),o=r.backend,a=this.readSync(s),i=o.refCount(s);o.disposeData(s,!0),r.backend=e,e.move(s,a,r.shape,r.dtype,i),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,s){let o,r=null;if(null==s){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");s=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof s)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(o),()=>(o=s(),o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),o))}scopedRun(e,s,r){e();try{const o=r();return s(),o}catch(o){throw s(),o}}nextTensorId(){return n.nextTensorId++}nextVariableId(){return n.nextVariableId++}clone(e){const s=A.runKernel(fa,{x:e});return this.addTapeNode(this.state.activeScope.name,{x:e},[s],i=>({x:()=>A.runKernel(ta,{x:i},{dtype:"float32"})}),[],{}),s}runKernel(e,s,r){if(null==Bh(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:s,attrs:r})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,s,r){const o=this.backend.numDataIds();let a=0;r.forEach(u=>{a+="complex64"===u.dtype?3:1});const l=o-s-a-this.state.numDataMovesStack[this.state.numDataMovesStack.length-1];if(l>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${l} data ids) after running '${e}'`)}runKernelFunc(e){let s,r=[];const o=this.isTapeOn(),a=this.state.numBytes,i=this.state.numTensors;let l,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);const c=Kh(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Kh(e)){const{kernelName:m,inputs:g,attrs:y}=e,x=Bh(m,this.backendName);C(null!=x,()=>`Cannot find registered kernel '${m}' for backend '${this.backendName}'`),l=()=>{const b=this.backend.numDataIds();u=x.kernelFunc({inputs:g,attrs:y,backend:this.backend});const w=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(m,b,w);const I=w.map(k=>{if(null!=k.rank)return k;const{dataId:S,shape:T,dtype:_}=k;return this.makeTensorFromDataId(S,T,_)});if(o){const k=this.getTensorsForGradient(m,g,I);r=this.saveTensorsForBackwardMode(k)}return I}}else{const{forwardFunc:m}=e,g=y=>{o&&(r=y.map(x=>this.keep(this.clone(x))))};l=()=>{const y=this.backend.numDataIds();u=this.tidy(()=>m(this.backend,g));const x=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(c,y,x),x}}const{inputs:h,attrs:d}=e,p=Kh(e)?null:e.backwardsFunc;let f;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(c,h,()=>l()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),s=f.outputs):s=l()}),o&&this.addTapeNode(c,h,s,p,r,d),this.state.profiling&&this.state.activeProfile.kernels.push({name:c,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-i,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(h).map(m=>null!=h[m]?h[m].shape:null),outputShapes:s.map(m=>m.shape),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?s:s[0]}saveTensorsForBackwardMode(e){return e.map(r=>this.keep(this.clone(r)))}getTensorsForGradient(e,s,r){const o=Bm(e);if(null!=o){const a=o.inputsToSave||[],i=o.outputsToSave||[];let l;o.saveAllInputs?(C(Array.isArray(s),()=>"saveAllInputs is true, expected inputs to be an array."),l=Object.keys(s).map(c=>s[c])):l=a.map(c=>s[c]);const u=r.filter((c,h)=>i[h]);return l.concat(u)}return[]}makeTensor(e,s,r,o){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");o=o||this.backend;let a=e;"string"===(r=r||"float32")&&Go(e[0])&&(a=e.map(u=>Js(u)));const i=o.write(a,s,r),l=new Tt(s,r,i,this.nextTensorId());if(this.trackTensor(l,o),"string"===r){const u=this.state.tensorInfo.get(i),c=function bv(n){if(null==n)return 0;let t=0;return n.forEach(e=>t+=e.length),t}(a);this.state.numBytes+=c-u.bytes,u.bytes=c}return l}makeTensorFromDataId(e,s,r,o){const a=new Tt(s,r=r||"float32",e,this.nextTensorId());return this.trackTensor(a,o),a}makeVariable(e,s=!0,r,o){r=r||this.nextVariableId().toString(),null!=o&&o!==e.dtype&&(e=e.cast(o));const a=new Hl(e,s,r,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,s){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let r=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(r=e.size*Fc(e.dtype)),this.state.numBytes+=r,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:s||this.backend,dtype:e.dtype,shape:e.shape,bytes:r})),e instanceof Hl||this.track(e)}incRef(e,s){this.trackTensor(e,s),this.backend.incRef(e.dataId)}removeDataId(e,s){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===s&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const s=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=s.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const r=e.size*Fc(e.dtype);this.state.numBytes-=r}s.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,s.backend)}disposeVariables(){for(const e in this.state.registeredVariables)this.disposeVariable(this.state.registeredVariables[e])}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}profile(e){var s=this;return L(function*(){s.state.profiling=!0;const r=s.state.numBytes,o=s.state.numTensors;s.state.activeProfile.kernels=[],s.state.activeProfile.result=yield e(),s.state.profiling=!1,s.state.activeProfile.peakBytes=Math.max(...s.state.activeProfile.kernels.map(a=>a.totalBytesSnapshot)),s.state.activeProfile.newBytes=s.state.numBytes-r,s.state.activeProfile.newTensors=s.state.numTensors-o;for(const a of s.state.activeProfile.kernels)a.kernelTimeMs=yield a.kernelTimeMs,a.extraInfo=yield a.extraInfo;return s.state.activeProfile})()}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,s,r,o,a,i){const l={id:this.state.nextTapeNodeId++,kernelName:e,inputs:s,outputs:r,saved:a},u=Bm(e);null!=u&&(o=u.gradFunc),null!=o&&(l.gradient=c=>(c=c.map((h,d)=>{if(null==h){const p=r[d],f=pn(p.size,p.dtype);return this.makeTensor(f,p.shape,p.dtype)}return h}),o(c.length>1?c:c[0],a,i))),this.state.activeTape.push(l)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const s={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(s.name=e),this.state.scopeStack.push(s),this.state.activeScope=s}endScope(e){const s=qm(e),r=new Set(s.map(a=>a.id));for(let a=0;a<this.state.activeScope.track.length;a++){const i=this.state.activeScope.track[a];!i.kept&&!r.has(i.id)&&i.dispose()}const o=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],s.forEach(a=>{!a.kept&&a.scopeId===o.id&&this.track(a)})}gradients(e,s,r,o=!1){if(C(s.length>0,()=>"gradients() received an empty list of xs."),null!=r&&"float32"!==r.dtype)throw new Error(`dy must have 'float32' dtype, but has '${r.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));C(a instanceof Tt,()=>"The result y returned by f() must be a tensor.");const i=function Vv(n,t,e){const s={},r={};for(let l=0;l<t.length;l++)s[t[l].id]=!0;for(let l=0;l<n.length;l++){const u=n[l],c=u.inputs;for(const h in c){const d=c[h];let p=!1;for(let f=0;f<t.length;f++)if(s[d.id]){u.outputs.forEach(m=>s[m.id]=!0),p=!0,r[u.id]=!0;break}if(p)break}}const o={};o[e.id]=!0;const a={};for(let l=n.length-1;l>=0;l--){const u=n[l],c=u.inputs;for(let h=0;h<u.outputs.length;h++)if(o[u.outputs[h].id]){for(const d in c)o[c[d].id]=!0,a[u.id]=!0;break}}const i=[];for(let l=0;l<n.length;l++){const u=n[l];if(r[u.id]&&a[u.id]){const c={};for(const d in u.inputs){const p=u.inputs[d];s[p.id]&&(c[d]=p)}const h=Object.assign({},u);h.inputs=c,h.outputs=u.outputs,i.push(h)}}return i}(this.state.activeTape,s,a);if(!o&&0===i.length&&s.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const l={};l[a.id]=r??function Zv(n){const t=Dm(q(n),"float32");return A.makeTensor(t,n,"float32")}(a.shape),function Wv(n,t,e,s){for(let r=t.length-1;r>=0;r--){const o=t[r],a=[];if(o.outputs.forEach(l=>{const u=n[l.id];a.push(null!=u?u:null)}),null==o.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${o.kernelName}.`);const i=o.gradient(a);for(const l in o.inputs){if(!(l in i))throw new Error(`Cannot backprop through input ${l}. Available gradients found: ${Object.keys(i)}.`);const u=e(()=>i[l]());if("float32"!==u.dtype)throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input ${l} must have 'float32' dtype, but has '${u.dtype}'`);const c=o.inputs[l];if(!je(u.shape,c.shape))throw new Error(`Error in gradient for op ${o.kernelName}. The gradient of input '${l}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);if(null==n[c.id])n[c.id]=u;else{const h=n[c.id];n[c.id]=s(h,u),h.dispose()}}}}(l,i,c=>this.tidy(c),Jv);const u=s.map(c=>l[c.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(c=>{for(const h of c.saved)h.dispose()}),this.state.activeTape=null),{value:a,grads:u}})}customGrad(e){return C(Lc(e),()=>"The f passed in customGrad(f) must be a function."),(...s)=>{let r;C(s.every(l=>l instanceof Tt),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const o={};return s.forEach((l,u)=>{o[u]=l}),this.runKernelFunc({forwardFunc:(l,u)=>(r=e(...s,u),C(r.value instanceof Tt,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),C(Lc(r.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),r.value),backwardsFunc:(l,u)=>{const c=r.gradFunc(l,u),h=Array.isArray(c)?c:[c];C(h.length===s.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),C(h.every(p=>p instanceof Tt),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const d={};return h.forEach((p,f)=>{d[f]=()=>p}),d},inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}time(e){var s=this;return L(function*(){const r=kn(),o=yield s.backend.time(e);return o.wallMs=kn()-r,o})()}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Ym;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}return n.nextTensorId=0,n.nextVariableId=0,n})();function Zm(){const n=Pm();if(null==n._tfengine){const t=new Iv(n);n._tfengine=new Yv(t)}return function Sv(n){Lm=n}(n._tfengine.ENV),function Hv(n){vs=n}(()=>n._tfengine),n._tfengine}const A=Zm();function Jv(n,t){return A.runKernel(to,{a:n,b:t})}function Jm(n){if(n||function Qv(){return typeof navigator<"u"&&null!=navigator}()){if(n||(n=navigator),"ReactNative"===n.product)return!0;const t=n.userAgent||n.vendor||(typeof window<"u"?window.opera:"");return t?/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)):n.userAgentData&&n.userAgentData.mobile}return!1}function Qm(){return typeof window<"u"&&null!=window.document||typeof WorkerGlobalScope<"u"}const us=X();function Ka(n,t){let e=n;if(bs(n))return"string"===t?[]:[n.length];if(!Array.isArray(n))return[];const s=[];for(;Array.isArray(e)||bs(e)&&"string"!==t;)s.push(e.length),e=e[0];return Array.isArray(n)&&X().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&eg(n,s,[]),s}function eg(n,t,e){if(e=e||[],!Array.isArray(n)&&!bs(n))return void C(0===t.length,()=>`Element arr[${e.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);C(t.length>0,()=>`Element arr[${e.join("][")}] should be a primitive, but is an array of ${n.length} elements`),C(n.length===t[0],()=>`Element arr[${e.join("][")}] should have ${t[0]} elements, but has ${n.length} elements`);const s=t.slice(1);for(let r=0;r<n.length;++r)eg(n[r],s,e.concat(r))}function tg(n,t,e,s){if("string_or_numeric"!==n){if(null==n)throw new Error("Expected dtype cannot be null.");if("numeric"!==n&&n!==t||"numeric"===n&&"string"===t)throw new Error(`Argument '${e}' passed to '${s}' must be ${n} tensor, but got ${t} tensor`)}}function N(n,t,e,s="numeric"){if(n instanceof Tt)return tg(s,n.dtype,t,e),n;let r=Ho(n);if("string"!==r&&["bool","int32","float32"].indexOf(s)>=0&&(r=s),tg(s,r,t,e),null==n||!bs(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error(`Argument '${t}' passed to '${e}' must be a Tensor or TensorLike, but got '${null==n?"null":n.constructor.name}'`);const o=Ka(n,r);!bs(n)&&!Array.isArray(n)&&(n=[n]);const i="string"!==r?Nr(n,r):Qr(n,[],!0);return A.makeTensor(i,o,r)}function ng(n,t,e,s="numeric"){if(!Array.isArray(n))throw new Error(`Argument ${t} passed to ${e} must be a \`Tensor[]\` or \`TensorLike[]\``);return n.map((o,a)=>N(o,`${t}[${a}]`,e,s))}us.registerFlag("DEBUG",()=>!1,n=>{n&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),us.registerFlag("IS_BROWSER",()=>Qm()),us.registerFlag("IS_NODE",()=>typeof process<"u"&&typeof process.versions<"u"&&typeof process.versions.node<"u"),us.registerFlag("IS_CHROME",()=>typeof navigator<"u"&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),us.registerFlag("PROD",()=>!1),us.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>us.getBool("DEBUG")),us.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),us.registerFlag("IS_TEST",()=>!1),us.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),us.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1);const e1="__op";function D(n){const t=Object.keys(n);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let e=t[0];const s=n[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+=e1;const r=(...o)=>{A.startScope(e);try{const a=s(...o);return Ko(a)&&console.error("Cannot return a Promise inside of tidy."),A.endScope(a),a}catch(a){throw A.endScope(null),a}};return Object.defineProperty(r,"name",{value:e,configurable:!0}),r}const Sr=D({complex_:function t1(n,t){const e=N(n,"real","complex"),s=N(t,"imag","complex");return Xn(e.shape,s.shape,`real and imag shapes, ${e.shape} and ${s.shape}, must match in call to tf.complex().`),A.runKernel(Hc,{real:e,imag:s})}});function qa(n,t,e,s){if(null==s&&(s=Ho(n)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!bs(n)&&!Array.isArray(n)&&"number"!=typeof n&&"boolean"!=typeof n&&"string"!=typeof n)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){Fm(t);const r=q(t),o=q(e);C(r===o,()=>`Based on the provided shape, [${t}], the tensor should have ${r} values but has ${o}`);for(let a=0;a<e.length;++a){const l=a!==e.length-1||e[a]!==q(t.slice(a));C(e[a]===t[a]||!l,()=>`Error creating a new Tensor. Inferred shape (${e}) does not match the provided shape (${t}). `)}}return!bs(n)&&!Array.isArray(n)&&(n=[n]),t=t||e,n="string"!==s?Nr(n,s):Qr(n,[],!0),A.makeTensor(n,t,s)}function Qs(n,t,e){return qa(n,t,Ka(n,e),e)}const qh={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},Yl=4;function sg(n,t){return Xh.apply(this,arguments)}function Xh(){return Xh=L(function*(n,t){const e=[],s=[],r=Array.isArray(n)?n.map(a=>a.name):Object.keys(n);for(let a=0;a<r.length;++a){const i=r[a],l=Array.isArray(n)?n[a].tensor:n[i];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${l.dtype}`);const u={name:i,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){const c=new Promise(function(){var h=L(function*(d){const p=yield l.bytes(),f=p.reduce((y,x)=>y+x.length,0)+Yl*p.length,m=new Uint8Array(f);let g=0;for(let y=0;y<p.length;y++){const x=p[y],b=new Uint8Array(new Uint32Array([x.length]).buffer);m.set(b,g),g+=Yl,m.set(x,g),g+=x.length}d(m)});return function(d){return h.apply(this,arguments)}}());s.push(c)}else s.push(l.data());null!=t&&(u.group=t),e.push(u)}return{data:n1(yield Promise.all(s)),specs:e}}),Xh.apply(this,arguments)}function n1(n){if(null===n)throw new Error(`Invalid input value: ${JSON.stringify(n)}`);let t=0;const e=[];n.forEach(o=>{if(t+=o.byteLength,e.push(o.byteLength===o.buffer.byteLength?o:new o.constructor(o)),!(o instanceof Float32Array||o instanceof Int32Array||o instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${o.constructor.name}`)});const s=new Uint8Array(t);let r=0;return e.forEach(o=>{s.set(new Uint8Array(o.buffer),r),r+=o.byteLength}),s.buffer}const Yh=typeof Buffer<"u"&&(typeof Blob>"u"||typeof atob>"u"||typeof btoa>"u");function og(n){return Yh?Buffer.byteLength(n):new Blob([n]).size}function Zh(n){if(1===n.length)return n[0];let t=0;n.forEach(r=>{t+=r.byteLength});const e=new Uint8Array(t);let s=0;return n.forEach(r=>{e.set(new Uint8Array(r),s),s+=r.byteLength}),e.buffer}function ig(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy,weightsManifest:t};return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),e}function lg(n,t){return Jh.apply(this,arguments)}function Jh(){return(Jh=L(function*(n,t){const e={modelTopology:n.modelTopology,format:n.format,generatedBy:n.generatedBy,convertedBy:n.convertedBy};if(null!=n.trainingConfig&&(e.trainingConfig=n.trainingConfig),null!=n.weightsManifest){const[s,r]=yield t(n.weightsManifest);e.weightSpecs=s,e.weightData=r}return null!=n.signature&&(e.signature=n.signature),null!=n.userDefinedMetadata&&(e.userDefinedMetadata=n.userDefinedMetadata),null!=n.modelInitializer&&(e.modelInitializer=n.modelInitializer),e})).apply(this,arguments)}function Zl(n){if(n.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==n.modelTopology?0:og(JSON.stringify(n.modelTopology)),weightSpecsBytes:null==n.weightSpecs?0:og(JSON.stringify(n.weightSpecs)),weightDataBytes:null==n.weightData?0:n.weightData.byteLength}}function l1(){const n=function o1(){const n=e=>{let s=e<<13,r=0;for(;!(8388608&s);)r-=8388608,s<<=1;return s&=-8388609,r+=947912704,s|r},t=new Uint32Array(2048);t[0]=0;for(let e=1;e<1024;e++)t[e]=n(e);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function a1(){const n=new Uint32Array(64);n[0]=0,n[31]=1199570944,n[32]=2147483648,n[63]=3347054592;for(let t=1;t<31;t++)n[t]=t<<23;for(let t=33;t<63;t++)n[t]=2147483648+(t-32<<23);return n}(),e=function i1(){const n=new Uint32Array(64);for(let t=0;t<64;t++)n[t]=1024;return n[0]=n[32]=0,n}();return s=>{const r=new ArrayBuffer(4*s.length),o=new Uint32Array(r);for(let a=0;a<s.length;a++){const i=s[a];o[a]=n[e[i>>10]+(1023&i)]+t[i>>10]}return new Float32Array(r)}}class It{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==It.instance&&(It.instance=new It),It.instance}static registerSaveRouter(t){It.getInstance().saveRouters.push(t)}static registerLoadRouter(t){It.getInstance().loadRouters.push(t)}static getSaveHandlers(t){return It.getHandlers(t,"save")}static getLoadHandlers(t,e){return It.getHandlers(t,"load",e)}static getHandlers(t,e,s){const r=[];return("load"===e?It.getInstance().loadRouters:It.getInstance().saveRouters).forEach(a=>{const i=a(t,s);null!==i&&r.push(i)}),r}}const ug=n=>It.getSaveHandlers(n),Jl="tensorflowjs",Tr="models_store",er="model_info_store";function td(){if(!X().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const n=typeof window>"u"?self:window,t=n.indexedDB||n.mozIndexedDB||n.webkitIndexedDB||n.msIndexedDB||n.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function nd(n){const t=n.result;t.createObjectStore(Tr,{keyPath:"modelPath"}),t.createObjectStore(er,{keyPath:"modelPath"})}let oo=(()=>{class n{constructor(e){if(this.indexedDB=td(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}save(e){var s=this;return L(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return s.databaseAction(s.modelPath,e)})()}load(){var e=this;return L(function*(){return e.databaseAction(e.modelPath)})()}databaseAction(e,s){return new Promise((r,o)=>{const a=this.indexedDB.open(Jl,1);a.onupgradeneeded=()=>nd(a),a.onsuccess=()=>{const i=a.result;if(null==s){const l=i.transaction(Tr,"readonly"),c=l.objectStore(Tr).get(this.modelPath);c.onsuccess=()=>{if(null==c.result)return i.close(),o(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));r(c.result.modelArtifacts)},c.onerror=h=>(i.close(),o(c.error)),l.oncomplete=()=>i.close()}else{const l=Zl(s),u=i.transaction(er,"readwrite");let c=u.objectStore(er);const h=c.put({modelPath:this.modelPath,modelArtifactsInfo:l});let d;h.onsuccess=()=>{d=i.transaction(Tr,"readwrite");const f=d.objectStore(Tr).put({modelPath:this.modelPath,modelArtifacts:s,modelArtifactsInfo:l});f.onsuccess=()=>r({modelArtifactsInfo:l}),f.onerror=m=>{c=u.objectStore(er);const g=c.delete(this.modelPath);g.onsuccess=()=>(i.close(),o(f.error)),g.onerror=y=>(i.close(),o(f.error))}},h.onerror=p=>(i.close(),o(h.error)),u.oncomplete=()=>{null==d?i.close():d.oncomplete=()=>i.close()}}},a.onerror=i=>o(a.error)})}}return n.URL_SCHEME="indexeddb://",n})();const cg=n=>X().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(oo.URL_SCHEME)?function c1(n){return new oo(n)}(n.slice(oo.URL_SCHEME.length)):null;It.registerSaveRouter(cg),It.registerLoadRouter(cg);class d1{constructor(){this.indexedDB=td()}listModels(){var t=this;return L(function*(){return new Promise((e,s)=>{const r=t.indexedDB.open(Jl,1);r.onupgradeneeded=()=>nd(r),r.onsuccess=()=>{const o=r.result,a=o.transaction(er,"readonly"),l=a.objectStore(er).getAll();l.onsuccess=()=>{const u={};for(const c of l.result)u[c.modelPath]=c.modelArtifactsInfo;e(u)},l.onerror=u=>(o.close(),s(l.error)),a.oncomplete=()=>o.close()},r.onerror=o=>s(r.error)})})()}removeModel(t){var e=this;return L(function*(){return t=function h1(n){return n.startsWith(oo.URL_SCHEME)?n.slice(oo.URL_SCHEME.length):n}(t),new Promise((s,r)=>{const o=e.indexedDB.open(Jl,1);o.onupgradeneeded=()=>nd(o),o.onsuccess=()=>{const a=o.result,i=a.transaction(er,"readwrite"),l=i.objectStore(er),u=l.get(t);let c;u.onsuccess=()=>{if(null==u.result)return a.close(),r(new Error(`Cannot find model with path '${t}' in IndexedDB.`));{const h=l.delete(t),d=()=>{c=a.transaction(Tr,"readwrite");const f=c.objectStore(Tr).delete(t);f.onsuccess=()=>s(u.result.modelArtifactsInfo),f.onerror=m=>r(u.error)};h.onsuccess=d,h.onerror=p=>(d(),a.close(),r(u.error))}},u.onerror=h=>(a.close(),r(u.error)),i.oncomplete=()=>{null==c?a.close():c.oncomplete=()=>a.close()}},o.onerror=a=>r(o.error)})})()}}const Is="/",$r="tensorflowjs_models",hg="info",p1="model_topology",f1="weight_specs",m1="weight_data",g1="model_metadata";function dg(n){return{info:[$r,n,hg].join(Is),topology:[$r,n,p1].join(Is),weightSpecs:[$r,n,f1].join(Is),weightData:[$r,n,m1].join(Is),modelMetadata:[$r,n,g1].join(Is)}}function pg(n){for(const t of Object.values(n))window.localStorage.removeItem(t)}function fg(n){const t=n.split(Is);if(t.length<3)throw new Error(`Invalid key format: ${n}`);return t.slice(1,t.length-1).join(Is)}let ao=(()=>{class n{constructor(e){if(!X().getBool("IS_BROWSER")||typeof window>"u"||typeof window.localStorage>"u")throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=dg(this.modelPath)}save(e){var s=this;return L(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const r=JSON.stringify(e.modelTopology),o=JSON.stringify(e.weightSpecs),a=Zl(e);try{return s.LS.setItem(s.keys.info,JSON.stringify(a)),s.LS.setItem(s.keys.topology,r),s.LS.setItem(s.keys.weightSpecs,o),s.LS.setItem(s.keys.weightData,function s1(n){if(Yh)return Buffer.from(n).toString("base64");const t=new Uint8Array(n);let e="";for(let s=0,r=t.length;s<r;s++)e+=String.fromCharCode(t[s]);return btoa(e)}(e.weightData)),s.LS.setItem(s.keys.modelMetadata,JSON.stringify({format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0})),{modelArtifactsInfo:a}}catch{throw pg(s.keys),new Error(`Failed to save model '${s.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}})()}load(){var e=this;return L(function*(){const s=JSON.parse(e.LS.getItem(e.keys.info));if(null==s)throw new Error(`In local storage, there is no model with name '${e.modelPath}'`);if("JSON"!==s.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const r={},o=JSON.parse(e.LS.getItem(e.keys.topology));if(null==o)throw new Error(`In local storage, the topology of model '${e.modelPath}' is missing.`);r.modelTopology=o;const a=JSON.parse(e.LS.getItem(e.keys.weightSpecs));if(null==a)throw new Error(`In local storage, the weight specs of model '${e.modelPath}' are missing.`);r.weightSpecs=a;const i=e.LS.getItem(e.keys.modelMetadata);if(null!=i){const u=JSON.parse(i);r.format=u.format,r.generatedBy=u.generatedBy,r.convertedBy=u.convertedBy,null!=u.signature&&(r.signature=u.signature),null!=u.userDefinedMetadata&&(r.userDefinedMetadata=u.userDefinedMetadata),null!=u.modelInitializer&&(r.modelInitializer=u.modelInitializer),null!=u.trainingConfig&&(r.trainingConfig=u.trainingConfig)}const l=e.LS.getItem(e.keys.weightData);if(null==l)throw new Error(`In local storage, the binary weight values of model '${e.modelPath}' are missing.`);return r.weightData=function r1(n){if(Yh){const s=Buffer.from(n,"base64");return s.buffer.slice(s.byteOffset,s.byteOffset+s.byteLength)}const t=atob(n),e=new Uint8Array(t.length);for(let s=0;s<t.length;++s)e.set([t.charCodeAt(s)],s);return e.buffer}(l),r})()}}return n.URL_SCHEME="localstorage://",n})();const mg=n=>X().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ao.URL_SCHEME)?function x1(n){return new ao(n)}(n.slice(ao.URL_SCHEME.length)):null;It.registerSaveRouter(mg),It.registerLoadRouter(mg);class b1{constructor(){C(X().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),C(typeof window>"u"||typeof window.localStorage<"u",()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}listModels(){var t=this;return L(function*(){const e={},s=$r+Is,r=Is+hg;for(let o=0;o<t.LS.length;++o){const a=t.LS.key(o);a.startsWith(s)&&a.endsWith(r)&&(e[fg(a)]=JSON.parse(t.LS.getItem(a)))}return e})()}removeModel(t){var e=this;return L(function*(){const s=dg(t=function y1(n){return n.startsWith(ao.URL_SCHEME)?n.slice(ao.URL_SCHEME.length):n}(t));if(null==e.LS.getItem(s.info))throw new Error(`Cannot find model at path '${t}'`);const r=JSON.parse(e.LS.getItem(s.info));return pg(s),r})()}}class $n{constructor(){this.managers={}}static getInstance(){return null==$n.instance&&($n.instance=new $n),$n.instance}static registerManager(t,e){C(null!=t,()=>"scheme must not be undefined or null."),t.endsWith("://")&&(t=t.slice(0,t.indexOf("://"))),C(t.length>0,()=>"scheme must not be an empty string.");const s=$n.getInstance();C(null==s.managers[t],()=>`A model store manager is already registered for scheme '${t}'.`),s.managers[t]=e}static getManager(t){const e=this.getInstance().managers[t];if(null==e)throw new Error(`Cannot find model manager for scheme '${t}'`);return e}static getSchemes(){return Object.keys(this.getInstance().managers)}}class w1{fetch(t,e){return fetch(t,e)}now(){return performance.now()}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Browser's encoder only supports utf-8, but got ${e}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)}decode(t,e){return new TextDecoder(e).decode(t)}}if(X().get("IS_BROWSER")){X().setPlatform("browser",new w1);try{$n.registerManager(ao.URL_SCHEME,new b1)}catch{}try{$n.registerManager(oo.URL_SCHEME,new d1)}catch{}}let uo;function We(n,t="float32",e){return t=t||"float32",Fm(n),new en(n,t,e)}X().get("IS_NODE")&&X().setPlatform("node",new class I1{constructor(){this.util=H(8628),this.textEncoder=new this.util.TextEncoder}fetch(t,e){return null!=X().global.fetch?X().global.fetch(t,e):(null==uo&&(uo=H(5410)),uo(t,e))}now(){const t=process.hrtime();return 1e3*t[0]+t[1]/1e6}encode(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error(`Node built-in encoder only supports utf-8, but got ${e}`);return this.textEncoder.encode(t)}decode(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)}});const ue=D({cast_:function C1(n,t){const e=N(n,"x","cast");if(!function xv(n){return"bool"===n||"complex64"===n||"float32"===n||"int32"===n||"string"===n}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==e.dtype||"string"!==t&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");return A.runKernel(ta,{x:e},{dtype:t})}}),tr=D({clone_:function k1(n){const e={x:N(n,"x","clone","string_or_numeric")};return A.runKernel(fa,e)}});function yg(n){return new Promise(t=>setTimeout(t)).then(n)}Zm(),function jv(n){ro=n}({buffer:We,cast:ue,clone:tr,print:function N1(n,t=!1){console.log(n.toString(t))}});let ld=(()=>{class n{constructor(e){if(!X().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(n.URL_SCHEME)&&(e=e.slice(n.URL_SCHEME.length)),(null==e||0===e.length)&&(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}save(e){var s=this;return L(function*(){if(typeof document>"u")throw new Error("Browser downloads are not supported in this environment since `document` is not present");const r=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const a=ig(e,[{paths:["./"+s.weightDataFileName],weights:e.weightSpecs}]),i=window.URL.createObjectURL(new Blob([JSON.stringify(a)],{type:"application/json"})),l=null==s.modelJsonAnchor?document.createElement("a"):s.modelJsonAnchor;if(l.download=s.modelJsonFileName,l.href=i,yield yg(()=>l.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const u=null==s.weightDataAnchor?document.createElement("a"):s.weightDataAnchor;u.download=s.weightDataFileName,u.href=r,yield yg(()=>u.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Zl(e)}}})()}}return n.URL_SCHEME="downloads://",n})();function xg(n,t,e,s){(function a(l){C(null!=l&&Array.isArray(l)&&l.length>0,()=>"promises must be a none empty array")})(n),function i(l,u){C(l>=0&&l<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${l}`),C(u>=0&&u<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${u}`),C(u>=l,()=>`startFraction must be no more than endFraction, but got startFraction ${l} and endFraction ${u}`)}(e=e??0,s=s??1);let r=0;return Promise.all(n.map(l=>(l.then(u=>{const c=e+ ++r/n.length*(s-e);return t(c),u}),l)))}function bg(n,t){return ud.apply(this,arguments)}function ud(){return(ud=L(function*(n,t){null==t&&(t={});const e=null==t.fetchFunc?X().platform.fetch:t.fetchFunc,s=n.map(h=>e(h,t.requestInit,{isBinary:!0})),i=(null==t.onProgress?yield Promise.all(s):yield xg(s,t.onProgress,0,.5)).map(h=>h.arrayBuffer());return null==t.onProgress?yield Promise.all(i):yield xg(i,t.onProgress,.5,1)})).apply(this,arguments)}It.registerSaveRouter(n=>X().getBool("IS_BROWSER")&&!Array.isArray(n)&&n.startsWith(ld.URL_SCHEME)?function A1(n="model"){return new ld(n)}(n.slice(ld.URL_SCHEME.length)):null);let wg=(()=>{class n{constructor(e,s){if(this.DEFAULT_METHOD="POST",null==s&&(s={}),this.weightPathPrefix=s.weightPathPrefix,this.onProgress=s.onProgress,this.weightUrlConverter=s.weightUrlConverter,null!=s.fetchFunc?(C("function"==typeof s.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=s.fetchFunc):this.fetch=X().platform.fetch,C(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&C(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=s.requestInit&&null!=s.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=s.requestInit||{}}save(e){var s=this;return L(function*(){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const r=Object.assign({method:s.DEFAULT_METHOD},s.requestInit);r.body=new FormData;const a=ig(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);r.body.append("model.json",new Blob([JSON.stringify(a)],{type:"application/json"}),"model.json"),null!=e.weightData&&r.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const i=yield s.fetch(s.path,r);if(i.ok)return{modelArtifactsInfo:Zl(e),responses:[i]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${i.status}.`)})()}load(){var e=this;return L(function*(){const s=yield e.fetch(e.path,e.requestInit);if(!s.ok)throw new Error(`Request to ${e.path} failed with status code ${s.status}. Please verify this URL points to the model JSON of the model to load.`);let r;try{r=yield s.json()}catch{let l=`Failed to parse model JSON of response from ${e.path}.`;throw e.path.endsWith(".pb")?l+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":l+=" Please make sure the server is serving valid JSON for this request.",new Error(l)}if(null==r.modelTopology&&null==r.weightsManifest)throw new Error(`The JSON from HTTP path ${e.path} contains neither model topology or manifest for weights.`);return lg(r,i=>e.loadWeights(i))})()}loadWeights(e){var s=this;return L(function*(){const r=Array.isArray(s.path)?s.path[1]:s.path,[o,a]=function O1(n){const t=n.lastIndexOf("/"),e=n.lastIndexOf("?");return[n.substring(0,t)+"/",e>t?n.substring(e):""]}(r),i=s.weightPathPrefix||o,l=[];for(const d of e)l.push(...d.weights);const u=[],c=[];for(const d of e)for(const p of d.paths)null!=s.weightUrlConverter?c.push(s.weightUrlConverter(p)):u.push(i+p+a);return s.weightUrlConverter&&u.push(...yield Promise.all(c)),[l,Zh(yield bg(u,{requestInit:s.requestInit,fetchFunc:s.fetch,onProgress:s.onProgress}))]})()}}return n.URL_SCHEME_REGEX=/^https?:\/\//,n})();function vg(n){return null!=n.match(wg.URL_SCHEME_REGEX)}const Ig=(n,t)=>{if(typeof fetch>"u"&&(null==t||null==t.fetchFunc))return null;{let e=!0;if(e=Array.isArray(n)?n.every(s=>vg(s)):vg(n),e)return Cg(n,t)}return null};function Cg(n,t){return new wg(n,t)}function kg(n,t){return Cg(n,t)}let co;It.registerSaveRouter(Ig),It.registerLoadRouter(Ig);const Sg=D({fromPixels_:function Ng(n,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==n)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let e=!1,s=!1,r=!1,o=!1,a=!1,i=!1;if(n.data instanceof Uint8Array)e=!0;else if(typeof ImageData<"u"&&n instanceof ImageData)s=!0;else if(typeof HTMLVideoElement<"u"&&n instanceof HTMLVideoElement)r=!0;else if(typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement)o=!0;else if(null!=n.getContext)a=!0;else{if(!(typeof ImageBitmap<"u"&&n instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${n.constructor.name}`);i=!0}if(r&&r&&n.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=Bh(zh,A.backendName))return A.runKernel(zh,{pixels:n},{numChannels:t});const[u,c]=r?[n.videoWidth,n.videoHeight]:[n.width,n.height];let h,d;if(a?h=n.getContext("2d").getImageData(0,0,u,c).data:s||e?h=n.data:(o||r||i)&&(null==co&&(co=document.createElement("canvas").getContext("2d")),co.canvas.width=u,co.canvas.height=c,co.drawImage(n,0,0,u,c),h=co.getImageData(0,0,u,c).data),4===t)d=new Int32Array(h);else{const f=u*c;d=new Int32Array(f*t);for(let m=0;m<f;m++)for(let g=0;g<t;++g)d[m*t+g]=h[4*m+g]}return function P1(n,t,e){if(Dc(n),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Ka(n,e);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return qa(n,t,s,e)}(d,[c,u,t],"int32")}});function fd(n,t,e){const s=n.shape.length;C(s===t.length,()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`),C(s===e.length,()=>`Error in slice${s}D: Length of size ${e} must match the rank of the array (${s}).`);for(let r=0;r<s;++r)C(t[r]+e[r]<=n.shape[r],()=>`Error in slice${s}D: begin[${r}] + size[${r}] (${t[r]+e[r]}) would overflow input.shape[${r}] (${n.shape[r]})`)}function eu(n){const t=[];let e=0;for(;n>0;)1&n&&t.push(e),n/=2,e++;return t}function Tg(n,t,e){const s=[];for(let r=0;r<n.length;r++)s[r]=Math.ceil((t[r]-n[r])/e[r]);return s}function $g(n,t,e,s){const r=[...n];for(let o=r.length;o<s.length;o++)r.push(1);for(let o=0;o<e;o++)0===o?r[t]=1:(r.splice(t,0,1),r.pop());return r}function _g(n,t,e){return e<=n?e:e-(t-1)}function Eg(n,t){const e=[];for(let s=0;s<n;s++)e.push(t+s);return e}function Ag(n,t,e,s,r,o,a,i,l){const u=n.length;let c=new Array(u),h=new Array(u),d=new Array(u);if(t.length&&e>0){const p=t[0],f=e+1;c=Dg(a,p,f,s,n),h=Rg(i,p,f,r,n),d=$g(o,p,f,n)}else for(let p=0;p<u;p++)c[p]=Og(a,s,o,n,p,l),h[p]=Lg(i,r,o,n,p,l),d[p]=Fg(o,p,l);return{begin:c,end:h,strides:d}}function Dg(n,t,e,s,r){const o=[...r],a=Eg(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=0;else{const l=_g(t,e,i);let u=s[l];n&1<<l&&(u=0),o[i]=u}return o}function Rg(n,t,e,s,r){const o=[...r],a=Eg(e,t);for(let i=0;i<o.length;i++)if(a.indexOf(i)>-1)o[i]=Number.MAX_SAFE_INTEGER;else{const l=_g(t,e,i);let u=s[l];n&1<<l&&(u=Number.MAX_SAFE_INTEGER),o[i]=u}for(let i=0;i<o.length;i++)o[i]<0&&(o[i]+=r[i]),o[i]=Vt(0,o[i],r[i]);return o}function Fg(n,t,e){let s=n[t];return(e&1<<t||null==s)&&(s=1),s}function Og(n,t,e,s,r,o){let a=t[r];(n&1<<r||o&1<<r||null==a)&&(a=(e[r]||1)>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=Vt(0,a,l-1),a}function Lg(n,t,e,s,r,o){let a=t[r];const i=e[r]||1;(n&1<<r||o&1<<r||null==a)&&(a=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[r];return a<0&&(a+=l),a=i>0?Vt(0,a,l):Vt(-1,a,l-1),a}function md(n,t,e){let s=e.length;for(let r=0;r<e.length;r++)if(e[r]>1){s=r;break}for(let r=s+1;r<e.length;r++)if(t[r]>0||e[r]!==n[r])return!1;return!0}function gd(n,t){let e=n.length>0?n[n.length-1]:1;for(let s=0;s<n.length-1;s++)e+=n[s]*t[s];return e}function tu(n,t,e){let s;const r=n.shape.length;let o;return s="number"==typeof t?[t,...new Array(r-1).fill(0)]:t.length<r?t.concat(new Array(r-t.length).fill(0)):t.slice(),s.forEach(a=>{C(-1!==a,()=>"slice() does not support negative begin indexing.")}),o=null==e?new Array(r).fill(-1):"number"==typeof e?[e,...new Array(r-1).fill(-1)]:e.length<r?e.concat(new Array(r-e.length).fill(-1)):e,o=o.map((a,i)=>a>=0?a:(C(-1===a,()=>`Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`),n.shape[i]-s[i])),[s,o]}function yd(n,t,e,s,r,o,a,i,l){let u=t.slice(),c=e.slice(),h=s;null==s&&(h=new Array(u.length));const d=eu(a);if(d.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==a&&0!==i)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==a&&0!==l)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");const p=n.length-u.length,f=eu(i),m=n.slice();f.forEach(S=>{u[S]=0,c[S]=1,m.splice(S,0,1)});const{begin:g,end:y,strides:x}=Ag(m,d,p,u,c,h,r,o,a);u=g,c=y,h=x;const b=eu(l);b.forEach(S=>{c[S]=u[S]+1,h[S]=1});const w=Tg(u,c,h),I=w.filter((S,T)=>-1===b.indexOf(T));return{nonStrided:h.every(S=>1===S),$begin:u,$end:c,$strides:h,size:w,newShape:m,outShape:I}}class ho{getClassName(){return this.constructor.className}static fromConfig(t,e){return new t(e)}}class Zn{constructor(){this.classNameMap={}}static getMap(){return null==Zn.instance&&(Zn.instance=new Zn),Zn.instance}static register(t){Zn.getMap().classNameMap[t.className]=[t,t.fromConfig]}}function ee(n){C(null!=n.className,()=>"Class being registered does not have the static className property defined."),C("string"==typeof n.className,()=>"className is required to be a string, but got type "+typeof n.className),C(n.className.length>0,()=>"Class being registered has an empty-string as its className, which is disallowed."),Zn.register(n)}function _r(){return A}function xd(){return A.memory()}function P(n,t){return A.tidy(n,t)}function ze(n){qm(n).forEach(e=>e.dispose())}function ln(n){return A.keep(n)}function Pg(n,t,e=1){return A.registerBackend(n,t,e)}function Fs(n){return A.customGrad(n)}function Ne(n,t){if((bs(n)&&"string"!==t||Array.isArray(n))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&bs(n)&&!(n instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return qa(n,[],[],t)}!function Kv(n){Km=n}(function U1(n){X().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(n+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")});class nr extends ho{minimize(t,e=!1,s){const{value:r,grads:o}=this.computeGradients(t,s);if(null!=s){const a=s.map(i=>({name:i.name,tensor:o[i.name]}));this.applyGradients(a)}else this.applyGradients(o);return ze(o),e?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(t,e){return function H1(n,t){C(Lc(n),()=>"The f passed in variableGrads(f) must be a function"),C(null==t||Array.isArray(t)&&t.every(u=>u instanceof Hl),()=>"The varList passed in variableGrads(f, varList) must be an array of variables");const e=null!=t;if(!e){t=[];for(const u in A.registeredVariables)t.push(A.registeredVariables[u])}const s=e?t.filter(u=>!u.trainable):null,r=t.length;C((t=t.filter(u=>u.trainable)).length>0,()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${r} variables is trainable.`);const{value:a,grads:i}=A.gradients(n,t,null,!0);C(i.some(u=>null!=u),()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."),C(0===a.rank,()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);const l={};return t.forEach((u,c)=>{null!=i[c]&&(l[u.name]=i[c])}),s?.forEach(u=>l[u.name]=null),{value:a,grads:l}}(t,e)}dispose(){null!=this.iterations_&&ze(this.iterations_)}saveIterations(){var t=this;return L(function*(){return null==t.iterations_&&(t.iterations_=0),{name:"iter",tensor:Ne(t.iterations_,"int32")}})()}getWeights(){return L(function*(){throw new Error("getWeights() is not implemented for this optimizer yet.")})()}setWeights(t){var e=this;return L(function*(){throw new Error(`setWeights() is not implemented for this optimizer class ${e.getClassName()}`)})()}extractIterations(t){var e=this;return L(function*(){return e.iterations_=(yield t[0].tensor.data())[0],t.slice(1)})()}}Object.defineProperty(nr,Symbol.hasInstance,{value:n=>null!=n.minimize&&null!=n.computeGradients&&null!=n.applyGradients});const Wt=D({abs_:function j1(n){const t=N(n,"x","abs");return A.runKernel("complex64"===t.dtype?ji:zi,{x:t})}}),se=D({add_:function K1(n,t){let e=N(n,"a","add"),s=N(t,"b","add");return[e,s]=$t(e,s),A.runKernel(to,{a:e,b:s})}}),bd=D({all_:function q1(n,t=null,e=!1){const r={x:N(n,"x","all","bool")};return A.runKernel("All",r,{axis:t,keepDims:e})}}),su=D({any_:function X1(n,t=null,e=!1){const r={x:N(n,"x","any","bool")};return A.runKernel("Any",r,{axis:t,keepDims:e})}}),Er=D({argMax_:function Y1(n,t=0){const s={x:N(n,"x","argMax")};return A.runKernel(Bi,s,{axis:t})}});function Xa(n,t,e,s,r="NHWC",o){return tn(n,[...t,n[3]],e,o,s,null,null,Ls(r))}function Jn(n,t,e,s,r,o,a="channelsLast"){const[i,l]=ru(t);let u;if("channelsLast"===a)u=[i,l,n[3],n[3]];else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);u=[i,l,n[1],n[1]]}return tn(n,u,e,s,r,o,!1,a)}function Os(n,t,e,s,r,o,a="NDHWC"){const[i,l,u]=vd(t);let c,h;if("NDHWC"===a)h="channelsLast",c=[i,l,u,n[4],n[4]];else{if("NCDHW"!==a)throw new Error(`Unknown dataFormat ${a}`);h="channelsFirst",c=[i,l,u,n[1],n[1]]}return sr(n,c,e,s,r,!1,h,o)}function tn(n,t,e,s,r,o,a=!1,i="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h]=n;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,h,u,c]=n}const[d,p,,f]=t,[m,g]=ru(e),[y,x]=ru(s),b=po(d,y),w=po(p,x),{padInfo:I,outHeight:k,outWidth:S}=function Q1(n,t,e,s,r,o,a,i,l){let u,c,h;if("number"==typeof n){u={top:n,bottom:n,left:n,right:n,type:0===n?"VALID":"NUMBER"};const p=function Z1(n,t,e,s,r){null==s&&(s=wd(n,t,e));const a=n[1];return[Ar((n[0]-t+2*s)/e+1,r),Ar((a-t+2*s)/e+1,r)]}([t,e],o,s,n,i);c=p[0],h=p[1]}else if("same"===n){c=Math.ceil(t/s),h=Math.ceil(e/r);const d=Math.max(0,(c-1)*s+o-t),p=Math.max(0,(h-1)*r+a-e),f=Math.floor(d/2),m=d-f,g=Math.floor(p/2);u={top:f,bottom:m,left:g,right:p-g,type:"SAME"}}else if("valid"===n)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-o+1)/s),h=Math.ceil((e-a+1)/r);else{if("object"!=typeof n)throw Error(`Unknown padding parameter: ${n}`);{const d="channelsLast"===l?n[1][0]:n[2][0],p="channelsLast"===l?n[1][1]:n[2][1],f="channelsLast"===l?n[2][0]:n[3][0],m="channelsLast"===l?n[2][1]:n[3][1];u={top:d,bottom:p,left:f,right:m,type:0===d&&0===p&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ar((t-o+d+p)/s+1,i),h=Ar((e-a+f+m)/r+1,i)}}return{padInfo:u,outHeight:c,outWidth:h}}(r,u,c,m,g,b,w,o,i),T=a?f*h:f;let _;return"channelsFirst"===i?_=[l,T,k,S]:"channelsLast"===i&&(_=[l,k,S,T]),{batchSize:l,dataFormat:i,inHeight:u,inWidth:c,inChannels:h,outHeight:k,outWidth:S,outChannels:T,padInfo:I,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:p,effectiveFilterHeight:b,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:x,inShape:n,outShape:_,filterShape:t}}function sr(n,t,e,s,r,o=!1,a="channelsLast",i){let[l,u,c,h,d]=[-1,-1,-1,-1,-1];if("channelsLast"===a)[l,u,c,h,d]=n;else{if("channelsFirst"!==a)throw new Error(`Unknown dataFormat ${a}`);[l,d,u,c,h]=n}const[p,f,m,,g]=t,[y,x,b]=vd(e),[w,I,k]=vd(s),S=po(p,w),T=po(f,I),_=po(m,k),{padInfo:E,outDepth:M,outHeight:B,outWidth:V}=function eI(n,t,e,s,r,o,a,i,l,u,c){let h,d,p,f;if("number"==typeof n){h={top:n,bottom:n,left:n,right:n,front:n,back:n,type:0===n?"VALID":"NUMBER"};const g=function J1(n,t,e,s,r,o){null==r&&(r=wd(n,t,s));const i=n[1],l=n[2];return[Ar((n[0]-t+2*r)/s+1,o),Ar((i-t+2*r)/s+1,o),Ar((l-t+2*r)/s+1,o),e]}([t,e,s,1],i,1,r,n,c);d=g[0],p=g[1],f=g[2]}else if("same"===n){d=Math.ceil(t/r),p=Math.ceil(e/o),f=Math.ceil(s/a);const m=(d-1)*r+i-t,g=(p-1)*o+l-e,y=(f-1)*a+u-s,x=Math.floor(m/2),b=m-x,w=Math.floor(g/2),I=g-w,k=Math.floor(y/2);h={top:w,bottom:I,left:k,right:y-k,front:x,back:b,type:"SAME"}}else{if("valid"!==n)throw Error(`Unknown padding parameter: ${n}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/r),p=Math.ceil((e-l+1)/o),f=Math.ceil((s-u+1)/a)}return{padInfo:h,outDepth:d,outHeight:p,outWidth:f}}(r,u,c,h,y,x,b,S,T,_,i),j=o?g*d:g;let G;return"channelsFirst"===a?G=[l,j,M,B,V]:"channelsLast"===a&&(G=[l,M,B,V,j]),{batchSize:l,dataFormat:a,inDepth:u,inHeight:c,inWidth:h,inChannels:d,outDepth:M,outHeight:B,outWidth:V,outChannels:j,padInfo:E,strideDepth:y,strideHeight:x,strideWidth:b,filterDepth:p,filterHeight:f,filterWidth:m,effectiveFilterDepth:S,effectiveFilterHeight:T,effectiveFilterWidth:_,dilationDepth:w,dilationHeight:I,dilationWidth:k,inShape:n,outShape:G,filterShape:t}}function wd(n,t,e,s=1){const r=po(t,s);return Math.floor((n[0]*(e-1)-e+r)/2)}function ru(n){return"number"==typeof n?[n,n,n]:2===n.length?[n[0],n[1],1]:n}function vd(n){return"number"==typeof n?[n,n,n]:n}function po(n,t){return t<=1?n:n+(n-1)*(t-1)}function Ar(n,t){if(!t)return Math.trunc(n);switch(t){case"round":return Math.round(n);case"ceil":return Math.ceil(n);case"floor":return Math.floor(n);default:throw new Error(`Unknown roundingMode ${t}`)}}function rr(n){const[t,e,s]=ru(n);return 1===t&&1===e&&1===s}function un(n,t){return rr(n)||rr(t)}function Ls(n){if("NHWC"===n)return"channelsLast";if("NCHW"===n)return"channelsFirst";throw new Error(`Unknown dataFormat ${n}`)}const F=D({reshape_:function tI(n,t){const s={x:N(n,"x","reshape","string_or_numeric")};return A.runKernel(Nl,s,{shape:t})}}),ou=D({avgPool_:function nI(n,t,e,s,r){const o=N(n,"x","avgPool","float32");C(un(e,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`);let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`),null!=r&&C(Jt(s),()=>`Error in avgPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let h=A.runKernel(Wi,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return h=ue(h,o.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),zg=D({avgPool3d_:function sI(n,t,e,s,r,o="NDHWC"){const a=N(n,"x","avgPool3d","float32");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),null!=r&&C(Jt(s),()=>`Error in avgPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);let h=A.runKernel(Ui,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return h=ue(h,i.dtype),l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}});function rI(n){let t;return t=0===n.rank||1===n.rank?F(n,[1,1,1,n.size]):2===n.rank?F(n,[1,1,n.shape[0],n.shape[1]]):3===n.rank?F(n,[1,n.shape[0],n.shape[1],n.shape[2]]):n,t}const fo=D({batchNorm_:function oI(n,t,e,s,r,o){null==o&&(o=.001);const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(i.rank===l.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==c||i.rank===c.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==u||i.rank===u.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const d={x:rI(a),scale:u,offset:c,mean:i,variance:l},f=A.runKernel(nl,d,{varianceEpsilon:o});return F(f,a.shape)}}),iI=D({batchNorm2d_:function aI(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(2===a.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`),C(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),C(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=u&&C(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=c&&C(2===c.rank||1===c.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`),fo(a,i,l,c,u,o)}}),uI=D({batchNorm3d_:function lI(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(3===a.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`),C(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),C(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=u&&C(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=c&&C(3===c.rank||1===c.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`),fo(a,i,l,c,u,o)}}),hI=D({batchNorm4d_:function cI(n,t,e,s,r,o){const a=N(n,"x","batchNorm"),i=N(t,"mean","batchNorm"),l=N(e,"variance","batchNorm");let u,c;return null!=r&&(u=N(r,"scale","batchNorm")),null!=s&&(c=N(s,"offset","batchNorm")),C(4===a.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`),C(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),C(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=u&&C(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=c&&C(4===c.rank||1===c.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`),fo(a,i,l,c,u,o)}}),_n=D({clipByValue_:function dI(n,t,e){const s=N(n,"x","clipByValue");return C(t<=e,()=>`Error in clip: min (${t}) must be less than or equal to max (${e}).`),A.runKernel(sa,{x:s},{clipValueMin:t,clipValueMax:e})}}),Ut=D({concat_:function pI(n,t=0){C(n.length>=1,()=>"Pass at least one tensor to concat");const e=ng(n,"tensors","concat","string_or_numeric");return"complex64"===e[0].dtype&&e.forEach(o=>{if("complex64"!==o.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${o.dtype}. `)}),1===e.length?tr(e[0]):A.runKernel(Ki,e,{axis:t})}}),mI=D({concat1d_:function fI(n){return Ut(n,0)}}),yI=D({concat2d_:function gI(n,t){return Ut(n,t)}}),bI=D({concat3d_:function xI(n,t){return Ut(n,t)}}),vI=D({concat4d_:function wI(n,t){return Ut(n,t)}}),or=D({conv2d_:function II(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","conv2d"),l=N(t,"filter","conv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`),null!=a&&C(Jt(s),()=>`Error in conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const h="NHWC"===r?u.shape[3]:u.shape[1];C(h===l.shape[2],()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`),C(un(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`);const f=A.runKernel(qi,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Id=D({conv1d_:function CI(n,t,e,s,r="NWC",o=1,a){const i=N(n,"x","conv1d"),l=N(t,"filter","conv1d");let u=i,c=!1;2===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1]])),C(3===u.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`),C(3===l.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`),null!=a&&C(Jt(s),()=>`Error in conv1d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`),C(u.shape[2]===l.shape[1],()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`),C(un(e,o),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${e} and dilation '${o}'`),C("NWC"===r,()=>`Error in conv1d: got dataFormat of ${r} but only NWC is currently supported.`);const h=F(l,[1,l.shape[0],l.shape[1],l.shape[2]]),d=F(u,[u.shape[0],1,u.shape[1],u.shape[2]]),g=or(d,h,[1,e],s,"NHWC",[1,o],a);return F(g,c?[g.shape[2],g.shape[3]]:[g.shape[0],g.shape[2],g.shape[3]])}}),Cd=D({conv2DBackpropInput_:function kI(n,t,e,s,r,o="NHWC",a){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let i=n,l=t,u=!1;3===t.rank&&(u=!0,l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,n[0],n[1],n[2]]),C(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),C(4===l.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`),C(4===e.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${e.rank}`);const c="NHWC"===o?i[3]:i[1],h="NHWC"===o?l.shape[3]:l.shape[1];C(c===e.shape[2],()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${e.shape[2]}.`),C(h===e.shape[3],()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${e.shape[3]}.`),null!=a&&C(Jt(r),()=>`Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`);const f=A.runKernel(Xi,{dy:l,filter:e},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,inputShape:i});return u?F(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),kd=D({conv2dTranspose_:function NI(n,t,e,s,r,o){const a=N(n,"x","conv2dTranspose"),i=N(t,"filter","conv2dTranspose");return Cd(e,a,i,s,r,"NHWC",o)}}),Mg=D({conv3d_:function SI(n,t,e,s,r="NDHWC",o=[1,1,1]){const a=N(n,"x","conv3d"),i=N(t,"filter","conv3d");let l=a,u=!1;4===a.rank&&(u=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===l.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`),C(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),C(l.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${i.shape[3]}.`),C(un(e,o),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NDHWC"===r,()=>`Error in conv3d: got dataFormat of ${r} but only NDHWC is currently supported.`);const d=A.runKernel(Yi,{x:l,filter:i},{strides:e,pad:s,dataFormat:r,dilations:o});return u?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Bg=D({conv3DBackpropInput_:function TI(n,t,e,s,r){C(n.length===t.rank,()=>`Length of inShape (${n.length}) and rank of dy (${t.rank}) must match`);let o=n,a=t,i=!1;4===t.rank&&(i=!0,a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),o=[1,n[0],n[1],n[2],n[3]]);const l=o[4],u=a.shape[4];C(5===o.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${o.length}.`),C(5===a.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`),C(5===e.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${e.rank}`),C(l===e.shape[3],()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${e.shape[3]}.`),C(u===e.shape[4],()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${e.shape[4]}.`);const d=A.runKernel(qc,{dy:a,filter:e},{pad:r,strides:s,inputShape:o});return i?F(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),_I=D({conv3dTranspose_:function $I(n,t,e,s,r){const o=N(n,"x","conv3dTranspose"),a=N(t,"filter","conv3dTranspose");return Bg(e,o,a,s,r)}}),Ya=D({depthwiseConv2d_:function EI(n,t,e,s,r="NHWC",o=[1,1],a){const i=N(n,"x","depthwiseConv2d"),l=N(t,"filter","depthwiseConv2d");let u=i,c=!1;3===i.rank&&(c=!0,u=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),C(4===u.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`),C(4===l.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`),C(u.shape[3]===l.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`),null!=a&&C(Jt(s),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`);const p=A.runKernel(Ji,{x:u,filter:l},{strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a});return c?F(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Nd=D({floorDiv_:function AI(n,t){let e=N(n,"a","floorDiv"),s=N(t,"b","floorDiv");return[e,s]=$t(e,s),A.runKernel(da,{a:e,b:s})}}),ke=D({div_:function DI(n,t){let e=N(n,"a","div"),s=N(t,"b","div");return[e,s]=$t(e,s),"int32"===e.dtype&&"int32"===s.dtype?Nd(e,s):A.runKernel(aa,{a:e,b:s},{})}}),Za=D({elu_:function RI(n){const e={x:N(n,"x","elu")};return A.runKernel(ia,e)}});function mo(n,t){const e=n.length,s=[];for(let r=0;r<e;r++){const o=e-1-r;(t[t.length-1-r]||1)>1&&1===(n[o]||1)&&s.unshift(o)}return s}function Gt(n,t){const e=[];for(let s=0;s<t.length;s++){const r=n[n.length-s-1],o=t.length-s-1;(null==r||1===r&&t[o]>1)&&e.unshift(o)}return e}function Be(n,t){const e=[],s=Math.max(n.length,t.length);for(let r=0;r<s;r++){let o=n[n.length-r-1];null==o&&(o=1);let a=t[t.length-r-1];if(null==a&&(a=1),1===o)e.unshift(a);else if(1===a)e.unshift(o);else{if(o!==a)throw Error(`Operands could not be broadcast together with shapes ${n} and ${t}.`);e.unshift(o)}}return e}const cs=D({equal_:function FI(n,t){let e=N(n,"a","equal","string_or_numeric"),s=N(t,"b","equal","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(el,{a:e,b:s})}}),Pn=D({exp_:function OI(n){const e={x:N(n,"x","exp")};return A.runKernel(ua,e)}}),zn=D({expandDims_:function LI(n,t=0){const e=N(n,"x","expandDims","string_or_numeric");return C(t<=e.rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(tl,{input:e},{dim:t})}}),Qn=D({tile_:function PI(n,t){const e=N(n,"x","tile","string_or_numeric");return C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of reps ${t}.`),A.runKernel(Va,{x:e},{reps:t})}}),Vg=D({eye_:function zI(n,t,e,s="float32"){null==t&&(t=n);const r=We([n,t],s),o=n<=t?n:t;for(let i=0;i<o;++i)r.set(1,i,i);const a=F(r.toTensor(),[n,t]);if(null==e)return a;if(1===e.length)return Qn(zn(a,0),[e[0],1,1]);if(2===e.length)return Qn(zn(zn(a,0),0),[e[0],e[1],1,1]);if(3===e.length)return Qn(zn(zn(zn(a,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${e.length}D.`)}});function Ja(n,t,e){return A.runKernel(oh,{},{shape:n,value:t,dtype:e})}const Qa=D({floor_:function MI(n){const e={x:N(n,"x","floor")};return A.runKernel(ha,e)}}),ei=D({gather_:function BI(n,t,e=0,s=0){const r=N(n,"x","gather"),o=N(t,"indices","gather","int32");return A.runKernel(sl,{x:r,indices:o},{axis:e,batchDims:s})}}),Mn=D({greater_:function VI(n,t){let e=N(n,"a","greater","string_or_numeric"),s=N(t,"b","greater","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(rl,{a:e,b:s})}}),Dr=D({greaterEqual_:function WI(n,t){let e=N(n,"a","greaterEqual","string_or_numeric"),s=N(t,"b","greaterEqual","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(pa,{a:e,b:s})}}),au=D({leakyRelu_:function UI(n,t=.2){const s={x:N(n,"x","leakyRelu")};return A.runKernel(ol,s,{alpha:t})}}),Bn=D({log_:function GI(n){const e={x:N(n,"x","log")};return A.runKernel(xa,e)}}),iu=D({log1p_:function HI(n){const e={x:N(n,"x","log1p")};return A.runKernel(ba,e)}}),hs=D({max_:function jI(n,t=null,e=!1){const r={x:N(n,"x","max")};return A.runKernel(dl,r,{reductionIndices:t,keepDims:e})}}),R=D({mul_:function KI(n,t){let e=N(n,"a","mul"),s=N(t,"b","mul");return[e,s]=$t(e,s),A.runKernel(Ca,{a:e,b:s})}}),be=D({sub_:function qI(n,t){let e=N(n,"a","sub"),s=N(t,"b","sub");return[e,s]=$t(e,s),A.runKernel(za,{a:e,b:s})}}),we=D({sum_:function XI(n,t=null,e=!1){let s=N(n,"x","sum");return"bool"===s.dtype&&(s=ue(s,"int32")),A.runKernel(Al,{x:s},{axis:t,keepDims:e})}}),Sd=D({logSoftmax_:function YI(n,t=-1){const e=N(n,"logits","logSoftmax");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and axis was ${t}`);return Fs((r,o)=>{const i=hs(r,t,!0),l=be(r,i),u=be(ue(l,"float32"),Bn(we(Pn(l),t,!0)));return o([u]),{value:u,gradFunc:(h,d)=>{const[p]=d,m=Pn(p);return be(h,R(we(h,t,!0),m))}}})(e)}}),Cs=D({logicalAnd_:function ZI(n,t){const e=N(n,"a","logicalAnd","bool"),s=N(t,"b","logicalAnd","bool");return Be(e.shape,s.shape),A.runKernel(ll,{a:e,b:s})}}),tt=D({matMul_:function JI(n,t,e=!1,s=!1){let r=N(n,"a","matMul"),o=N(t,"b","matMul");return[r,o]=$t(r,o),A.runKernel(Gi,{a:r,b:o},{transposeA:e,transposeB:s})}}),lu=D({maxPool_:function QI(n,t,e,s,r){const o=N(n,"x","maxPool");let i=o,l=!1;3===o.rank&&(l=!0,i=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===i.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`),C(un(e,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${e} and dilations '1'`),null!=r&&C(Jt(s),()=>`Error in maxPool: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const h=A.runKernel(pl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Wg=D({maxPool3d_:function eC(n,t=[1,1,1],e,s,r,o="NDHWC"){const a=N(n,"x","maxPool3d");let i=a,l=!1;4===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]])),C(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),C("NDHWC"===o,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${o}`),null!=r&&C(Jt(s),()=>`Error in maxPool3d: pad must be an integer when using, dimRoundingMode ${r} but got pad ${s}.`);const h=A.runKernel(fl,{x:i},{filterSize:t,strides:e,pad:s,dimRoundingMode:r,dataFormat:o});return l?F(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Ps=D({maximum_:function tC(n,t){let e=N(n,"a","maximum"),s=N(t,"b","maximum");return[e,s]=$t(e,s),"bool"===e.dtype&&(e=ue(e,"int32"),s=ue(s,"int32")),Be(e.shape,s.shape),A.runKernel(wa,{a:e,b:s})}}),_t=D({mean_:function nC(n,t=null,e=!1){const r={x:N(n,"x","mean")};return A.runKernel(ml,r,{axis:t,keepDims:e})}}),ti=D({minimum_:function sC(n,t){let e=N(n,"a","minimum"),s=N(t,"b","minimum");return[e,s]=$t(e,s),"bool"===e.dtype&&(e=ue(e,"int32"),s=ue(s,"int32")),Be(e.shape,s.shape),A.runKernel(va,{a:e,b:s})}});function Td(n,t){for(let e=0;e<n.length;++e)if(n[n.length-e-1]!==t-1-e)return!1;return!0}function Ug(n,t,e){const s=n.length+t.length,r=[];let o=0,a=0;for(let i=0;i<s;i++)-1===e.indexOf(i)?r.push(n[o++]):r.push(t[a++]);return r}function nn(n,t){const e=[],s=n.length;for(let o=0;o<s;o++)-1===t.indexOf(o)&&e.push(n[o]);return[e,t.map(o=>n[o])]}function At(n,t){return Ug(n,t.map(s=>1),t)}function cn(n,t,e){C(Td(t,e),()=>`${n} supports only inner-most axes for now. Got axes ${t} and rank-${e} input.`)}function Dt(n,t){if(Td(n,t))return null;const e=[];for(let s=0;s<t;++s)-1===n.indexOf(s)&&e.push(s);return n.forEach(s=>e.push(s)),e}function go(n){return n.map((t,e)=>[e,t]).sort((t,e)=>t[1]-e[1]).map(t=>t[0])}function zt(n,t){const e=[];for(let s=t-n;s<t;++s)e.push(s);return e}const ut=D({square_:function rC(n){const t=N(n,"x","square");return A.runKernel("Square",{x:t},{})}}),$d=D({moments_:function oC(n,t=null,e=!1){const s=Me(t,(n=N(n,"x","moments")).shape),r=_t(n,s,e);let o=r.shape;e||(o=At(r.shape,s));const a=ut(be(ue(n,"float32"),F(r,o)));return{mean:r,variance:_t(a,s,e)}}}),Ct=D({neg_:function aC(n){const e={x:N(n,"x","neg")};return A.runKernel(xl,e)}}),yo=D({notEqual_:function iC(n,t){let e=N(n,"a","notEqual","string_or_numeric"),s=N(t,"b","notEqual","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(bl,{a:e,b:s})}}),_d=D({oneHot_:function lC(n,t,e=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const o={indices:N(n,"indices","oneHot","int32")};return A.runKernel(vl,o,{depth:t,onValue:e,offValue:s})}});function Ht(n,t="float32"){if("complex64"===t){const s=Ht(n,"float32"),r=Ht(n,"float32");return Sr(s,r)}const e=pn(q(n),t);return A.makeTensor(e,n,t)}function zs(n,t="float32"){if("complex64"===t){const s=zs(n,"float32"),r=Ht(n,"float32");return Sr(s,r)}const e=Dm(q(n),t);return A.makeTensor(e,n,t)}const Vn=D({onesLike_:function uC(n){const e={x:N(n,"x","onesLike")};return A.runKernel(wl,e)}}),uu=D({pad_:function cC(n,t,e=0){const s=N(n,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");return A.runKernel(Cl,{x:s},{paddings:t,constantValue:e})}}),cu=D({prelu_:function hC(n,t){const e=N(n,"x","prelu"),s=N(t,"alpha","prelu");return A.runKernel(kl,{x:e,alpha:s})}});var Ed=H(340);class Ad{constructor(t,e,s,r,o){this.mean=t,this.stdDev=e,this.dtype=s,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=o||Math.random();this.random=Ed.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const r=this.nextVal;return this.nextVal=NaN,r}let t,e,s=!1;for(;!s;){let r,o,a;do{r=2*this.random()-1,o=2*this.random()-1,a=r*r+o*o}while(a>=1||0===a);const i=Math.sqrt(-2*Math.log(a)/a);t=this.mean+this.stdDev*r*i,e=this.mean+this.stdDev*o*i,(!this.truncated||this.isValidTruncated(t))&&(s=!0)}return(!this.truncated||this.isValidTruncated(e))&&(this.nextVal=this.convertValue(e)),this.convertValue(t)}convertValue(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)}isValidTruncated(t){return t<=this.upper&&t>=this.lower}}class dC{constructor(t=0,e=1,s,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=t,this.range=e-t,this.dtype=s,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${t} - ${e} <= 1 and dtype is not float`);this.random=Ed.alea(r)}convertValue(t){return this.canReturnFloat()?t:Math.round(t)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const yC=D({randomNormal_:function gC(n,t=0,e=1,s,r){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const o=new Ad(t,e,s,!1,r),a=We(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),ni=D({randomUniform_:function xC(n,t=0,e=1,s="float32",r){const o=We(n,s),a=new dC(t,e,null,r);for(let i=0;i<o.values.length;i++)o.values[i]=a.nextValue();return o.toTensor()}}),ks=D({relu_:function bC(n){const e={x:N(n,"x","relu")};return A.runKernel(Sa,e)}}),Ms=D({reverse_:function wC(n,t){const s={x:N(n,"x","reverse")};return A.runKernel($l,s,{dims:t})}}),Rd=D({selu_:function vC(n){const e={x:N(n,"x","selu")};return A.runKernel(Ea,e)}}),Gg=D({separableConv2d_:function IC(n,t,e,s,r,o=[1,1],a="NHWC"){const i=N(n,"x","separableConv2d"),l=N(t,"depthwiseFilter","separableConv2d"),u=N(e,"pointwiseFilter","separableConv2d");let c=i,h=!1;if(3===i.rank&&(h=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");C(4===c.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`),C(4===l.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`),C(1===u.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`),C(1===u.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);const d=l.shape[2],p=l.shape[3];C(u.shape[2]===d*p,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*p}, but got ${u.shape[2]}.`);const f=Ya(c,l,s,r,a,o),g=or(f,u,1,"valid",a);return h?F(g,[g.shape[1],g.shape[2],g.shape[3]]):g}}),Rr=D({sigmoid_:function CC(n){const e={x:N(n,"x","sigmoid")};return A.runKernel(Fa,e)}}),nt=D({slice_:function kC(n,t,e){const s=N(n,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");return A.runKernel(El,{x:s},{begin:t,size:e})}}),Fd=D({slice1d_:function NC(n,t,e){const s=N(n,"x","slice1d");return C(1===s.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`),nt(s,[t],[e])}}),Hg=D({slice2d_:function SC(n,t,e){const s=N(n,"x","slice2d");return C(2===s.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`),nt(s,t,e)}}),Od=D({slice3d_:function TC(n,t,e){const s=N(n,"x","slice3d");return C(3===s.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`),nt(s,t,e)}}),hu=D({slice4d_:function $C(n,t,e){const s=N(n,"x","slice4d");return C(4===s.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`),nt(s,t,e)}}),du=D({softmax_:function _C(n,t=-1){const e=N(n,"logits","softmax","float32");if(-1===t&&(t=e.rank-1),t!==e.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${e.rank} and dim was ${t}`);return A.runKernel(Fl,{logits:e},{dim:t})}}),xo=D({softplus_:function EC(n){const e={x:N(n,"x","softplus")};return A.runKernel(Oa,e)}}),En=D({split_:function AC(n,t,e=0){const r={x:N(n,"x","split")};return A.runKernel(Rl,r,{numOrSizeSplits:t,axis:e})}}),fn=D({sqrt_:function DC(n){const e={x:N(n,"x","sqrt")};return A.runKernel(La,e)}}),ar=D({squeeze_:function RC(n,t){const e=N(n,"x","squeeze");return F(e,Xs(e.shape,t).newShape)}}),es=D({stack_:function FC(n,t=0){const e=ng(n,"tensors","stack","string_or_numeric");return C(e.length>=1,()=>"Pass at least one tensor to tf.stack"),e.length>0&&C(t<=e[0].rank,()=>"Axis must be <= rank of the tensor"),A.runKernel(Il,e,{axis:t})}}),pu=D({tanh_:function OC(n){const e={x:N(n,"x","tanh")};return A.runKernel(Ba,e)}});function gn(n,t){Dc(n);const e=Ka(n,t);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return qa(n,null,e,t)}const Ld=D({truncatedNormal_:function LC(n,t=0,e=1,s,r){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const o=new Ad(t,e,s,!0,r),a=We(n,s);for(let i=0;i<a.values.length;i++)a.values[i]=o.nextValue();return a.toTensor()}}),ds=D({unstack_:function PC(n,t=0){const e=N(n,"x","unstack","string_or_numeric");return C(t>=-e.shape.length&&t<e.shape.length,()=>`Axis = ${t} is not in [-${e.shape.length}, ${e.shape.length})`),A.runKernel(Ll,{value:e},{axis:t})}}),si=D({broadcastTo_:function MC(n,t){let e=N(n,"broadcastTo","x");const s=e.shape;if(t.some(u=>!(u>0)||u%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<e.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${e.rank}.`);if(t.length>e.rank){const u=e.shape.slice();for(;u.length<t.length;)u.unshift(1);e=F(e,u)}const r=e.shape,o=Array.from(t);for(let u=t.length-1;u>=0;u--)if(r[u]===t[u])o[u]=1;else if(1!==e.shape[u])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);return 0===o.map((u,c)=>u>1?c:-1).filter(u=>u>=0).length?tr(e):A.runKernel(Va,{x:e},{reps:o})}}),Nn=D({where_:function BC(n,t,e){const s=N(t,"a","where"),r=N(e,"b","where"),o=N(n,"condition","where","bool"),a=Be(Be(o.shape,s.shape),r.shape),i=si(o,a),l=si(s,a),u=si(r,a);return A.runKernel(_l,{condition:i,t:l,e:u})}}),Ke=D({zerosLike_:function VC(n){const e={x:N(n,"x","zerosLike")};return A.runKernel(zl,e)}}),qe=D({transpose_:function WC(n,t){const e=N(n,"x","transpose");return null==t&&(t=e.shape.map((o,a)=>a).reverse()),C(e.rank===t.length,()=>`Error in transpose: rank of input ${e.rank} must match length of perm ${t}.`),t.forEach(o=>{C(o>=0&&o<e.rank,()=>`All entries in 'perm' must be between 0 and ${e.rank-1} but got ${t}`)}),e.rank<=1?e.clone():A.runKernel(Ol,{x:e},{perm:t})}}),HC=D({dropout_:function GC(n,t,e,s){const r=N(n,"x","dropout");if(C("float32"===r.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${r.dtype} tensor instead.`),C(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return n instanceof Tt?r.clone():r;const o=function UC(n,t){if(null==t)return n.shape.slice();if(je(n.shape,t))return t;if(n.shape.length===t.length){const e=[];for(let s=0;s<n.shape.length;s++)e.push(null==t[s]&&null!=n.shape[s]?n.shape[s]:t[s]);return e}return t}(r,e),a=1-t,i=ke(Qa(se(ni(o,0,1,"float32",s),a)),a);return R(r,i)}}),Pd=D({imag_:function jC(n){const e={input:N(n,"input","imag")};return A.runKernel(uh,e)}}),fu=D({real_:function KC(n){const e={input:N(n,"input","real")};return A.runKernel(vh,e)}}),mu=D({fft_:function qC(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${n.dtype}.`),A.runKernel("FFT",{input:n})}}),gu=D({rfft_:function XC(n,t){C("float32"===n.dtype,()=>`The dtype for rfft() must be real value but got ${n.dtype}`);let e=n.shape[n.shape.length-1];const s=n.size/e;let r;if(null!=t&&t<e){const f=n.shape.map(g=>0),m=n.shape.map(g=>g);m[n.shape.length-1]=t,r=nt(n,f,m),e=t}else if(null!=t&&t>e){const f=n.shape.map(m=>m);f[n.shape.length-1]=t-e,r=Ut([n,Ht(f)],n.shape.length-1),e=t}else r=n;const o=Ke(r),a=F(Sr(r,o),[s,e]),i=mu(a),l=Math.floor(e/2)+1,u=fu(i),c=Pd(i),h=En(u,[l,e-l],u.shape.length-1),d=En(c,[l,e-l],c.shape.length-1),p=r.shape.slice();return p[r.shape.length-1]=l,F(Sr(h[0],d[0]),p)}}),ri=D({ifft_:function YC(n){return C("complex64"===n.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${n.dtype}.`),A.runKernel(lh,{input:n})}}),zd=D({irfft_:function ZC(n){const t=n.shape[n.shape.length-1],e=n.size/t;let s;if(t<=2){const r=F(n,[e,t]);s=ri(r)}else{const r=[e,2*(t-1)],o=F(fu(n),[e,t]),a=F(Pd(n),[e,t]),i=Ms(nt(o,[0,1],[e,t-2]),1),l=R(Ms(nt(a,[0,1],[e,t-2]),1),Ne(-1)),u=Ut([o,i],1),c=Ut([a,l],1),h=F(Sr(u,c),[r[0],r[1]]);s=ri(h)}if(s=fu(s),3===n.rank&&0!==n.shape[0]){const r=s,o=n.shape[0];s=F(s,[o,s.shape[0]/o,s.shape[1]]),r.dispose()}return s}}),Md=D({conv2DBackpropFilter_:function JC(n,t,e,s,r,o="NHWC",a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),C(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),C(4===l.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`),C(4===e.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${e}.`);const u="NHWC"===o?i.shape[3]:i.shape[1],c="NHWC"===o?l.shape[3]:l.shape[1];return C(u===e[2],()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${e[2]}.`),C(c===e[3],()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${e[3]}).`),null!=a&&C(Jt(r),()=>`Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode ${a} but got pad ${r}.`),A.runKernel(jc,{x:i,dy:l},{strides:s,pad:r,dataFormat:o,dimRoundingMode:a,filterShape:e})}}),Bd=D({relu6_:function QC(n){const e={x:N(n,"x","relu6")};return A.runKernel(Ta,e)}}),oi=D({step_:function ek(n,t=0){const s={x:N(n,"x","step")};return A.runKernel(Wa,s,{alpha:t})}});function yu(n,t,e){if(null==e||"linear"===e)return n;if("relu"===e)return R(n,oi(t));throw new Error(`Cannot compute gradient for fused activation ${e}.`)}function xu(n,t){let e=t;const s=Gt(n.shape,t.shape);return s.length>0&&(e=we(e,s)),F(e,n.shape)}function bu(n,t,e,s){if("linear"===t)return n;if("relu"===t)return ks(n);if("elu"===t)return Za(n);if("relu6"===t)return Bd(n);if("prelu"===t)return cu(n,e);if("leakyrelu"===t)return au(n,s);if("sigmoid"===t)return Rr(n);throw new Error(`Unknown fused activation ${t}.`)}const wu=(n,t)=>!(n>0)||"linear"===t,jg=D({fusedConv2d_:function tk({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===wu(A.state.gradientDepth,l=l||"linear")){let I=or(n,t,e,s,r,o,a);return null!=i&&(I=se(I,i)),bu(I,l,u,c)}const h=N(n,"x","conv2d"),d=N(t,"filter","conv2d");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),null!=a&&C(Jt(s),()=>`Error in fused conv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${s}.`),C(p.shape[3]===d.shape[2],()=>`Error in conv2d: depth of input (${p.shape[3]}) must match input depth for filter ${d.shape[2]}.`),C(un(e,o),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),C("NHWC"===r,()=>`Error in conv2d: got dataFormat of ${r} but only NHWC is currently supported.`);const m=tn(p.shape,d.shape,e,o,s,a);let g,y;null!=i&&(g=N(i,"bias","fused conv2d"),[g]=$t(g,h),Be(m.outShape,g.shape)),null!=u&&(y=N(u,"prelu weights","fused conv2d"));const x=(I,k)=>{const[S,T,_,E]=k,M=yu(I,_,l);C(rr(o),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`);const j=[Cd(T.shape,M,S,e,s),Md(T,M,S.shape,e,s)];if(null!=E){const G=xu(E,M);j.push(G)}return j},b={x:p,filter:d,bias:g,preluActivationWeights:y},w={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?Fs((k,S,T)=>{let _=A.runKernel(Bl,b,w);return T([S,k,_]),f&&(_=F(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:x}})(p,d):Fs((k,S,T,_)=>{let E=A.runKernel(Bl,b,w);return _([S,k,E,T]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:x}})(p,d,g)}}),Kg=D({depthwiseConv2dNativeBackpropFilter_:function nk(n,t,e,s,r,o=[1,1],a){let i=n;3===n.rank&&(i=F(n,[1,n.shape[0],n.shape[1],n.shape[2]]));let l=t;return 3===l.rank&&(l=F(t,[1,t.shape[0],t.shape[1],t.shape[2]])),A.runKernel(Jc,{x:i,dy:l},{strides:s,pad:r,dimRoundingMode:a,dilations:o,filterShape:e})}}),qg=D({depthwiseConv2dNativeBackpropInput_:function sk(n,t,e,s,r,o=[1,1],a){let i=t,l=!1;3===t.rank&&(l=!0,i=F(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const h=A.runKernel(Qc,{dy:i,filter:e},{strides:s,pad:r,dimRoundingMode:a,dilations:o,inputShape:n});return l?F(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),ok=D({fusedDepthwiseConv2d_:function rk({x:n,filter:t,strides:e,pad:s,dataFormat:r="NHWC",dilations:o=[1,1],dimRoundingMode:a,bias:i,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===wu(A.state.gradientDepth,l)){let I=Ya(n,t,e,s,r,o,a);return null!=i&&(I=se(I,i)),bu(I,l,u,c)}const h=N(n,"x","depthwiseConv2d"),d=N(t,"filter","depthwiseConv2d");let p=h,f=!1;3===h.rank&&(f=!0,p=F(h,[1,h.shape[0],h.shape[1],h.shape[2]])),C(4===p.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),C(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),C(p.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${p.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==o&&(o=[1,1]),C(un(e,o),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${e} and dilations '${o}'`),null!=a&&C(Jt(s),()=>`Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode ${a} but got pad ${s}.`);const m=tn(p.shape,d.shape,e,o,s,a,!0);let g,y;null!=i&&(g=N(i,"bias","fused conv2d"),[g]=$t(g,h),Be(m.outShape,g.shape)),null!=u&&(y=N(u,"prelu weights","fused depthwiseConv2d"));const x=(I,k)=>{C(rr(o),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`);const[S,T,_,E]=k,M=yu(I,_,l),B=qg(T.shape,M,S,e,s,o,a),V=Kg(T,M,S.shape,e,s,o,a);return null!=E?[B,V,xu(g,M)]:[B,V]},b={x:p,filter:d,bias:g,preluActivationWeights:y},w={strides:e,pad:s,dataFormat:r,dilations:o,dimRoundingMode:a,activation:l,leakyreluAlpha:c};return null==i?Fs((k,S,T)=>{let _=A.runKernel(Vl,b,w);return T([S,k,_]),f&&(_=F(_,[_.shape[1],_.shape[2],_.shape[3]])),{value:_,gradFunc:x}})(p,d):Fs((k,S,T,_)=>{let E=A.runKernel(Vl,b,w);return _([S,k,E,T]),f&&(E=F(E,[E.shape[1],E.shape[2],E.shape[3]])),{value:E,gradFunc:x}})(p,d,g)}}),Vd=D({fusedMatMul_:function ak({a:n,b:t,transposeA:e=!1,transposeB:s=!1,bias:r,activation:o="linear",preluActivationWeights:a,leakyreluAlpha:i}){if(!1===wu(A.state.gradientDepth,o)){let E=tt(n,t,e,s);return null!=r&&(E=se(E,r)),bu(E,o,a,i)}let l=N(n,"a","fused matMul"),u=N(t,"b","fused matMul");[l,u]=$t(l,u);const c=e?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],d=e?l.shape[l.rank-1]:l.shape[l.rank-2],p=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=q(f),y=q(m);C(l.rank>=2&&u.rank>=2&&l.rank===u.rank,()=>`Error in fused matMul: inputs must have the same rank of at least 2, got ranks ${l.rank} and ${u.rank}.`),C(je(f,m),()=>`Error in fused matMul: outer dimensions (${f}) and (${m}) of Tensors with shapes ${l.shape} and ${u.shape} must match.`),C(c===h,()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${e} and transposeB=${s} must match.`);const x=l.shape.slice(0,-2).concat([d,p]),b=F(l,e?[g,c,d]:[g,d,c]),w=F(u,s?[y,p,h]:[y,h,p]);let I,k;null!=r&&(I=N(r,"bias","fused matMul"),[I]=$t(I,l),Be(x,I.shape)),null!=a&&(k=N(a,"prelu weights","fused matMul"));const S=(E,M)=>{const[B,V,j,G]=M,W=yu(F(E,j.shape),j,o);let Z,K;return e||s?!e&&s?(Z=tt(W,V,!1,!1),K=tt(W,B,!0,!1)):e&&!s?(Z=tt(V,W,!1,!0),K=tt(B,W,!1,!1)):(Z=tt(V,W,!0,!0),K=tt(W,B,!0,!0)):(Z=tt(W,V,!1,!0),K=tt(B,W,!0,!1)),null!=r?[Z,K,xu(G,W)]:[Z,K]},T={a:b,b:w,bias:I,preluActivationWeights:k},_={transposeA:e,transposeB:s,activation:o,leakyreluAlpha:i};return null==r?Fs((M,B,V)=>{const j=A.runKernel(Ml,T,_);return V([M,B,j]),{value:F(j,x),gradFunc:S}})(b,w):Fs((M,B,V,j)=>{const G=A.runKernel(Ml,T,_);return j([M,B,G,V]),{value:F(G,x),gradFunc:S}})(b,w,I)}});function Xg(n,t,e){const s=1-n%2,r=new Float32Array(n);for(let o=0;o<n;++o){const a=2*Math.PI*o/(n+s-1);r[o]=t-e*Math.cos(a)}return gn(r,"float32")}D({hammingWindow_:function lk(n){return Xg(n,.54,.46)}});const Yg=D({hannWindow_:function ck(n){return Xg(n,.5,.5)}});function vu(n,t,e){if(Dc(n),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Ka(n,e);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return qa(n,t,s,e)}const Zg=D({frame_:function hk(n,t,e,s=!1,r=0){let o=0;const a=[];for(;o+t<=n.size;)a.push(nt(n,o,t)),o+=e;if(s)for(;o<n.size;){const i=o+t-n.size,l=Ut([nt(n,o,t-i),Ja([i],r)]);a.push(l),o+=e}return 0===a.length?vu([],[0,t]):F(Ut(a),[a.length,t])}});D({stft_:function dk(n,t,e,s,r=Yg){null==s&&(s=function ik(n){return Math.floor(Math.pow(2,Math.ceil(Math.log(n)/Math.log(2))))}(t));const o=Zg(n,t,e),a=R(o,r(t));return gu(a,s)}});const mk=D({cropAndResize_:function fk(n,t,e,s,r="bilinear",o=0){const a=N(n,"image","cropAndResize"),i=N(t,"boxes","cropAndResize","float32"),l=N(e,"boxInd","cropAndResize","int32"),u=i.shape[0];return C(4===a.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`),C(1===l.rank&&l.shape[0]===u,()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`),C(2===s.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`),C(s[0]>=1&&s[1]>=1,()=>`cropSize must be atleast [1,1], but was ${s}`),C("bilinear"===r||"nearest"===r,()=>`method must be bilinear or nearest, but was ${r}`),A.runKernel(Xc,{image:a,boxes:i,boxInd:l},{method:r,extrapolationValue:o,cropSize:s})}}),yk=D({flipLeftRight_:function gk(n){const t=N(n,"image","flipLeftRight","float32");return C(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`),A.runKernel(ah,{image:t},{})}}),bk=D({grayscaleToRGB_:function xk(n){const t=N(n,"image","grayscaleToRGB"),e=t.rank-1,s=t.shape[e];C(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),C(1===s,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`);const r=new Array(t.rank);return r.fill(1,0,e),r[e]=3,Qn(t,r)}}),vk=D({rotateWithOffset_:function wk(n,t,e=0,s=.5){const r=N(n,"image","rotateWithOffset","float32");return C(4===r.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${r.rank}.`),A.runKernel(Mh,{image:r},{radians:t,fillValue:e,center:s})}});function bo(n,t,e,s,r,o){null==s&&(s=.5),null==r&&(r=Number.NEGATIVE_INFINITY),null==o&&(o=0);const a=n.shape[0];return e=Math.min(e,a),C(0<=s&&s<=1,()=>`iouThreshold must be in [0, 1], but was '${s}'`),C(2===n.rank,()=>`boxes must be a 2D tensor, but was of rank '${n.rank}'`),C(4===n.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${n.shape[1]}`),C(1===t.rank,()=>"scores must be a 1D tensor"),C(t.shape[0]===a,()=>`scores has incompatible shape with boxes. Expected ${a}, but was ${t.shape[0]}`),C(0<=o&&o<=1,()=>`softNmsSigma must be in [0, 1], but was '${o}'`),{maxOutputSize:e,iouThreshold:s,scoreThreshold:r,softNmsSigma:o}}const Ck=D({nonMaxSuppression_:function Ik(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppression"),a=N(t,"scores","nonMaxSuppression"),i=bo(o,a,e,s,r);return A.runKernel(gh,{boxes:o,scores:a},{maxOutputSize:e=i.maxOutputSize,iouThreshold:s=i.iouThreshold,scoreThreshold:r=i.scoreThreshold})}});function kk(n,t,e){const s=function Nk(n,t,e){return function Tk(n,t,e){let s=0,r=n.length,o=0,a=!1;for(;s<r;){o=s+(r-s>>>1);const i=e(t,n[o]);i>0?s=o+1:(r=o,a=!i)}return a?s:-s-1}(n,t,e||Sk)}(n,t,e);n.splice(s<0?-(s+1):s,0,t)}function Sk(n,t){return n>t?1:n<t?-1:0}function Wd(n,t,e,s,r){return Hd(n,t,e,s,r,0)}function Ud(n,t,e,s,r,o){return Hd(n,t,e,s,r,0,!1,o,!0)}function Gd(n,t,e,s,r,o){return Hd(n,t,e,s,r,o,!0)}function Hd(n,t,e,s,r,o,a=!1,i=!1,l=!1){const u=[];for(let g=0;g<t.length;g++)t[g]>r&&u.push({score:t[g],boxIndex:g,suppressBeginIndex:0});u.sort(Jg);const c=o>0?-.5/o:0,h=[],d=[];for(;h.length<e&&u.length>0;){const g=u.pop(),{score:y,boxIndex:x,suppressBeginIndex:b}=g;if(y<r)break;let w=!1;for(let I=h.length-1;I>=b;--I){const k=$k(n,x,h[I]);if(k>=s){w=!0;break}if(g.score=g.score*_k(s,c,k),g.score<=r)break}g.suppressBeginIndex=h.length,w||(g.score===y?(h.push(x),d.push(g.score)):g.score>r&&kk(u,g,Jg))}const p=h.length,f=e-p;i&&f>0&&(h.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:h};return a&&(m.selectedScores=d),l&&(m.validOutputs=p),m}function $k(n,t,e){const s=n.subarray(4*t,4*t+4),r=n.subarray(4*e,4*e+4),o=Math.min(s[0],s[2]),a=Math.min(s[1],s[3]),i=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(r[0],r[2]),c=Math.min(r[1],r[3]),h=Math.max(r[0],r[2]),d=Math.max(r[1],r[3]),p=(i-o)*(l-a),f=(h-u)*(d-c);if(p<=0||f<=0)return 0;const m=Math.max(o,u),g=Math.max(a,c),y=Math.min(i,h),x=Math.min(l,d),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(p+f-b)}function _k(n,t,e){const s=Math.exp(t*e*e);return e<=n?s:0}function Jg(n,t){return n.score-t.score||n.score===t.score&&t.boxIndex-n.boxIndex}function jd(){return(jd=L(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY){const o=N(n,"boxes","nonMaxSuppressionAsync"),a=N(t,"scores","nonMaxSuppressionAsync"),i=bo(o,a,e,s,r);e=i.maxOutputSize,s=i.iouThreshold,r=i.scoreThreshold;const l=yield Promise.all([o.data(),a.data()]),u=l[0],c=l[1],{selectedIndices:h}=Wd(u,c,e,s,r);return o!==n&&o.dispose(),a!==t&&a.dispose(),gn(h,"int32")})).apply(this,arguments)}const Rk=D({nonMaxSuppressionWithScore_:function Dk(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=bo(a,i,e,s,r,o),h=A.runKernel(xh,{boxes:a,scores:i},{maxOutputSize:e=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:r=l.scoreThreshold,softNmsSigma:o=l.softNmsSigma});return{selectedIndices:h[0],selectedScores:h[1]}}});function Kd(){return(Kd=L(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=0){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=bo(a,i,e,s,r,o);e=l.maxOutputSize,s=l.iouThreshold,r=l.scoreThreshold,o=l.softNmsSigma;const u=yield Promise.all([a.data(),i.data()]),c=u[0],h=u[1],{selectedIndices:d,selectedScores:p}=Gd(c,h,e,s,r,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:gn(d,"int32"),selectedScores:gn(p)}})).apply(this,arguments)}const Pk=D({nonMaxSuppressionPadded_:function Lk(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppression"),i=N(t,"scores","nonMaxSuppression"),l=bo(a,i,e,s,r,null),f=A.runKernel(yh,{boxes:a,scores:i},{maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:o});return{selectedIndices:f[0],validOutputs:f[1]}}});function qd(){return(qd=L(function*(n,t,e,s=.5,r=Number.NEGATIVE_INFINITY,o=!1){const a=N(n,"boxes","nonMaxSuppressionAsync"),i=N(t,"scores","nonMaxSuppressionAsync"),l=bo(a,i,e,s,r,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[d,p]=yield Promise.all([a.data(),i.data()]),{selectedIndices:f,validOutputs:m}=Ud(d,p,u,c,h,o);return a!==n&&a.dispose(),i!==t&&i.dispose(),{selectedIndices:gn(f,"int32"),validOutputs:Ne(m,"int32")}})).apply(this,arguments)}const Qg=D({resizeBilinear_:function Bk(n,t,e=!1,s=!1){const r=N(n,"images","resizeBilinear");C(3===r.rank||4===r.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),C(!1===s||!1===e,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(Tl,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ey=D({resizeNearestNeighbor_:function Vk(n,t,e=!1,s=!1){const r=N(n,"images","resizeNearestNeighbor");C(3===r.rank||4===r.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${r.rank}.`),C(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),C("float32"===r.dtype||"int32"===r.dtype,()=>"`images` must have `int32` or `float32` as dtype"),C(!1===s||!1===e,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let o=r,a=!1;3===r.rank&&(a=!0,o=F(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const[]=t,u=A.runKernel(Sl,{images:o},{alignCorners:e,halfPixelCenters:s,size:t});return a?F(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),ty=D({bincount_:function Wk(n,t,e){const s=N(n,"x","bincount"),r=N(t,"weights","bincount");return C("int32"===s.dtype,()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(r.size===s.size||0===r.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${r.shape}.`),A.runKernel(Gc,{x:s,weights:r},{size:e})}}),Fr=D({lessEqual_:function Uk(n,t){let e=N(n,"a","lessEqual","string_or_numeric"),s=N(t,"b","lessEqual","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(il,{a:e,b:s})}}),Xd=D({round_:function Gk(n){const e={x:N(n,"x","round")};return A.runKernel($a,e)}});function ai(n,t,e=1,s="float32"){if(0===e)throw new Error("Cannot have a step of zero");return A.runKernel(wh,{},{start:n,stop:t,step:e,dtype:s})}const Kk=D({threshold_:function Hk(n,t="binary",e=!1,s=.5){const r=N(n,"image","threshold"),l=r.shape[0]*r.shape[1];let c,h,d,p,u=R(gn([s]),255);if(C(3===r.rank,()=>`Error in threshold: image must be rank 3,but got rank ${r.rank}.`),C(3===r.shape[2]||1===r.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${r.shape[2]}.`),C("int32"===r.dtype||"float32"===r.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${r.dtype}.`),C("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===r.shape[2]){[c,h,d]=En(r,[1,1,1],-1);const g=R(c,.2989),y=R(h,.587),x=R(d,.114);p=se(se(g,y),x)}else p=n;"otsu"===t&&(u=function jk(n,t){let o,a,i,l,u,c,e=gn([-1]),s=gn([0]),r=gn([0]);for(let h=0;h<n.size-1;h++){o=nt(n,0,h+1),a=nt(n,h+1),u=ke(we(o),t),c=ke(we(a),t);const d=we(R(o,ai(0,o.size)));i=ke(d,we(o));const p=Ja(a.shape,o.size),f=se(ai(0,a.size),p),m=R(a,f);l=ke(we(m),we(a));const g=be(i,l),y=be(i,l),x=R(u,c);r=R(R(x,g),y);const b=Mn(r,s);s=Nn(b,r,s),e=Nn(b,gn([h]),e)}return e}(ty(ue(Xd(p),"int32"),Qs([]),256),l));const f=e?Fr(p,u):Mn(p,u);return ue(R(f,255),"int32")}}),Xk=D({transform_:function qk(n,t,e="nearest",s="constant",r=0,o){const a=N(n,"image","transform","float32"),i=N(t,"transforms","transform","float32");return C(4===a.rank,()=>`Error in transform: image must be rank 4,but got rank ${a.rank}.`),C(2===i.rank&&(i.shape[0]===a.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),C(null==o||2===o.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${o}.`),A.runKernel(Lh,{image:a,transforms:i},{interpolation:e,fillMode:s,fillValue:r,outputShape:o})}}),Zk=D({bandPart_:function Yk(n,t,e){C(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),C(e%1==0,()=>`bandPart(): numUpper must be an integer, got ${e}.`);const s=N(n,"a","bandPart");C(s.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`);const r=s.shape,[o,a]=s.shape.slice(-2);if(!(t<=o))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${o}).`);if(!(e<=a))throw new Error(`bandPart(): numUpper (${e}) must not be greater than the number of columns (${a}).`);t<0&&(t=o),e<0&&(e=a);const i=F(ai(0,o,1,"int32"),[-1,1]),l=ai(0,a,1,"int32"),u=be(i,l),c=Cs(Fr(u,Ne(+t,"int32")),Dr(u,Ne(-e,"int32"))),h=Ht([o,a],s.dtype);return F(es(ds(F(s,[-1,o,a])).map(d=>Nn(c,d,h))),r)}}),Iu=D({min_:function Jk(n,t=null,e=!1){const r={x:N(n,"x","min")};return A.runKernel(gl,r,{axis:t,keepDims:e})}}),Or=D({pow_:function Qk(n,t){let e=N(n,"base","pow"),s=N(t,"exp","pow");return[e,s]=$t(e,s),A.runKernel(ka,{a:e,b:s})}});function ny(n,t,e=null){if(0===n.rank)return Wt(n);if(1!==n.rank&&null===e)return ny(F(n,[-1]),t,e);if(1===n.rank||"number"==typeof e||Array.isArray(e)&&1===e.length){if(1===t)return we(Wt(n),e);if(t===1/0)return hs(Wt(n),e);if(t===-1/0)return Iu(Wt(n),e);if("euclidean"===t||2===t)return fn(we(Or(Wt(n),Ne(2,"int32")),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(e)&&2===e.length){if(1===t)return hs(we(Wt(n),e[0]),e[1]-1);if(t===1/0)return hs(we(Wt(n),e[1]),e[0]);if(t===-1/0)return Iu(we(Wt(n),e[1]),e[0]);if("fro"===t||"euclidean"===t)return fn(we(ut(n),e));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${e}`)}const Yd=D({norm_:function eN(n,t="euclidean",e=null,s=!1){const r=ny(n=N(n,"x","norm"),t,e);let o=r.shape;if(s){const a=Me(e,n.shape);o=At(r.shape,a)}return F(r,o)}}),nN=D({gramSchmidt_:function tN(n){let t;if(Array.isArray(n)){t=!1,C(null!=n&&n.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const r=n[0].shape[0];for(let o=1;o<n.length;++o)C(n[o].shape[0]===r,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${n[o].shape[0]} vs. ${r})`)}else t=!0,n=En(n,n.shape[0],0).map(r=>ar(r,[0]));C(n.length<=n[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${n.length}) exceeds number of dimensions (${n[0].shape[0]}).`);const e=[],s=n;for(let r=0;r<n.length;++r)e.push(A.tidy(()=>{let o=s[r];if(r>0)for(let a=0;a<r;++a){const i=R(we(R(e[a],o)),e[a]);o=be(o,i)}return ke(o,Yd(o,"euclidean"))}));return t?es(e,0):e}});function sy(n,t=!1){return A.tidy(()=>{C(2===n.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${n.shape.length}D Tensor.`);const e=n.shape[0],s=n.shape[1];let r=Vg(e),o=tr(n);const a=vu([[1]],[1,1]);let i=tr(a);const l=e>=s?s:e;for(let u=0;u<l;++u){const c=o,h=i,d=r;[i,o,r]=A.tidy(()=>{const p=nt(o,[u,u],[e-u,1]),f=Yd(p),m=nt(o,[u,u],[1,1]),g=Nn(Mn(m,0),vu([[-1]]),vu([[1]])),y=be(m,R(g,f)),x=ke(p,y);i=1===x.shape[0]?tr(a):Ut([a,nt(x,[1,0],[x.shape[0]-1,x.shape[1]])],0);const b=Ct(ke(tt(g,y),f)),w=nt(o,[u,0],[e-u,s]),I=R(b,i),k=qe(i);if(0===u)o=be(w,tt(I,tt(k,w)));else{const _=be(w,tt(I,tt(k,w)));o=Ut([nt(o,[0,0],[u,s]),_],0)}const S=qe(I),T=nt(r,[0,u],[e,r.shape[1]-u]);if(0===u)r=be(T,tt(tt(T,i),S));else{const _=be(T,tt(tt(T,i),S));r=Ut([nt(r,[0,0],[e,u]),_],1)}return[i,o,r]}),ze([c,h,d])}return!t&&e>s&&(r=nt(r,[0,0],[e,s]),o=nt(o,[0,0],[s,s])),[r,o]})}const rN=D({qr_:function sN(n,t=!1){if(C(n.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${n.rank}`),2===n.rank)return sy(n,t);{const e=n.shape.slice(0,n.shape.length-2).reduce((l,u)=>l*u),s=ds(F(n,[e,n.shape[n.shape.length-2],n.shape[n.shape.length-1]]),0),r=[],o=[];return s.forEach(l=>{const[u,c]=sy(l,t);r.push(u),o.push(c)}),[F(es(r,0),n.shape),F(es(o,0),n.shape)]}}});var yn=(()=>{return(n=yn||(yn={}))[n.NONE=0]="NONE",n[n.MEAN=1]="MEAN",n[n.SUM=2]="SUM",n[n.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS",yn;var n})();const Bs=D({computeWeightedLoss_:function oN(n,t,e=yn.SUM_BY_NONZERO_WEIGHTS){const s=N(n,"losses","computeWeightedLoss");let r=null;null!=t&&(r=N(t,"weights","computeWeightedLoss"));const o=null==r?s:R(s,r);if(e===yn.NONE)return o;if(e===yn.SUM)return we(o);if(e===yn.MEAN){if(null==r)return _t(o);{const a=s.size/r.size,i=ke(we(o),we(r));return a>1?ke(i,Ne(a)):i}}if(e===yn.SUM_BY_NONZERO_WEIGHTS){if(null==r)return ke(we(o),Ne(s.size));{const a=R(r,zs(s.shape)),i=ue(we(yo(a,Ne(0))),"float32");return ke(we(o),i)}}throw Error(`Unknown reduction: ${e}`)}});D({absoluteDifference_:function aN(n,t,e,s=yn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","absoluteDifference"),o=N(t,"predictions","absoluteDifference");let a=null;null!=e&&(a=N(e,"weights","absoluteDifference")),Xn(r.shape,o.shape,"Error in absoluteDifference: ");const i=Wt(be(r,o));return Bs(i,a,s)}}),D({cosineDistance_:function lN(n,t,e,s,r=yn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","cosineDistance"),a=N(t,"predictions","cosineDistance");let i=null;null!=s&&(i=N(s,"weights","cosineDistance")),Xn(o.shape,a.shape,"Error in cosineDistance: ");const l=Ne(1),u=be(l,we(R(o,a),e,!0));return Bs(u,i,r)}}),D({hingeLoss_:function cN(n,t,e,s=yn.SUM_BY_NONZERO_WEIGHTS){let r=N(n,"labels","hingeLoss");const o=N(t,"predictions","hingeLoss");let a=null;null!=e&&(a=N(e,"weights","hingeLoss")),Xn(r.shape,o.shape,"Error in hingeLoss: ");const i=Ne(1);r=be(R(Ne(2),r),i);const l=ks(be(i,R(r,o)));return Bs(l,a,s)}}),D({huberLoss_:function dN(n,t,e,s=1,r=yn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","huberLoss"),a=N(t,"predictions","huberLoss");let i=null;null!=e&&(i=N(e,"weights","huberLoss")),Xn(o.shape,a.shape,"Error in huberLoss: ");const l=Ne(s),u=Wt(be(a,o)),c=ti(u,l),h=be(u,c),d=se(R(Ne(.5),ut(c)),R(l,h));return Bs(d,i,r)}}),D({logLoss_:function fN(n,t,e,s=1e-7,r=yn.SUM_BY_NONZERO_WEIGHTS){const o=N(n,"labels","logLoss"),a=N(t,"predictions","logLoss");let i=null;null!=e&&(i=N(e,"weights","logLoss")),Xn(o.shape,a.shape,"Error in logLoss: ");const l=Ne(1),u=Ne(s),c=Ct(R(o,Bn(se(a,u)))),h=R(be(l,o),Bn(se(be(l,a),u))),d=be(c,h);return Bs(d,i,r)}});const Zd=D({squaredDifference_:function gN(n,t){let e=N(n,"a","squaredDifference"),s=N(t,"b","squaredDifference");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(Pa,{a:e,b:s},{})}});D({meanSquaredError_:function yN(n,t,e,s=yn.SUM_BY_NONZERO_WEIGHTS){const r=N(n,"labels","meanSquaredError"),o=N(t,"predictions","meanSquaredError");let a=null;null!=e&&(a=N(e,"weights","meanSquaredError")),Xn(r.shape,o.shape,"Error in meanSquaredError: ");const i=Zd(r,o);return Bs(i,a,s)}}),D({sigmoidCrossEntropy_:function wN(n,t,e,s=0,r=yn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"multiClassLabels","sigmoidCrossEntropy");const a=N(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","sigmoidCrossEntropy")),Xn(o.shape,a.shape,"Error in sigmoidCrossEntropy: "),s>0){const u=Ne(s),c=Ne(1),h=Ne(.5);o=se(R(o,be(c,u)),R(h,u))}const l=function bN(n,t){const e=N(n,"labels","sigmoidCrossEntropyWithLogits"),s=N(t,"logits","sigmoidCrossEntropyWithLogits");Xn(e.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const r=ks(s),o=R(s,e),a=iu(Pn(Ct(Wt(s))));return se(be(r,o),a)}(o,a);return Bs(l,i,r)}});const ry=D({logSumExp_:function IN(n,t=null,e=!1){const s=N(n,"x","logSumExp"),r=Me(t,s.shape),o=hs(s,r,!0),a=be(s,o),i=Pn(a),l=we(i,r),u=Bn(l),c=se(F(o,u.shape),u);if(e){const h=At(c.shape,r);return F(c,h)}return c}});D({softmaxCrossEntropy_:function kN(n,t,e,s=0,r=yn.SUM_BY_NONZERO_WEIGHTS){let o=N(n,"onehotLabels","softmaxCrossEntropy");const a=N(t,"logits","softmaxCrossEntropy");let i=null;if(null!=e&&(i=N(e,"weights","softmaxCrossEntropy")),Xn(o.shape,a.shape,"Error in softmaxCrossEntropy: "),s>0){const u=Ne(s),c=Ne(1),h=Ne(o.shape[1]);o=se(R(o,be(c,u)),ke(u,h))}const l=function CN(n,t,e=-1){if(-1===e&&(e=t.rank-1),e!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${e}`);return Fs((r,o,a)=>{const l=ry(o,[e],!0),u=be(ue(o,"float32"),l);a([r,u]);const c=Ct(R(u,r));return{value:we(c,[e]),gradFunc:(p,f)=>{const[m,g]=f,y=At(p.shape,[e]);return[R(F(p,y),be(ue(m,"float32"),Pn(g))),R(F(p,y),be(Pn(g),ue(m,"float32")))]}}})(n,t)}(o,a);return Bs(l,i,r)}});const TN=D({sparseFillEmptyRows_:function SN(n,t,e,s){const r=N(n,"indices","sparseFillEmptyRows"),o=N(t,"values","sparseFillEmptyRows"),a=N(e,"denseShape","sparseFillEmptyRows"),i=N(s,"defaultValue","sparseFillEmptyRows",o.dtype);if(2!==r.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==o.rank)throw new Error(`Values should be Tensor1D but received shape ${o.shape}`);if(1!==a.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u=A.runKernel(Nh,{indices:r,values:o,denseShape:a,defaultValue:i});return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),_N=D({sparseReshape_:function $N(n,t,e){const s=N(n,"inputIndices","sparseReshape"),r=N(t,"inputShape","sparseReshape"),o=N(e,"newShape","sparseReshape");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==r.rank)throw new Error(`Input shape should be Tensor1D but received shape ${r.shape}`);if(1!==o.rank)throw new Error(`New shape should be Tensor1D but received shape ${o.shape}`);const i=A.runKernel(Sh,{inputIndices:s,inputShape:r,newShape:o});return{outputIndices:i[0],outputShape:i[1]}}}),AN=D({sparseSegmentMean_:function EN(n,t,e){const s=N(n,"data","sparseSegmentMean"),r=N(t,"indices","sparseSegmentMean"),o=N(e,"segmentIds","sparseSegmentMean");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${o.shape}`);return A.runKernel(Th,{data:s,indices:r,segmentIds:o})}}),RN=D({sparseSegmentSum_:function DN(n,t,e){const s=N(n,"data","sparseSegmentSum"),r=N(t,"indices","sparseSegmentSum"),o=N(e,"segmentIds","sparseSegmentSum");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${r.shape}`);if(1!==o.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${o.shape}`);return A.runKernel($h,{data:s,indices:r,segmentIds:o})}}),ON=D({stringNGrams_:function FN(n,t,e,s,r,o,a,i){const l=N(n,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=N(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const d=A.runKernel(Dh,{data:l,dataSplits:u},{separator:e,nGramWidths:s,leftPad:r,rightPad:o,padWidth:a,preserveShortSequences:i});return{nGrams:d[0],nGramsSplits:d[1]}}}),PN=D({stringSplit_:function LN(n,t,e=!0){const s=N(n,"input","stringSplit","string"),r=N(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==r.rank)throw new Error(`Delimiter should be a scalar but received shape ${r.shape}`);const i=A.runKernel(Rh,{input:s,delimiter:r},{skipEmpty:e});return{indices:i[0],values:i[1],shape:i[2]}}}),MN=D({stringToHashBucketFast_:function zN(n,t){const e=N(n,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");return A.runKernel(Fh,{input:e},s)}}),ts={flipLeftRight:yk,grayscaleToRGB:bk,resizeNearestNeighbor:ey,resizeBilinear:Qg,rotateWithOffset:vk,cropAndResize:mk,nonMaxSuppression:Ck,nonMaxSuppressionAsync:function Ek(n,t,e){return jd.apply(this,arguments)},nonMaxSuppressionWithScore:Rk,nonMaxSuppressionWithScoreAsync:function Fk(n,t,e){return Kd.apply(this,arguments)},nonMaxSuppressionPadded:Pk,nonMaxSuppressionPaddedAsync:function zk(n,t,e){return qd.apply(this,arguments)},threshold:Kk,transform:Xk},BN={bandPart:Zk,gramSchmidt:nN,qr:rN},Cu={sparseFillEmptyRows:TN,sparseReshape:_N,sparseSegmentMean:AN,sparseSegmentSum:RN},Jd={stringNGrams:ON,stringSplit:PN,stringToHashBucketFast:MN};let Qd=(()=>{class n extends nr{constructor(e,s,r=null){super(),this.learningRate=e,this.rho=s,this.epsilon=r,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==r&&(this.epsilon=A.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=A.registeredVariables[r];null==this.accumulatedGrads[o]&&(this.accumulatedGrads[o]={originalName:`${r}/accum_grad`,variable:P(()=>Ke(a).variable(!1))}),null==this.accumulatedUpdates[o]&&(this.accumulatedUpdates[o]={originalName:`${r}/accum_var`,variable:P(()=>Ke(a).variable(!1))});const l=Array.isArray(e)?e[o].tensor:e[r];if(null==l)return;const u=this.accumulatedGrads[o].variable,c=this.accumulatedUpdates[o].variable;P(()=>{const h=se(R(u,this.rho),R(ut(l),1-this.rho)),d=R(ke(fn(se(c,this.epsilon)),fn(se(u,this.epsilon))),l),p=se(R(c,this.rho),R(ut(d),1-this.rho));u.assign(h),c.assign(p);const f=se(R(d,-this.learningRate),a);a.assign(f)})}),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ze(this.accumulatedGrads.map(e=>e.variable)),ze(this.accumulatedUpdates.map(e=>e.variable)))}getWeights(){var e=this;return L(function*(){const s=[...e.accumulatedGrads,...e.accumulatedUpdates];return[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return L(function*(){const r=(e=yield s.extractIterations(e)).length/2;s.accumulatedGrads=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),s.accumulatedUpdates=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,s){return new e(s.learningRate,s.rho,s.epsilon)}}return n.className="Adadelta",n})();ee(Qd);let ep=(()=>{class n extends nr{constructor(e,s=.1){super(),this.learningRate=e,this.initialAccumulatorValue=s,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=A.registeredVariables[r];null==this.accumulatedGrads[o]&&(this.accumulatedGrads[o]={originalName:`${r}/accumulator`,variable:P(()=>Ja(a.shape,this.initialAccumulatorValue).variable(!1))});const i=Array.isArray(e)?e[o].tensor:e[r];if(null==i)return;const l=this.accumulatedGrads[o].variable;P(()=>{const u=se(l,ut(i));l.assign(u);const c=se(R(ke(i,fn(se(u,A.backend.epsilon()))),-this.learningRate),a);a.assign(c)})}),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ze(this.accumulatedGrads.map(e=>e.variable))}getWeights(){var e=this;return L(function*(){return[yield e.saveIterations()].concat(e.accumulatedGrads.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(e){var s=this;return L(function*(){e=yield s.extractIterations(e),s.accumulatedGrads=e.map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,s){return new e(s.learningRate,s.initialAccumulatorValue)}}return n.className="Adagrad",n})();ee(ep);let tp=(()=>{class n extends nr{constructor(e,s,r,o=null){super(),this.learningRate=e,this.beta1=s,this.beta2=r,this.epsilon=o,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],P(()=>{this.accBeta1=Ne(s).variable(),this.accBeta2=Ne(r).variable()}),null==o&&(this.epsilon=A.backend.epsilon())}applyGradients(e){const s=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);P(()=>{const r=be(1,this.accBeta1),o=be(1,this.accBeta2);s.forEach((a,i)=>{const l=A.registeredVariables[a];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:P(()=>Ke(l).variable(!1))}),null==this.accumulatedSecondMoment[i]&&(this.accumulatedSecondMoment[i]={originalName:`${a}/v`,variable:P(()=>Ke(l).variable(!1))});const c=Array.isArray(e)?e[i].tensor:e[a];if(null==c)return;const h=this.accumulatedFirstMoment[i].variable,d=this.accumulatedSecondMoment[i].variable,p=se(R(h,this.beta1),R(c,1-this.beta1)),f=se(R(d,this.beta2),R(ut(c),1-this.beta2)),m=ke(p,r),g=ke(f,o);h.assign(p),d.assign(f);const y=se(R(ke(m,se(fn(g),this.epsilon)),-this.learningRate),l);l.assign(y)}),this.accBeta1.assign(R(this.accBeta1,this.beta1)),this.accBeta2.assign(R(this.accBeta2,this.beta2))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ze(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedSecondMoment&&ze(this.accumulatedSecondMoment.map(e=>e.variable))}getWeights(){var e=this;return L(function*(){const s=[...e.accumulatedFirstMoment,...e.accumulatedSecondMoment];return[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return L(function*(){e=yield s.extractIterations(e),P(()=>{s.accBeta1.assign(Or(s.beta1,s.iterations_+1)),s.accBeta2.assign(Or(s.beta2,s.iterations_+1))});const r=e.length/2;s.accumulatedFirstMoment=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)})),s.accumulatedSecondMoment=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,s){return new e(s.learningRate,s.beta1,s.beta2,s.epsilon)}}return n.className="Adam",n})();ee(tp);let np=(()=>{class n extends nr{constructor(e,s,r,o=null,a=0){super(),this.learningRate=e,this.beta1=s,this.beta2=r,this.epsilon=o,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],P(()=>{this.iteration=Ne(0).variable(),this.accBeta1=Ne(s).variable()}),null==o&&(this.epsilon=A.backend.epsilon())}applyGradients(e){const s=Array.isArray(e)?e.map(r=>r.name):Object.keys(e);P(()=>{const r=be(1,this.accBeta1),o=ke(-this.learningRate,se(R(this.iteration,this.decay),1));s.forEach((a,i)=>{const l=A.registeredVariables[a];null==this.accumulatedFirstMoment[i]&&(this.accumulatedFirstMoment[i]={originalName:`${a}/m`,variable:Ke(l).variable(!1)}),null==this.accumulatedWeightedInfNorm[i]&&(this.accumulatedWeightedInfNorm[i]={originalName:`${a}/v`,variable:Ke(l).variable(!1)});const c=Array.isArray(e)?e[i].tensor:e[a];if(null==c)return;const h=this.accumulatedFirstMoment[i].variable,d=this.accumulatedWeightedInfNorm[i].variable,p=se(R(h,this.beta1),R(c,1-this.beta1)),f=R(d,this.beta2),m=Wt(c),g=Ps(f,m);h.assign(p),d.assign(g);const y=se(R(ke(o,r),ke(p,se(g,this.epsilon))),l);l.assign(y)}),this.iteration.assign(se(this.iteration,1)),this.accBeta1.assign(R(this.accBeta1,this.beta1))}),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ze(this.accumulatedFirstMoment.map(e=>e.variable)),null!=this.accumulatedWeightedInfNorm&&ze(this.accumulatedWeightedInfNorm.map(e=>e.variable))}getWeights(){return L(function*(){throw new Error("getWeights() is not implemented for Adamax yet.")})()}setWeights(e){return L(function*(){throw new Error("setWeights() is not implemented for Adamax yet.")})()}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,s){return new e(s.learningRate,s.beta1,s.beta2,s.epsilon,s.decay)}}return n.className="Adamax",n})();ee(np);let ku=(()=>{class n extends nr{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=Array.isArray(e)?e[o].tensor:e[r];if(null==a)return;const i=A.registeredVariables[r];P(()=>{const l=se(R(this.c,a),i);i.assign(l)})}),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ln(Ne(-e))}dispose(){this.c.dispose()}getWeights(){var e=this;return L(function*(){return[yield e.saveIterations()]})()}setWeights(e){var s=this;return L(function*(){if(0!==(e=yield s.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")})()}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,s){return new e(s.learningRate)}}return n.className="SGD",n})();ee(ku);let sp=(()=>{class n extends ku{constructor(e,s,r=!1){super(e),this.learningRate=e,this.momentum=s,this.useNesterov=r,this.accumulations=[],this.m=Ne(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=A.registeredVariables[r];null==this.accumulations[o]&&(this.accumulations[o]={originalName:`${r}/momentum`,variable:P(()=>Ke(a).variable(!1))});const i=this.accumulations[o].variable,l=Array.isArray(e)?e[o].tensor:e[r];null!=l&&P(()=>{let u;const c=se(R(this.m,i),l);u=se(R(this.c,this.useNesterov?se(l,R(c,this.m)):c),a),i.assign(c),a.assign(u)})}),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ze(this.accumulations.map(e=>e.variable))}setMomentum(e){this.momentum=e}getWeights(){var e=this;return L(function*(){return[yield e.saveIterations()].concat(e.accumulations.map(s=>({name:s.originalName,tensor:s.variable})))})()}setWeights(e){var s=this;return L(function*(){e=yield s.extractIterations(e),s.accumulations=e.map(o=>({originalName:o.name,variable:o.tensor.variable(!1)}))})()}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,s){return new e(s.learningRate,s.momentum,s.useNesterov)}}return n.className="Momentum",n})();ee(sp);let rp=(()=>{class n extends nr{constructor(e,s=.9,r=0,o=null,a=!1){if(super(),this.learningRate=e,this.decay=s,this.momentum=r,this.epsilon=o,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==o&&(this.epsilon=A.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map(r=>r.name):Object.keys(e)).forEach((r,o)=>{const a=A.registeredVariables[r],i=!1;null==this.accumulatedMeanSquares[o]&&(this.accumulatedMeanSquares[o]={originalName:`${r}/rms`,variable:P(()=>Ke(a).variable(i))}),null==this.accumulatedMoments[o]&&(this.accumulatedMoments[o]={originalName:`${r}/momentum`,variable:P(()=>Ke(a).variable(i))}),null==this.accumulatedMeanGrads[o]&&this.centered&&(this.accumulatedMeanGrads[o]={originalName:`${r}/mg`,variable:P(()=>Ke(a).variable(i))});const l=Array.isArray(e)?e[o].tensor:e[r];if(null==l)return;const u=this.accumulatedMeanSquares[o].variable,c=this.accumulatedMoments[o].variable;P(()=>{const h=se(R(u,this.decay),R(ut(l),1-this.decay));if(this.centered){const d=this.accumulatedMeanGrads[o].variable,p=se(R(d,this.decay),R(l,1-this.decay)),f=ke(R(l,this.learningRate),fn(be(h,se(ut(p),this.epsilon)))),m=se(R(c,this.momentum),f);u.assign(h),d.assign(p),c.assign(m);const g=be(a,m);a.assign(g)}else{const d=se(R(u,this.decay),R(ut(l),1-this.decay)),p=se(R(c,this.momentum),ke(R(l,this.learningRate),fn(se(d,this.epsilon))));u.assign(d),c.assign(p);const f=be(a,p);a.assign(f)}})}),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ze(this.accumulatedMeanSquares.map(e=>e.variable)),null!=this.accumulatedMeanGrads&&this.centered&&ze(this.accumulatedMeanGrads.map(e=>e.variable)),null!=this.accumulatedMoments&&ze(this.accumulatedMoments.map(e=>e.variable))}getWeights(){var e=this;return L(function*(){const s=[...e.accumulatedMeanSquares,...e.accumulatedMoments];return e.centered&&s.push(...e.accumulatedMeanGrads),[yield e.saveIterations()].concat(s.map(r=>({name:r.originalName,tensor:r.variable})))})()}setWeights(e){var s=this;return L(function*(){e=yield s.extractIterations(e);const r=s.centered?e.length/3:e.length/2,o=!1;s.accumulatedMeanSquares=e.slice(0,r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})),s.accumulatedMoments=e.slice(r,2*r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})),s.centered&&(s.accumulatedMeanGrads=e.slice(2*r,3*r).map(a=>({originalName:a.name,variable:a.tensor.variable(o)})))})()}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,s){return new e(s.learningRate,s.decay,s.momentum,s.epsilon,s.centered)}}return n.className="RMSProp",n})();ee(rp);class Lr{static sgd(t){return new ku(t)}static momentum(t,e,s=!1){return new sp(t,e,s)}static rmsprop(t,e=.9,s=0,r=null,o=!1){return new rp(t,e,s,r,o)}static adam(t=.001,e=.9,s=.999,r=null){return new tp(t,e,s,r)}static adadelta(t=.001,e=.95,s=null){return new Qd(t,e,s)}static adamax(t=.002,e=.9,s=.999,r=null,o=0){return new np(t,e,s,r,o)}static adagrad(t,e=.1){return new ep(t,e)}}const wo={sgd:Lr.sgd,momentum:Lr.momentum,adadelta:Lr.adadelta,adagrad:Lr.adagrad,rmsprop:Lr.rmsprop,adamax:Lr.adamax,adam:Lr.adam},VN=typeof requestAnimationFrame<"u"?requestAnimationFrame:typeof setImmediate<"u"?setImmediate:n=>n();function op(){return new Promise(n=>VN(()=>n()))}function ap(n,t){const e=n[0].length;n.forEach((r,o)=>{C(r.length===e,()=>`Error in concat${e}D: rank of tensors[${o}] must be the same as the rank of the rest (${e})`)}),C(t>=0&&t<e,()=>`Error in concat${e}D: axis must be between 0 and ${e-1}.`);const s=n[0];n.forEach((r,o)=>{for(let a=0;a<e;a++)C(a===t||r[a]===s[a],()=>`Error in concat${e}D: Shape of tensors[${o}] (${r}) does not match the shape of the rest (${s}) along the non-concatenated axis ${o}.`)})}function Ns(n,t){const e=n[0].slice();for(let s=1;s<n.length;s++)e[t]+=n[s][t];return e}const ip=30;function Nu(n){return n<=ip?n:Pc(n,Math.floor(Math.sqrt(n)))}function lp(n,t,e){return[e*("number"==typeof n?n:n[0]),t*("number"==typeof n?n:n[1])]}function ii(n,t,e,s=!0){let r=[];if(s)r=r.concat(t.slice(0)),r.push(n[0]/e),r=r.concat(n.slice(1));else{r=r.concat(n[0]);const o=t.length;for(let a=0;a<o;++a)r=r.concat([n[a+1]/t[a],t[a]]);r=r.concat(n.slice(o+1))}return r}function li(n,t,e=!0){const s=[];if(e){s.push(t);for(let r=t+1;r<n;++r)r<=2*t?(s.push(r),s.push(r-(t+1))):s.push(r)}else{const r=[],o=[];for(let a=1;a<n;++a)a>=2*t+1||a%2==1?o.push(a):r.push(a);s.push(...r),s.push(0),s.push(...o)}return s}function ui(n,t,e,s=!0){const r=[];r.push(s?n[0]/e:n[0]*e);for(let o=1;o<n.length;++o)r.push(o<=t.length?s?t[o-1]*n[o]:n[o]/t[o-1]:n[o]);return r}function up(n,t){const e=[0];for(let s=0;s<t;++s)e.push(n[s][0]);return e}function cp(n,t,e){const s=n.slice(0,1);for(let r=0;r<e;++r)s.push(n[r+1]-t[r][0]-t[r][1]);return s}function hp(n,t){const e=n.shape.length,s=t.shape.length;if(e<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${e}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>e)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${e}`);if(0===q(n.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${n.shape}.`);const r=t.shape,o=r[r.length-1];let a=1;for(let h=0;h<r.length-1;++h)a*=r[h];const i=n.shape,l=r.slice();l.pop();let u=1;for(let h=o;h<e;++h)u*=i[h],l.push(i[h]);const c=[...Se(n.shape).map(h=>h/u),1].slice(0,o);return[l,a,u,c]}function oy(n,t,e){const s=t.rank>1?t.shape[t.rank-1]:1,r=t.rank>1?t.rank-1:1,o=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${e.shape}, indices.shape: ${t.shape}, shape: ${n}, sliceDim: ${s}, and batchDim: ${r}.`;if(e.rank<r)throw new Error(o+` update.rank < ${r}. `);if(n.length<s+(e.rank-r))throw new Error(o+` Output shape length < ${s+(e.rank-r)}`);if(e.rank!==r+n.length-s)throw new Error(o+" update.rank != "+(r+n.length-s));for(let a=0;a<r;++a)if(e.shape[a]!==t.shape[a])throw new Error(o+` updates.shape[${a}] (${e.shape[a]}) != indices.shape[${a}] (${t.shape[a]}).`);for(let a=0;a<e.rank-r;++a)if(e.shape[a+r]!==n[a+s])throw new Error(o+` updates.shape[${a+r}] (${e.shape[a+r]}) != shape[${a+r}] (${n[a+r]})`)}function ay(n,t,e){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(n.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${n.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(e.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${e}`);if(0===e.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===n.size)throw new Error(`Updates specified for empty output. updates shape: ${n.shape}`)}oy(e,t,n)}function ci(n,t,e){const s=t.shape.length,r=s>1?t.shape[s-1]:1,o=e.length;let a=1;for(let h=r;h<o;++h)a*=e[h];const i=r<1?1:r;return{sliceRank:r,numUpdates:q(t.shape)/i,sliceSize:a,strides:[...Se(e.slice(0,r)),1],outputSize:q(e)}}const Su=1.7580993408473768,Tu=1.0507009873554805,dp=.3275911,pp=.254829592,fp=-.284496736,mp=1.421413741,gp=-1.453152027,yp=1.061405429;function Vs(n,t){if(n.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${n.length}, imag: ${t.length}.`);const e=new Float32Array(2*n.length);for(let s=0;s<e.length;s+=2)e[s]=n[s/2],e[s+1]=t[s/2];return e}function iy(n){const t=new Float32Array(n.length/2),e=new Float32Array(n.length/2);for(let s=0;s<n.length;s+=2)t[s/2]=n[s],e[s/2]=n[s+1];return{real:t,imag:e}}function ly(n){const t=Math.ceil(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=0;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function uy(n){const t=Math.floor(n.length/4),e=new Float32Array(t),s=new Float32Array(t);for(let r=2;r<n.length;r+=4)e[Math.floor(r/4)]=n[r],s[Math.floor(r/4)]=n[r+1];return{real:e,imag:s}}function xp(n,t){return{real:n[2*t],imag:n[2*t+1]}}function cy(n,t,e,s){n[2*s]=t,n[2*s+1]=e}function hy(n,t){const e=new Float32Array(n/2),s=new Float32Array(n/2);for(let r=0;r<Math.ceil(n/2);r++){const o=(t?2:-2)*Math.PI*(r/n);e[r]=Math.cos(o),s[r]=Math.sin(o)}return{real:e,imag:s}}function dy(n,t,e){const s=(e?2:-2)*Math.PI*(n/t);return{real:Math.cos(s),imag:Math.sin(s)}}const bp="->",WN=/->/g,py=",",fy="...";function wp(n,t){const e=((n=n.replace(/\s/g,"")).length-n.replace(WN,"").length)/bp.length;if(e<1)throw new Error("Equations without an arrow are not supported.");if(e>1)throw new Error(`Equation must contain exactly one arrow ("${bp}").`);const[s,r]=n.split(bp);C(-1===s.indexOf(fy),()=>`The ellipsis notation ("${fy}") is not supported yet.`);const o=s.split(py),a=o.length;if(t!==a)throw new Error(`Expected ${a} input tensors, received ${t}`);if(a>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<r.length;++d){const p=r[d];if(!o.some(f=>-1!==f.indexOf(p)))throw new Error(`Output subscripts contain the label ${p} not present in the input subscripts.`);-1===i.indexOf(p)&&i.push(p)}for(let d=0;d<s.length;++d){const p=s[d];-1===i.indexOf(p)&&p!==py&&i.push(p)}const l=new Array(o.length);for(let d=0;d<a;++d){if(new Set(o[d].split("")).size!==o[d].length)throw new Error(`Found duplicate axes in input component ${o[d]}. Support for duplicate axes in input is not implemented yet.`);l[d]=[];for(let p=0;p<o[d].length;++p)l[d].push(i.indexOf(o[d][p]))}const u=i.length,h=[];for(let d=r.length;d<u;++d)h.push(d);return{allDims:i,summedDims:h,idDims:l}}function vp(n,t){let e=new Array(n);e.fill(-1);for(let r=0;r<t.length;++r)e[t[r]]=r;const s=[];for(let r=0;r<n;++r)-1===e[r]&&s.push(r);return e=e.filter(r=>-1!==r),{permutationIndices:e,expandDims:s}}function Ip(n,t,e){const s=new Array(n);for(let r=0;r<e.length;++r){const o=e[r].shape;for(let a=0;a<t[r].length;++a)void 0===s[t[r][a]]?s[t[r][a]]=o[a]:C(s[t[r][a]]===o[a],()=>`Expected dimension ${s[t[r][a]]} at axis ${a} of input shaped ${JSON.stringify(o)}, but got dimension ${o[a]}`)}}function Cp(n,t){const e=n,s=[];let r=0;0===n.length&&e.push(-1),r=n.length+1;for(let a=0;a<r;++a)s.push([]);const o=[];for(let a=0;a<e.length;++a){const l=UN(t,e[a]);for(const u of l)-1===o.indexOf(u)&&(s[a].push(u),o.push(u))}return{path:e,steps:s}}function kp(n){return n.every((t,e)=>t===e)}function UN(n,t){const e=[];for(let s=0;s<n.length;++s)(0===n[s].length||-1!==n[s].indexOf(t)||-1===t)&&e.push(s);return e}function Np(n,t,e=0){let s=[];if("number"==typeof t)C(n.shape[e]%t==0,()=>"Number of splits must evenly divide the axis."),s=new Array(t).fill(n.shape[e]/t);else{C(t.reduce((a,i)=>(-1===i&&(a+=1),a),0)<=1,()=>"There should be only one negative value in split array.");const o=t.indexOf(-1);if(-1!==o){const a=t.reduce((i,l)=>l>0?i+l:i);t[o]=n.shape[e]-a}C(n.shape[e]===t.reduce((a,i)=>a+i),()=>"The sum of sizes must match the size of the axis dimension."),s=t}return s}function my(n,t){let s,e=!1;for(n<=ip?(s=n,e=!0):s=Pc(n,Math.floor(Math.sqrt(n)));!e;)s>t||s===n?e=!0:s=Pc(n,s+1);return s}function gy(n,t,e){const s=[],r=n.length;for(let o=0;o<r;o++)s.push(o!==t?n[o]:e);return s}function Sp(n,t,e,s){const r=t.shape.length,o=n.shape.length;if(0!==s&&(s<-r||s>r))throw new Error(`Expect batchDims in the range of [-${r}, ${r}], but got ${s}`);if(s<0&&(s+=r),s>o)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${o}).`);if(e<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${e}).`);for(let h=0;h<s;++h)if(n.shape[h]!==t.shape[h])throw new Error(`x.shape[${h}]: ${n.shape[h]} should be equal to indices.shape[${h}]: ${t.shape[h]}.`);const a=n.shape[e],i=[];let l=1,u=1,c=1;for(let h=0;h<s;++h)i.push(n.shape[h]),l*=n.shape[h];for(let h=s;h<e;h++)i.push(n.shape[h]),u*=n.shape[h];for(let h=s;h<r;h++)i.push(t.shape[h]);for(let h=e+1;h<o;h++)i.push(n.shape[h]),c*=n.shape[h];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:a,outputShape:i}}function Pr(n){try{return n.map(t=>so(t))}catch(t){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${t}`)}}function yy(n){return n.map(t=>Js(t))}function Tp(n,t){const e=[];for(let o=0;o<t.length;o++)t[o]&&e.push(o);const s=We(n,"int32"),r=We([e.length,n.length],"int32");for(let o=0;o<e.length;o++){const a=s.indexToLoc(e[o]);r.values.set(a,o*n.length)}return r.toTensor()}const xy={kernelName:zi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,oi(ue(e,"float32"),-1))}}},GN={kernelName:qo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=ut(ue(e,"float32")),r=fn(be(Ne(1),s));return Ct(ke(n,r))}}}},HN={kernelName:Xo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=fn(be(ut(ue(e,"float32")),1));return ke(n,s)}}}},jN={kernelName:to,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{let i=n;const l=Gt(e.shape,r);return l.length>0&&(i=we(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Gt(s.shape,r);return l.length>0&&(i=we(i,l)),F(i,s.shape)}}}},KN={kernelName:Mi,saveAllInputs:!0,gradFunc:(n,t)=>{const e={};return t.forEach((s,r)=>{e[r]=()=>n.clone()}),e}},qN={kernelName:Bi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ke(e)}}},XN={kernelName:Vi,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ke(e)}}},YN={kernelName:Yo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,fn(be(Ne(1),ut(ue(e,"float32")))))}}},ZN={kernelName:Zo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=fn(se(Ne(1),ut(ue(e,"float32"))));return ke(n,s)}}}},JN={kernelName:ea,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{const i=se(ut(e),ut(s));let l=R(n,ke(s,i));const u=Gt(e.shape,r);return u.length>0&&(l=we(l,u)),F(l,e.shape)},b:()=>{const i=se(ut(e),ut(s));let l=Ct(R(n,ke(e,i)));const u=Gt(s.shape,r);return u.length>0&&(l=we(l,u)),F(l,s.shape)}}}},QN={kernelName:Jo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,se(ut(ue(e,"float32")),1))}}},eS={kernelName:Qo,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,be(Ne(1),ut(ue(e,"float32"))))}}},nS=D({avgPool3dGrad_:function tS(n,t,e,s,r,o){const a=N(n,"dy","avgPool3dGrad"),i=N(t,"input","avgPool3dGrad");let l=a,u=i,c=!1;4===i.rank&&(c=!0,l=F(a,[1,a.shape[0],a.shape[1],a.shape[2],a.shape[3]]),u=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),C(5===l.rank,()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`),C(5===u.rank,()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`),null!=o&&C(Jt(r),()=>`Error in avgPool3dGrad: pad must be an integer when using, dimRoundingMode ${o} but got pad ${r}.`);const p=A.runKernel(Uc,{dy:l,input:u},{filterSize:e,strides:s,pad:r,dimRoundingMode:o});return c?F(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),sS={kernelName:Ui,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a,dimRoundingMode:i}=e;return{x:()=>nS(n,s,r,o,a,i)}}},oS=D({avgPoolGrad_:function rS(n,t,e,s,r){const o=N(n,"dy","avgPoolGrad"),a=N(t,"input","avgPoolGrad");C(a.rank===o.rank,()=>`Rank of input (${a.rank}) does not match rank of dy (${o.rank})`);let i=a,l=o,u=!1;3===a.rank&&(u=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),l=F(o,[1,o.shape[0],o.shape[1],o.shape[2]])),C(4===l.rank,()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`),C(4===i.rank,()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${i.rank}.`);const d=A.runKernel(Wc,{dy:l,input:i},{filterSize:e,strides:s,pad:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),aS={kernelName:Wi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{filterSize:r,strides:o,pad:a}=e;return{x:()=>oS(n,s,r,o,a)}}},iS={kernelName:Gi,inputsToSave:["a","b"],gradFunc:(n,t,e)=>{const[s,r]=t,{transposeA:o,transposeB:a}=e;return o||a?!o&&a?{a:()=>tt(n,r,!1,!1),b:()=>tt(n,s,!0,!1)}:o&&!a?{a:()=>tt(r,n,!1,!0),b:()=>tt(s,n,!1,!1)}:{a:()=>tt(r,n,!0,!0),b:()=>tt(n,s,!0,!0)}:{a:()=>tt(n,r,!1,!0),b:()=>tt(s,n,!0,!1)}}},$u=D({spaceToBatchND_:function lS(n,t,e){const s=N(n,"x","spaceToBatchND");return C(s.rank>=1+t.length,()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`),C(e.length===t.length,()=>`paddings.shape[0] ${e.length} must be equal to [blockShape] ${t.length}`),C(s.shape.reduce((a,i,l)=>l>0&&l<=t.length?a&&(i+e[l-1][0]+e[l-1][1])%t[l-1]==0:a,!0),()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${e.toString()} must be divisible by blockShapes ${t.toString()}`),A.runKernel(Dl,{x:s},{blockShape:t,paddings:e})}}),uS={kernelName:Hi,gradFunc:(n,t,e)=>{const{blockShape:s,crops:r}=e;return{x:()=>$u(n,s,r)}}},cS={kernelName:"BroadcastTo",gradFunc:(n,t,e)=>{const r=e.inputShape,o=e.shape,a=Array.from(o);for(let l=r.length-1;l>=0;l--)if(r[l]===o[l])a[l]=1;else if(1!==r[l])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${o}].`);const i=[];for(let l=0;l<a.length;l++)a[l]>1&&i.push(l);return{x:()=>we(n,i,!0)}}},hS={kernelName:ta,gradFunc:n=>({x:()=>n.clone()})},dS={kernelName:na,gradFunc:n=>({x:()=>Ke(n)})},pS={kernelName:sa,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{clipValueMin:r,clipValueMax:o}=e;return{x:()=>Nn(Cs(Dr(s,r),Fr(s,o)),n,Ke(n))}}},fS={kernelName:ji,inputsToSave:["x"],gradFunc:xy.gradFunc},mS={kernelName:Ki,saveAllInputs:!0,gradFunc:(n,t,e)=>{const s=t.map(l=>l.shape),{axis:r}=e,o=Me(r,t[0].shape)[0],a=s.map(l=>l[o]);return En(n,a,o).map(l=>()=>l)}},gS={kernelName:qi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{dilations:o,strides:a,pad:i,dataFormat:l}=e;return C(rr(o),()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${o}'`),{x:()=>Cd(s.shape,n,r,a,i,l),filter:()=>Md(s,n,r.shape,a,i,l)}}},yS={kernelName:Xi,inputsToSave:["dy","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,{strides:o,pad:a,dataFormat:i,dimRoundingMode:l}=e;return{dy:()=>or(n,r,o,a,i,1,l),filter:()=>Md(n,s,r.shape,o,a,i,l)}}},bS=D({conv3DBackpropFilter_:function xS(n,t,e,s,r){let o=n;4===n.rank&&(o=F(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]));let a=t;return 4===a.rank&&(a=F(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),C(5===o.rank,()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${o.shape}.`),C(5===a.rank,()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${a.shape}.`),C(5===e.length,()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${e}.`),C(o.shape[4]===e[3],()=>`Error in conv3dDerFilter: depth of input ${o.shape[4]}) must match input depth in filter (${e[3]}.`),C(a.shape[4]===e[4],()=>`Error in conv3dDerFilter: depth of dy (${a.shape[4]}) must match output depth for filter (${e[4]}).`),A.runKernel(Kc,{x:o,dy:a},{strides:s,pad:r,filterShape:e})}}),wS={kernelName:Yi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o}=e;C(rr(s),()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const[a,i]=t;return{x:()=>Bg(a.shape,n,i,r,o),filter:()=>bS(a,n,i.shape,r,o)}}},$p=D({sin_:function vS(n){const e={x:N(n,"x","sin")};return A.runKernel(Aa,e)}}),IS={kernelName:ra,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(Ct($p(ue(e,"float32"))),n)}}},_p=D({sinh_:function CS(n){const e={x:N(n,"x","sinh")};return A.runKernel(Da,e)}}),kS={kernelName:oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(_p(ue(e,"float32")),n)}}},Ep=D({cumsum_:function NS(n,t=0,e=!1,s=!1){const o={x:N(n,"x","cumsum")};return A.runKernel(Zi,o,{axis:t,exclusive:e,reverse:s})}}),SS={kernelName:Zi,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r,exclusive:o,reverse:a}=e;return{x:()=>{const i=Dt([r],s.rank);let l=Ep(n,r,o,!a);return null!=i&&(l=qe(l,i)),l}}}},TS={kernelName:Ji,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const{dilations:s,strides:r,pad:o,dimRoundingMode:a}=e,i=s??[1,1];C(rr(i),()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${i}'`);const[l,u]=t;return C(4===l.rank,()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`),C(4===u.rank,()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`),C(l.shape[3]===u.shape[2],()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`),C(un(r,i),()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${r} and dilations '${i}'.`),null!=a&&C(Jt(o),()=>`Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`),{x:()=>qg(l.shape,n,u,r,o,i,a),filter:()=>Kg(l,n,u.shape,r,o,i,a)}}},$S={kernelName:Qi,inputsToSave:["x","filter"],gradFunc:(n,t,e)=>{const[s,r]=t,o={x:s,filter:r,dy:n},a={x:s,filter:r,dy:n};return{x:()=>A.runKernel(eh,o,e),filter:()=>A.runKernel(th,a,e)}}},_S={kernelName:ia,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t,s={dy:n,y:e};return{x:()=>A.runKernel(sh,s)}}},ES={kernelName:la,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=R(Pn(Ct(ut(e))),2/Math.sqrt(Math.PI));return{x:()=>R(n,s)}}},AS={kernelName:ua,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,e)}}},DS={kernelName:tl,inputsToSave:["input"],gradFunc:(n,t)=>{const[e]=t;return{input:()=>F(n,e.shape)}}},RS={kernelName:ca,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,Pn(e))}}},FS={kernelName:ha,gradFunc:n=>({x:()=>Ke(n)})},OS={kernelName:da,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{const i=ke(n,ue(s,"float32")),l=Gt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{let i=R(n,ue(e,"float32"));const l=Gt(s.shape,r);l.length>0&&(i=F(we(i,l),s.shape));const u=ut(s);return Ct(ke(i,ue(u,"float32")))}}}},Ap=D({rsqrt_:function LS(n){const e={x:N(n,"x","rsqrt")};return A.runKernel(_a,e)}}),PS={kernelName:nl,inputsToSave:["x","mean","variance","scale"],gradFunc:(n,t,e)=>{const{varianceEpsilon:s}=e,[r,o,a,i]=t,l=i??Ne(1),u=Gt(o.shape,r.shape),c=[];if(1===o.rank){for(let w=0;w<r.shape.length-1;++w)c.push(r.shape[w]);c.push(1)}const h=be(r,o),d=R(n,l),p=Ap(se(a,Ne(s))),f=R(R(R(p,p),p),Ne(-.5));return{x:()=>F(R(R(n,1===o.rank?Qn(F(p,[1,1,1,o.shape[0]]),c):p),l),r.shape),mean:()=>{let w=R(R(p,Ne(-1)),d);return 1===o.rank&&(w=we(w,u)),F(w,o.shape)},variance:()=>{let w=R(R(f,h),d);return 1===o.rank&&(w=we(w,u)),F(w,o.shape)},scale:()=>{const w=R(h,p);let I=R(n,w);return 1===o.rank&&(I=we(I,u)),F(I,o.shape)},offset:()=>{let w=n;return 1===o.rank&&(w=we(w,u)),F(w,o.shape)}}}},by=D({unsortedSegmentSum_:function zS(n,t,e){const s=N(n,"x","unsortedSegmentSum"),r=N(t,"segmentIds","unsortedSegmentSum","int32");return C(Jt(e),()=>"numSegments must be of dtype int"),A.runKernel(Pl,{x:s,segmentIds:r},{numSegments:e})}}),MS={kernelName:sl,inputsToSave:["x","indices"],gradFunc:(n,t,e)=>{const[s,r]=t,{axis:o}=e,a=Me(o,s.shape)[0];return{x:()=>{const l=s.shape,u=r.size,c=l.slice(0,a),h=c.length,d=l.slice(o,l.length).slice(1),p=d.length,f=wy(0,h),m=wy(h+1,h+1+p),g=vy([c,[u],d]),y=F(n,g),x=F(r,[u]),b=vy([[h],f,m]),w=qe(y,b);let I=by(w,x,s.shape[a]);const k=go(b);return I=qe(I,k),I},indices:()=>r}}};function wy(n,t){const e=[];for(let s=n;s<t;++s)e.push(s);return e}function vy(n){const t=[];for(let e=0;e<n.length;++e)for(let s=0;s<n[e].length;++s)t.push(n[e][s]);return t}const BS={kernelName:pa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>Ke(e),b:()=>Ke(s)}}},VS={kernelName:fa,gradFunc:n=>({x:()=>ue(n,"float32")})},WS={kernelName:ma,gradFunc:n=>({x:()=>Ke(n)})},US={kernelName:ga,gradFunc:n=>({x:()=>Ke(n)})},GS={kernelName:ya,gradFunc:n=>({x:()=>Ke(n)})},HS={kernelName:ol,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{alpha:r}=e,o=Mn(s,0);return{x:()=>Nn(o,n,R(n,r))}}},jS={kernelName:ba,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,se(e,1))}}},KS={kernelName:xa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ue(e,"float32"))}}},qS={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e;return{logits:()=>{const a=Pn(s);return be(n,R(we(n,r,!0),a))}}}},YS=D({localResponseNormalizationBackprop_:function XS(n,t,e,s=5,r=1,o=1,a=.5){return A.runKernel(hh,{x:n,y:t,dy:e},{depthRadius:s,bias:r,alpha:o,beta:a})}}),ZS={kernelName:hl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{depthRadius:o,bias:a,alpha:i,beta:l}=e;return{x:()=>YS(s,r,n,o,a,i,l)}}};function Iy(n,t,e,s){return t.rank<e.rank&&(t=F(t,At(t.shape,s))),n.rank<e.rank&&(n=F(n,At(n.shape,s))),{x:()=>R(n,ue(cs(e,t),n.dtype))}}const Cy={kernelName:dl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{reductionIndices:r}=s,o=t[0],l=Iy(n,t[1],o,Me(r,o.shape));return{x:()=>l.x()}}},Dp=D({less_:function JS(n,t){let e=N(n,"a","less","string_or_numeric"),s=N(t,"b","less","string_or_numeric");return[e,s]=$t(e,s),Be(e.shape,s.shape),A.runKernel(al,{a:e,b:s})}}),QS={kernelName:wa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>R(n,ue(Dr(e,s),"float32")),b:()=>R(n,ue(Dp(e,s),"float32"))}}},tT=D({maxPool3dGrad_:function eT(n,t,e,s,r,o,a){const i=N(n,"dy","maxPool3dGrad"),l=N(t,"input","maxPool3dGrad"),u=N(e,"output","maxPool3dGrad");let c=i,h=l,d=u,p=!1;4===l.rank&&(p=!0,c=F(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),h=F(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),d=F(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),C(5===c.rank,()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`),C(5===h.rank,()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`),C(5===d.rank,()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${d.rank}.`),null!=a&&C(Jt(o),()=>`Error in maxPool3dGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`);const g=A.runKernel(ph,{dy:c,input:h,output:d},{filterSize:s,strides:r,pad:o,dimRoundingMode:a});return p?F(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),nT={kernelName:fl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=e;return{x:()=>tT(n,s,r,o,a,i,l)}}},rT=D({maxPoolGrad_:function sT(n,t,e,s,r,o,a){const i=N(n,"dy","maxPoolGrad"),l=N(t,"input","maxPoolGrad"),u=N(e,"output","maxPoolGrad");return C(l.rank===i.rank,()=>`Rank of input (${l.rank}) does not match rank of dy (${i.rank})`),C(4===i.rank,()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${i.rank}.`),C(4===l.rank,()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`),null!=a&&C(Jt(o),()=>`Error in maxPoolGrad: pad must be an integer when using, dimRoundingMode ${a} but got pad ${o}.`),A.runKernel(dh,{dy:i,input:l,output:u},{filterSize:s,strides:r,pad:o,dimRoundingMode:a})}}),oT={kernelName:pl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s,r]=t,{filterSize:o,strides:a,pad:i}=e;return{x:()=>rT(n,s,r,o,a,i)}}},aT={kernelName:ml,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{axis:r}=e,o=Me(r,s.shape),l=q(nn(s.shape,o)[1]);return{x:()=>{const c=s.shape.slice();o.forEach(p=>{c[p]=1});const h=F(n,c);return ke(R(h,zs(s.shape,"float32")),l)}}}},iT={kernelName:gl,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(n,t,e)=>{const s=e,{axis:r}=s,[o,a]=t,l=Iy(n,a,o,Me(r,o.shape));return{x:()=>l.x()}}},lT={kernelName:va,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t;return{a:()=>R(n,ue(Fr(e,s),"float32")),b:()=>R(n,ue(Mn(e,s),"float32"))}}},uT={kernelName:yl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>nt(n,o,s.shape)}}},cT={kernelName:Ia,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{const i=Gt(e.shape,r);return i.length>0?F(we(n,i),e.shape):n},b:()=>{const i=R(n,Ct(Qa(ke(e,s)))),l=Gt(s.shape,r);return l.length>0?F(we(i,l),s.shape):i}}}},hT={kernelName:Ca,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{const i=R(n,ue(s,"float32")),l=Gt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{const i=R(n,ue(e,"float32")),l=Gt(s.shape,r);return l.length>0?F(we(i,l),s.shape):i}}}},dT={kernelName:xl,gradFunc:n=>({x:()=>Ct(n)})},pT={kernelName:vl,inputsToSave:["indices"],gradFunc:(n,t)=>{const e=t[0];return{indices:()=>Ht(e.shape,"float32")}}},fT={kernelName:wl,gradFunc:n=>({x:()=>Ke(n)})},mT={kernelName:Il,saveAllInputs:!0,gradFunc:(n,t,e)=>{const{axis:s}=e;return ds(n,s).map(o=>()=>o)}},ky={kernelName:Cl,inputsToSave:["x"],gradFunc:(n,t,e)=>{const s=t[0],{paddings:r}=e,o=r.map(a=>a[0]);return{x:()=>nt(n,o,s.shape)}}},gT={kernelName:ka,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(n,t)=>{const[e,s,r]=t,o=e,a=s,i=Be(o.shape,a.shape);return{a:()=>{const c=ue(a,"float32");let h=R(n,R(c,Or(o,be(c,Ne(1)))));const d=Gt(o.shape,i);return d.length>0&&(h=we(h,d)),F(h,o.shape)},b:()=>{const c=Mn(o,0),h=Nn(c,Bn(o),Ke(o));let d=R(n,R(r,h));const p=Gt(a.shape,i);return p.length>0&&(d=we(d,p)),F(d,a.shape)}}}},yT={kernelName:kl,inputsToSave:["x","alpha"],gradFunc:(n,t)=>{const[e,s]=t,r=Mn(e,0);return{x:()=>Nn(r,n,R(n,s)),alpha:()=>{let o=Nn(r,Ke(n),R(n,e));const a=Gt(s.shape,n.shape);return a.length>0&&(o=we(o,a)),F(o,s.shape)}}}},xT={kernelName:aa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{const i=ke(n,ue(s,"float32")),l=Gt(e.shape,r);return l.length>0?F(we(i,l),e.shape):i},b:()=>{let i=R(n,ue(e,"float32"));const l=Gt(s.shape,r);l.length>0&&(i=F(we(i,l),s.shape));const u=ut(s);return Ct(ke(i,ue(u,"float32")))}}}},bT={kernelName:Na,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,Ct(ut(e)))}}},wT={kernelName:Ta,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t,s=R(Fr(e,6),oi(e));return{x:()=>R(n,ue(s,"float32"))}}},vT={kernelName:Sa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,ue(oi(e),"float32"))}}},IT={kernelName:Nl,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>F(n,e.shape)}}},CT={kernelName:Tl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(Ch,r,e)}}},kT={kernelName:Sl,inputsToSave:["images"],gradFunc:(n,t,e)=>{const[s]=t,r={dy:n,images:s};return{images:()=>A.runKernel(Ih,r,e)}}},NT={kernelName:$l,gradFunc:(n,t,e)=>{const{dims:s}=e,r=Me(s,n.shape);return{x:()=>Ms(n,r)}}},ST={kernelName:$a,gradFunc:n=>({x:()=>Ke(n)})},TT={kernelName:_a,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>Ct(ke(n,R(Or(e,1.5),2)))}}},_u=D({logicalNot_:function $T(n){const e={x:N(n,"x","logicalNot","bool")};return A.runKernel(ul,e)}}),_T={kernelName:_l,inputsToSave:["condition"],gradFunc:(n,t)=>{const[e]=t;return{condition:()=>ue(Ke(e),"float32"),t:()=>R(n,ue(e,n.dtype)),e:()=>R(n,ue(_u(e),n.dtype))}}},ET={kernelName:Ea,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>{const s=Mn(e,Ne(0)),r=Ne(Su),o=Ne(Tu),a=R(n,o),i=R(R(n,r),Pn(ue(e,"float32")));return Nn(s,a,i)}}}},AT={kernelName:Fa,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,R(e,be(Ne(1),e)))}}},DT={kernelName:Ra,gradFunc:n=>({x:()=>Ke(n)})},Eu=D({cos_:function RT(n){const e={x:N(n,"x","cos")};return A.runKernel(ra,e)}}),FT={kernelName:Aa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(Eu(ue(e,"float32")),n)}}},Rp=D({cosh_:function OT(n){const e={x:N(n,"x","cosh")};return A.runKernel(oa,e)}}),LT={kernelName:Da,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(Rp(ue(e,"float32")),n)}}},PT={kernelName:El,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{begin:r,size:o}=e,a=s.shape,[i,l]=tu(s,r,o),u=[];for(let c=0;c<n.rank;c++)u.push([i[c],a[c]-i[c]-l[c]]);return{x:()=>uu(n,u)}}},zT={kernelName:Fl,outputsToSave:[!0],gradFunc:(n,t,e)=>{const[s]=t,{dim:r}=e,a=R(n,s);return{logits:()=>be(a,R(we(a,[r],!0),s))}}},MT={kernelName:Oa,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,Rr(e))}}},Au=D({batchToSpaceND_:function BT(n,t,e){const s=N(n,"x","batchToSpaceND"),r=t.reduce((i,l)=>i*l);return C(s.rank>=1+t.length,()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`),C(e.length===t.length,()=>`crops.length is ${e.length} but should be equal to blockShape.length  ${t.length}`),C(s.shape[0]%r==0,()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${r}`),A.runKernel(Hi,{x:s},{blockShape:t,crops:e})}}),Ny={kernelName:Dl,gradFunc:(n,t,e)=>{const{blockShape:s,paddings:r}=e;return{x:()=>Au(n,s,r)}}},Sy={kernelName:Rl,gradFunc:(n,t,e)=>{const{axis:s}=e;return{x:()=>Ut(n,s)}}},t$=[xy,GN,HN,jN,KN,qN,XN,YN,ZN,JN,QN,eS,sS,aS,iS,uS,cS,hS,dS,pS,fS,mS,yS,gS,wS,IS,kS,SS,TS,$S,xT,_S,ES,AS,DS,RS,OS,FS,PS,MS,BS,VS,WS,US,GS,HS,jS,KS,qS,ZS,Cy,Cy,QS,nT,oT,aT,iT,lT,uT,cT,hT,dT,pT,fT,mT,ky,ky,gT,yT,bT,wT,vT,IT,CT,kT,NT,ST,TT,_T,ET,AT,DT,FT,LT,PT,zT,MT,Ny,Ny,Sy,Sy,{kernelName:La,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,R(fn(ue(e,"float32")),2))}}},{kernelName:Pa,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Ne(2);return{a:()=>R(n,R(r,be(e,s))),b:()=>R(n,R(r,be(s,e)))}}},{kernelName:Eh,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(n,R(ue(e,"float32"),2))}}},{kernelName:Wa,gradFunc:n=>({x:()=>Ke(n)})},{kernelName:za,inputsToSave:["a","b"],gradFunc:(n,t)=>{const[e,s]=t,r=Be(e.shape,s.shape);return{a:()=>{let i=n;const l=Gt(e.shape,r);return l.length>0&&(i=we(i,l)),F(i,e.shape)},b:()=>{let i=n;const l=Gt(s.shape,r);return l.length>0&&(i=we(i,l)),F(Ct(i),s.shape)}}}},{kernelName:Al,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,r=s.shape.slice(),{axis:o}=e;Me(o,s.shape).forEach(u=>{r[u]=1});const i=F(n,r),l=R(i,zs(s.shape,"float32"));return{x:()=>l}}},{kernelName:Ma,inputsToSave:["x"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>ke(n,ut(Eu(e)))}}},{kernelName:Ba,outputsToSave:[!0],gradFunc:(n,t)=>{const[e]=t;return{x:()=>R(be(Ne(1),ut(e)),n)}}},{kernelName:Va,inputsToSave:["x"],gradFunc:(n,t,e)=>{const[s]=t,{reps:r}=e;return{x:()=>{let a=Ke(s);if(1===s.rank)for(let i=0;i<r[0];++i)a=se(a,nt(n,[i*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)a=se(a,nt(n,[i*s.shape[0],l*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)a=se(a,nt(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let i=0;i<r[0];++i)for(let l=0;l<r[1];++l)for(let u=0;u<r[2];++u)for(let c=0;c<r[3];++c)a=se(a,nt(n,[i*s.shape[0],l*s.shape[1],u*s.shape[2],c*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return a}}}},{kernelName:Ol,gradFunc:(n,t,e)=>{const s=e,{perm:r}=s,o=go(r);return{x:()=>qe(n,o)}}},{kernelName:Ll,gradFunc:(n,t,e)=>{const s=e,{axis:r}=s;return{value:()=>es(n,r)}}},{kernelName:Pl,inputsToSave:["segmentIds"],gradFunc:(n,t)=>{const[e]=t;return{x:()=>function QT(n,t){const e=Ps(t,Ke(t)),s=ei(n,e);let r=Dr(t,Ne(0,"int32"));const o=s.rank-r.rank;for(let i=0;i<o;++i)r=zn(r,i+1);r=Cs(r,zs(s.shape,"bool"));const a=Ke(s);return Nn(r,s,a)}(n,e)}}},{kernelName:zl,gradFunc:n=>({x:()=>Ke(n)})}];for(const n of t$)Ev(n);U().prototype.abs=function(){return this.throwIfDisposed(),Wt(this)};const Ty=D({acos_:function n$(n){const e={x:N(n,"x","acos")};return A.runKernel(qo,e)}});U().prototype.acos=function(){return this.throwIfDisposed(),Ty(this)};const $y=D({acosh_:function s$(n){const e={x:N(n,"x","acosh")};return A.runKernel(Xo,e)}});U().prototype.acosh=function(){return this.throwIfDisposed(),$y(this)},U().prototype.add=function(n){return this.throwIfDisposed(),se(this,n)},U().prototype.all=function(n,t){return this.throwIfDisposed(),bd(this,n,t)},U().prototype.any=function(n,t){return this.throwIfDisposed(),su(this,n,t)},U().prototype.argMax=function(n){return this.throwIfDisposed(),Er(this,n)};const _y=D({argMin_:function r$(n,t=0){const s={x:N(n,"x","argMin")};return A.runKernel(Vi,s,{axis:t})}});U().prototype.argMin=function(n){return this.throwIfDisposed(),_y(this,n)},U().prototype.asScalar=function(){return this.throwIfDisposed(),C(1===this.size,()=>"The array must have only 1 element."),F(this,[])},U().prototype.asType=function(n){return this.throwIfDisposed(),ue(this,n)},U().prototype.as1D=function(){return this.throwIfDisposed(),F(this,[this.size])},U().prototype.as2D=function(n,t){return this.throwIfDisposed(),F(this,[n,t])},U().prototype.as3D=function(n,t,e){return this.throwIfDisposed(),F(this,[n,t,e])},U().prototype.as4D=function(n,t,e,s){return this.throwIfDisposed(),F(this,[n,t,e,s])},U().prototype.as5D=function(n,t,e,s,r){return this.throwIfDisposed(),F(this,[n,t,e,s,r])};const Ey=D({asin_:function o$(n){const e={x:N(n,"x","asin")};return A.runKernel(Yo,e)}});U().prototype.asin=function(){return this.throwIfDisposed(),Ey(this)};const Ay=D({asinh_:function a$(n){const e={x:N(n,"x","asinh")};return A.runKernel(Zo,e)}});U().prototype.asinh=function(){return this.throwIfDisposed(),Ay(this)};const Dy=D({atan_:function i$(n){const e={x:N(n,"x","atan")};return A.runKernel(Jo,e)}});U().prototype.atan=function(){return this.throwIfDisposed(),Dy(this)};const Ry=D({atan2_:function l$(n,t){let e=N(n,"a","atan2"),s=N(t,"b","atan2");return[e,s]=$t(e,s),A.runKernel(ea,{a:e,b:s})}});U().prototype.atan2=function(n){return this.throwIfDisposed(),Ry(this,n)};const Fy=D({atanh_:function u$(n){const e={x:N(n,"x","atanh")};return A.runKernel(Qo,e)}});U().prototype.atanh=function(){return this.throwIfDisposed(),Fy(this)},U().prototype.avgPool=function(n,t,e,s){return this.throwIfDisposed(),ou(this,n,t,e,s)},U().prototype.batchToSpaceND=function(n,t){return this.throwIfDisposed(),Au(this,n,t)},U().prototype.batchNorm=function(n,t,e,s,r){return this.throwIfDisposed(),fo(this,n,t,e,s,r)},U().prototype.broadcastTo=function(n){return this.throwIfDisposed(),si(this,n)},U().prototype.cast=function(n){return this.throwIfDisposed(),ue(this,n)};const Oy=D({ceil_:function c$(n){const e={x:N(n,"x","ceil")};return A.runKernel(na,e)}});U().prototype.ceil=function(){return this.throwIfDisposed(),Oy(this)},U().prototype.clipByValue=function(n,t){return this.throwIfDisposed(),_n(this,n,t)},U().prototype.concat=function(n,t){return this.throwIfDisposed(),n instanceof Tt&&(n=[n]),Ut([this,...n],t)},U().prototype.conv1d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Id(this,n,t,e,s,r,o)},U().prototype.conv2dTranspose=function(n,t,e,s,r){return this.throwIfDisposed(),kd(this,n,t,e,s,r)},U().prototype.conv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),or(this,n,t,e,s,r,o)},U().prototype.cos=function(){return this.throwIfDisposed(),Eu(this)},U().prototype.cosh=function(){return this.throwIfDisposed(),Rp(this)},U().prototype.cumsum=function(n,t,e){return this.throwIfDisposed(),Ep(this,n,t,e)};const Ly=D({depthToSpace_:function h$(n,t,e="NHWC"){const s=N(n,"x","depthToSpace"),r="NHWC"===e?s.shape[1]:s.shape[2],o="NHWC"===e?s.shape[2]:s.shape[3],a="NHWC"===e?s.shape[3]:s.shape[1];return C(r*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t}  for depthToSpace with input shape\n    ${s.shape}`),C(o*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${o} and ${t} for depthToSpace with input shape\n        ${s.shape}`),C(a%(t*t)==0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${a} for depthToSpace with input shape ${s.shape}`),A.runKernel(Zc,{x:s},{blockSize:t,dataFormat:e})}});U().prototype.depthToSpace=function(n,t){return this.throwIfDisposed(),Ly(this,n,t)},U().prototype.depthwiseConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Ya(this,n,t,e,s,r,o)};const Py=D({dilation2d_:function d$(n,t,e,s,r=[1,1],o="NHWC"){const a=N(n,"x","dilation2d"),i=N(t,"filter","dilation2d");C(3===a.rank||4===a.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`),C(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),C("NHWC"===o,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${o}`);let l=a,u=!1;3===a.rank&&(l=F(a,[1,a.shape[0],a.shape[1],a.shape[2]]),u=!0);const d=A.runKernel(Qi,{x:l,filter:i},{strides:e,pad:s,dilations:r});return u?F(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});U().prototype.dilation2d=function(n,t,e,s,r){return this.throwIfDisposed(),Py(this,n,t,e,s,r)};const zy=D({divNoNan_:function p$(n,t){let e=N(n,"a","div"),s=N(t,"b","div");[e,s]=$t(e,s);const r=ke(e,s),o=Ke(r),a=cs(s,o);return Nn(a,o,r)}});U().prototype.divNoNan=function(n){return this.throwIfDisposed(),zy(this,n)},U().prototype.div=function(n){return this.throwIfDisposed(),ke(this,n)};const m$=D({dot_:function f$(n,t){const e=N(n,"t1","dot"),s=N(t,"t2","dot");C(!(1!==e.rank&&2!==e.rank||1!==s.rank&&2!==s.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${e.rank} and ${s.rank}.`);const r=1===e.rank?e.size:e.shape[1],o=1===s.rank?s.size:s.shape[0];if(C(r===o,()=>`Error in dot: inner dimensions of inputs must match, but got ${r} and ${o}.`),1===e.rank&&1===s.rank){const a=F(e,[1,-1]),i=F(s,[-1,1]),l=tt(a,i);return F(l,[])}if(1===e.rank&&2===s.rank){const a=F(e,[1,-1]),i=F(s,[s.shape[0],s.shape[1]]),l=tt(a,i);return F(l,[l.size])}if(2===e.rank&&1===s.rank){const a=F(s,[-1,1]),i=tt(e,a);return F(i,[i.size])}{const a=F(s,[s.shape[0],s.shape[1]]);return tt(e,a)}}});U().prototype.dot=function(n){return this.throwIfDisposed(),m$(this,n)},U().prototype.elu=function(){return this.throwIfDisposed(),Za(this)},U().prototype.equal=function(n){return this.throwIfDisposed(),cs(this,n)};const My=D({erf_:function g$(n){let t=N(n,"x","erf");return C("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=ue(t,"float32")),A.runKernel(la,{x:t})}});U().prototype.erf=function(){return this.throwIfDisposed(),My(this)},U().prototype.exp=function(){return this.throwIfDisposed(),Pn(this)},U().prototype.expandDims=function(n){return this.throwIfDisposed(),zn(this,n)};const By=D({expm1_:function y$(n){const e={x:N(n,"x","expm1")};return A.runKernel(ca,e)}});U().prototype.expm1=function(){return this.throwIfDisposed(),By(this)},U().prototype.fft=function(){return this.throwIfDisposed(),mu(this)},U().prototype.flatten=function(){return this.throwIfDisposed(),F(this,[this.size])},U().prototype.floor=function(){return this.throwIfDisposed(),Qa(this)},U().prototype.floorDiv=function(n){return this.throwIfDisposed(),Nd(this,n)},U().prototype.gather=function(n,t){return this.throwIfDisposed(),ei(this,n,t)},U().prototype.greaterEqual=function(n){return this.throwIfDisposed(),Dr(this,n)},U().prototype.greater=function(n){return this.throwIfDisposed(),Mn(this,n)},U().prototype.ifft=function(){return this.throwIfDisposed(),ri(this)},U().prototype.irfft=function(){return this.throwIfDisposed(),zd(this)};const b$=D({isFinite_:function x$(n){const e={x:N(n,"x","isFinite")};return A.runKernel(ma,e)}});U().prototype.isFinite=function(){return this.throwIfDisposed(),b$(this)};const v$=D({isInf_:function w$(n){const e={x:N(n,"x","isInf")};return A.runKernel(ga,e)}});U().prototype.isInf=function(){return this.throwIfDisposed(),v$(this)};const Vy=D({isNaN_:function I$(n){const e={x:N(n,"x","isNaN")};return A.runKernel(ya,e)}});U().prototype.isNaN=function(){return this.throwIfDisposed(),Vy(this)},U().prototype.leakyRelu=function(n){return this.throwIfDisposed(),au(this,n)},U().prototype.lessEqual=function(n){return this.throwIfDisposed(),Fr(this,n)},U().prototype.less=function(n){return this.throwIfDisposed(),Dp(this,n)};const Wy=D({localResponseNormalization_:function C$(n,t=5,e=1,s=1,r=.5){const o=N(n,"x","localResponseNormalization");C(4===o.rank||3===o.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${o.rank}.`),C(Jt(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let a=o,i=!1;3===o.rank&&(i=!0,a=F(o,[1,o.shape[0],o.shape[1],o.shape[2]]));const c=A.runKernel(hl,{x:a},{depthRadius:t,bias:e,alpha:s,beta:r});return i?F(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});U().prototype.localResponseNormalization=function(n,t,e,s){return this.throwIfDisposed(),Wy(this,n,t,e,s)};const N$=D({logSigmoid_:function k$(n){const t=N(n,"x","logSigmoid");return Fs(s=>({value:Ct(xo(Ct(s))),gradFunc:a=>R(a,Rr(Ct(s)))}))(t)}});U().prototype.logSigmoid=function(){return this.throwIfDisposed(),N$(this)},U().prototype.logSoftmax=function(n){return this.throwIfDisposed(),Sd(this,n)},U().prototype.logSumExp=function(n,t){return this.throwIfDisposed(),ry(this,n,t)},U().prototype.log=function(){return this.throwIfDisposed(),Bn(this)},U().prototype.log1p=function(){return this.throwIfDisposed(),iu(this)},U().prototype.logicalAnd=function(n){return this.throwIfDisposed(),Cs(this,n)},U().prototype.logicalNot=function(){return this.throwIfDisposed(),_u(this)};const Fp=D({logicalOr_:function S$(n,t){const e=N(n,"a","logicalOr","bool"),s=N(t,"b","logicalOr","bool");return Be(e.shape,s.shape),A.runKernel(cl,{a:e,b:s})}});U().prototype.logicalOr=function(n){return this.throwIfDisposed(),Fp(this,n)};const $$=D({logicalXor_:function T$(n,t){const e=N(n,"a","logicalXor","bool"),s=N(t,"b","logicalXor","bool");return Be(e.shape,s.shape),Cs(Fp(n,t),_u(Cs(n,t)))}});U().prototype.logicalXor=function(n){return this.throwIfDisposed(),$$(this,n)},U().prototype.matMul=function(n,t,e){return this.throwIfDisposed(),tt(this,n,t,e)},U().prototype.maxPool=function(n,t,e,s){return this.throwIfDisposed(),lu(this,n,t,e,s)},U().prototype.max=function(n,t){return this.throwIfDisposed(),hs(this,n,t)},U().prototype.maximum=function(n){return this.throwIfDisposed(),Ps(this,n)},U().prototype.mean=function(n,t){return this.throwIfDisposed(),_t(this,n,t)},U().prototype.min=function(n,t){return this.throwIfDisposed(),Iu(this,n,t)},U().prototype.minimum=function(n){return this.throwIfDisposed(),ti(this,n)};const Uy=D({mirrorPad_:function _$(n,t,e){C("reflect"===e||"symmetric"===e,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${e}.`);const s=N(n,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");C(t.length===s.rank,()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`);const r="reflect"===e?1:0;for(let i=0;i<s.rank;i++)C(2===t[i].length,()=>"Invalid number of paddings. Must be length of 2 each."),C(t[i][0]>=0&&t[i][0]<=s.shape[i]-r&&t[i][1]>=0&&t[i][1]<=s.shape[i]-r,()=>`Padding in dimension ${i} cannot be greater than or equal to ${s.shape[i]-r} or less than 0 for input of shape ${s.shape}`);return A.runKernel(yl,{x:s},{paddings:t,mode:e})}});U().prototype.mirrorPad=function(n,t){return this.throwIfDisposed(),Uy(this,n,t)};const Gy=D({mod_:function E$(n,t){let e=N(n,"a","mod"),s=N(t,"b","mod");return[e,s]=$t(e,s),A.runKernel(Ia,{a:e,b:s})}});U().prototype.mod=function(n){return this.throwIfDisposed(),Gy(this,n)},U().prototype.mul=function(n){return this.throwIfDisposed(),R(this,n)},U().prototype.neg=function(){return this.throwIfDisposed(),Ct(this)},U().prototype.norm=function(n,t,e){return this.throwIfDisposed(),Yd(this,n,t,e)},U().prototype.notEqual=function(n){return this.throwIfDisposed(),yo(this,n)},U().prototype.oneHot=function(n,t=1,e=0){return this.throwIfDisposed(),_d(this,n,t,e)},U().prototype.onesLike=function(){return this.throwIfDisposed(),Vn(this)},U().prototype.pad=function(n,t){return this.throwIfDisposed(),uu(this,n,t)};const F$=D({pool_:function A$(n,t,e,s,r,o){null==r&&(r=[1,1]),null==o&&(o=1),0===s&&(s="valid");const a=N(n,"x","maxPool");let i=a,l=!1;3===a.rank&&(l=!0,i=F(a,[1,a.shape[0],a.shape[1],a.shape[2]])),C(un(o,r),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${o} and dilations '${r}'`);const u=Jn(i.shape,t,o,r,s),c=[u.dilationHeight,u.dilationWidth];let h;h="same"===s?function R$(n,t){const s=n.map((a,i)=>a+(a-1)*(t[i]-1)).map(a=>a-1),r=s.map(a=>Math.floor(a/2)),o=s.map((a,i)=>a-r[i]);return s.map((a,i)=>[r[i],o[i]])}([u.filterHeight,u.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[p,f]=function D$(n,t,e){const s=e.map(c=>c[0]),r=e.map(c=>c[1]),o=n.concat(s,r),a=t.map((c,h)=>(c-o[h]%c)%c),i=r.map((c,h)=>c+a[h]),l=t.map((c,h)=>[s[h],i[h]]),u=t.map((c,h)=>[0,a[h]]);return[l,u]}([u.inHeight,u.inWidth],c,h),m=d?s:"valid",g=d?i:$u(i,c,p),x=("avg"===e?()=>ou(g,t,o,m):()=>lu(g,t,o,m))(),b=d?x:Au(x,c,f);return l?F(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});U().prototype.pool=function(n,t,e,s,r){return this.throwIfDisposed(),F$(this,n,t,e,s,r)},U().prototype.pow=function(n){return this.throwIfDisposed(),Or(this,n)},U().prototype.prelu=function(n){return this.throwIfDisposed(),cu(this,n)};const Op=D({prod_:function O$(n,t=null,e=!1){let s=N(n,"x","prod");return"bool"===s.dtype&&(s=ue(s,"int32")),A.runKernel(bh,{x:s},{axis:t,keepDims:e})}});U().prototype.prod=function(n,t){return this.throwIfDisposed(),Op(this,n,t)};const Hy=D({reciprocal_:function L$(n){const e={x:N(n,"x","reciprocal")};return A.runKernel(Na,e)}});U().prototype.reciprocal=function(){return this.throwIfDisposed(),Hy(this)},U().prototype.relu=function(){return this.throwIfDisposed(),ks(this)},U().prototype.relu6=function(){return this.throwIfDisposed(),Bd(this)},U().prototype.reshapeAs=function(n){return this.throwIfDisposed(),F(this,n.shape)},U().prototype.reshape=function(n){return this.throwIfDisposed(),F(this,n)},U().prototype.resizeBilinear=function(n,t,e){return this.throwIfDisposed(),Qg(this,n,t,e)},U().prototype.resizeNearestNeighbor=function(n,t,e){return this.throwIfDisposed(),ey(this,n,t,e)},U().prototype.reverse=function(n){return this.throwIfDisposed(),Ms(this,n)},U().prototype.rfft=function(){return this.throwIfDisposed(),gu(this)},U().prototype.round=function(){return this.throwIfDisposed(),Xd(this)},U().prototype.rsqrt=function(){return this.throwIfDisposed(),Ap(this)},U().prototype.selu=function(){return this.throwIfDisposed(),Rd(this)},U().prototype.separableConv2d=function(n,t,e,s,r,o){return this.throwIfDisposed(),Gg(this,n,t,e,s,r,o)},U().prototype.sigmoid=function(){return this.throwIfDisposed(),Rr(this)};const jy=D({sign_:function P$(n){const e={x:N(n,"x","sign")};return A.runKernel(Ra,e)}});U().prototype.sign=function(){return this.throwIfDisposed(),jy(this)},U().prototype.sin=function(){return this.throwIfDisposed(),$p(this)},U().prototype.sinh=function(){return this.throwIfDisposed(),_p(this)},U().prototype.slice=function(n,t){return this.throwIfDisposed(),nt(this,n,t)},U().prototype.softmax=function(n){return this.throwIfDisposed(),du(this,n)},U().prototype.softplus=function(){return this.throwIfDisposed(),xo(this)},U().prototype.spaceToBatchND=function(n,t){return this.throwIfDisposed(),$u(this,n,t)},U().prototype.split=function(n,t){return this.throwIfDisposed(),En(this,n,t)},U().prototype.sqrt=function(){return this.throwIfDisposed(),fn(this)},U().prototype.square=function(){return this.throwIfDisposed(),ut(this)},U().prototype.squaredDifference=function(n){return this.throwIfDisposed(),Zd(this,n)},U().prototype.squeeze=function(n){return this.throwIfDisposed(),ar(this,n)},U().prototype.stack=function(n,t){this.throwIfDisposed();const e=n instanceof Tt?[this,n]:[this,...n];return es(e,t)},U().prototype.step=function(n){return this.throwIfDisposed(),oi(this,n)};const Ky=D({stridedSlice_:function z$(n,t,e,s,r=0,o=0,a=0,i=0,l=0){const c={x:N(n,"x","stridedSlice","string_or_numeric")};return A.runKernel(Ah,c,{begin:t,end:e,strides:s,beginMask:r,endMask:o,ellipsisMask:a,newAxisMask:i,shrinkAxisMask:l})}});U().prototype.stridedSlice=function(n,t,e,s,r,o,a,i){return this.throwIfDisposed(),Ky(this,n,t,e,s,r,o,a,i)},U().prototype.sub=function(n){return this.throwIfDisposed(),be(this,n)},U().prototype.sum=function(n,t){return this.throwIfDisposed(),we(this,n,t)};const qy=D({tan_:function M$(n){const e={x:N(n,"x","tan")};return A.runKernel(Ma,e)}});U().prototype.tan=function(){return this.throwIfDisposed(),qy(this)},U().prototype.tanh=function(){return this.throwIfDisposed(),pu(this)},U().prototype.tile=function(n){return this.throwIfDisposed(),Qn(this,n)},U().prototype.toBool=function(){return this.throwIfDisposed(),ue(this,"bool")},U().prototype.toFloat=function(){return this.throwIfDisposed(),ue(this,"float32")},U().prototype.toInt=function(){return this.throwIfDisposed(),ue(this,"int32")};const Xy=D({topk_:function B$(n,t=1,e=!0){const s=N(n,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const r=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>r)throw new Error(`'k' passed to topk() must be <= the last dimension (${r}) but got ${t}`);const o={x:s},a={k:t,sorted:e},[i,l]=A.runKernel(Oh,o,a);return{values:i,indices:l}}});U().prototype.topk=function(n,t){return this.throwIfDisposed(),Xy(this,n,t)},U().prototype.transpose=function(n){return this.throwIfDisposed(),qe(this,n)};const Lp=D({unique_:function V$(n,t=0){const e=N(n,"x","unique","string_or_numeric");C(e.rank>0,()=>"The input tensor must be at least 1D");const s={x:e},r={axis:t},[o,a]=A.runKernel(Ph,s,r);return{values:o,indices:a}}});let Du;function jt(){return null==Du&&(Du=function G1(){return A.backend}().epsilon()),Du}U().prototype.unique=function(n){return this.throwIfDisposed(),Lp(this,n)},U().prototype.unsortedSegmentSum=function(n,t){return this.throwIfDisposed(),by(this,n,t)},U().prototype.unstack=function(n){return this.throwIfDisposed(),ds(this,n)},U().prototype.where=function(n,t){return this.throwIfDisposed(),Nn(n,this,t)},U().prototype.zerosLike=function(){return this.throwIfDisposed(),Ke(this)};class Ss extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Ss.prototype)}}class ns extends Error{constructor(t){super(t),Object.setPrototypeOf(this,ns.prototype)}}class O extends Error{constructor(t){super(t),Object.setPrototypeOf(this,O.prototype)}}class Re extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Re.prototype)}}class Pp extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Pp.prototype)}}class Yy extends Error{constructor(t){super(t),Object.setPrototypeOf(this,Yy.prototype)}}function zr(n,t){if(Array.isArray(n)){let e=[];for(let s=0;s<t;s++)e=e.concat(n);return e}{const e=new Array(t);return e.fill(n),e}}function Wn(n,t){if(!n)throw new Pp(t)}function Zy(n,t){let e=0;for(const s of n)s===t&&e++;return e}function Sn(n){return 1===n.length?n[0]:n}function pt(n){return Array.isArray(n)?n:[n]}function Ws(n){const e=n.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==e[0]?e:"private"+e}function Mr(n){return n.length<=1||-1===n.indexOf("_")?n:n.replace(/[_]+(\w|$)/g,(t,e)=>e.toUpperCase())}let ss={};function zp(n){if(null==n)return null;const t={};return t.className=n.getClassName(),t.config=n.getConfig(),t}function Mp(n){if(null!=n&&"object"==typeof n)if(Array.isArray(n))n.forEach(t=>Mp(t));else{const t=Object.keys(n);for(const e of t){const s=n[e];null!=s&&"object"==typeof s&&(Array.isArray(s)||"ndarray"!==s.type||"number"!=typeof s.value?Mp(s):n[e]=s.value)}}}function hi(n,t={},e={},s="object",r=!1){if("string"==typeof n){let a;if(n in e)a=e[n];else if(n in ss)a=ss[n];else if(a=t[n],null==a)throw new O(`Unknown ${s}: ${n}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return a}{const o=n;if(null==o.className||null==o.config)throw new O(`${s}: Improper config format: ${JSON.stringify(o)}.\n'className' and 'config' must set.`);const a=o.className;let i,l;if(a in e?[i,l]=e[a]:a in ss?[i,l]=ss.className:a in t&&([i,l]=t[a]),null==i)throw new O(`Unknown ${s}: ${a}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const u={};for(const p of Object.keys(ss))u[p]=ss[p];for(const p of Object.keys(e))u[p]=e[p];o.config.customObjects=u;const h=Object.assign({},ss);for(const p of Object.keys(e))ss[p]=e[p];Mp(o.config);const d=l(i,o.config,e,r);return ss=Object.assign({},h),d}{const u=Object.assign({},ss);for(const h of Object.keys(e))ss[h]=e[h];const c=new i(o.config);return ss=Object.assign({},u),c}}}function Ru(n,t){return-1*function W$(n,t){return n<t?-1:n>t?1:0}(n,t)}function ir(n){if(null==n)return n;const t=[];for(const e of n)-1===t.indexOf(e)&&t.push(e);return t}function U$(n){if(null==n)throw new O(`Invalid value in obj: ${JSON.stringify(n)}`);for(const t in n)if(n.hasOwnProperty(t))return!1;return!0}function Br(n,t,e){if(null!=e&&n.indexOf(e)<0)throw new O(`${e} is not a valid ${t}.  Valid values are ${n} or null/undefined.`)}function Bp(n,t,e=0,s=1/0){return Wn(e>=0),Wn(s>=e),Array.isArray(n)&&n.length>=e&&n.length<=s&&n.every(r=>typeof r===t)}function sn(n,t){Array.isArray(n)?(C(n.length>0,()=>`${t} is unexpectedly an empty array.`),n.forEach((e,s)=>sn(e,`element ${s+1} of ${t}`))):C(Number.isInteger(n)&&n>0,()=>`Expected ${t} to be a positive integer, but got ${Jy(n)}.`)}function Jy(n){return null===n?"null":Array.isArray(n)?"["+n.map(t=>Jy(t)).join(",")+"]":"string"==typeof n?`"${n}"`:`${n}`}function Qy(n){return"relu"===n?"relu":"linear"===n?"linear":"elu"===n?"elu":null}function Vp(n,t){return P(()=>fn(we(R(n,n),t,!0)))}class di extends ho{getConfig(){return{}}}ee((()=>{class n extends di{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=Vp(e,this.axis),r=_n(s,0,this.maxValue);return R(e,ke(r,se(jt(),s)))})}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}return n.className="MaxNorm",n})()),ee((()=>{class n extends di{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>ke(e,se(jt(),Vp(e,this.axis))))}getConfig(){return{axis:this.axis}}}return n.className="UnitNorm",n})()),ee((()=>{class n extends di{apply(e){return ks(e)}}return n.className="NonNeg",n})()),ee((()=>{class n extends di{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return P(()=>{const s=Vp(e,this.axis),r=se(R(this.rate,_n(s,this.minValue,this.maxValue)),R(1-this.rate,s));return R(e,ke(r,se(jt(),s)))})}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}return n.className="MinMaxNorm",n})());const ex={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Kt(n){return zp(n)}function tx(n,t={}){return hi(n,Zn.getMap().classNameMap,t,"constraint")}function qt(n){return null==n?null:"string"==typeof n?tx({className:n in ex?ex[n]:n,config:{}}):n instanceof di?n:tx(n)}const H$=["channelsFirst","channelsLast"],j$=["nearest","bilinear"],K$=["valid","same","causal"],q$=["max","avg"],X$=["sum","mul","concat","ave"],vo=new Map;function Rt(n){Br(H$,"DataFormat",n)}function Un(n){Br(K$,"PaddingMode",n)}function nx(n){Br(q$,"PoolMode",n)}const pi=[],sx="/";function Vr(n,t){pi.push(n);try{const e=t();return pi.pop(),e}catch(e){throw pi.pop(),e}}function rx(n){if(!ax(n))throw new Error("Not a valid tensor name: '"+n+"'");return function Z$(){return 0===pi.length?"":pi.join(sx)+sx}()+n}function ox(n){if(!ax(n))throw new Error("Not a valid tensor name: '"+n+"'");vo.has(n)||vo.set(n,0);const t=vo.get(n);if(vo.set(n,vo.get(n)+1),t>0){const e=`${n}_${t}`;return vo.set(e,1),e}return n}const J$=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function ax(n){return!!n.match(J$)}function Q$(n){return n===parseInt(n.toString(),10)}function lr(n,t,e){null==t&&(t=0),null==e&&(e=n.length);let s=1;for(let r=t;r<e;++r)s*=n[r];return s}function Io(n){if(0===n.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s<t&&(t=s)}return t}function ur(n){if(0===n.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let e=0;e<n.length;e++){const s=n[e];s>t&&(t=s)}return t}function fs(n,t){if(t<n)throw new O(`end (${t}) < begin (${n}) is forbidden.`);const e=[];for(let s=n;s<t;++s)e.push(s);return e}function Fu(n,t){return ue(n,t)}function fi(n,t=-1){const e=n.shape.slice();return t<0&&(t=e.length+t+1),e.splice(t,0,1),F(n,e)}function Wr(n,t,e){return P(()=>{switch(n.rank){case 1:return Fd(n,t,e);case 2:return Hg(n,[t,0],[e,n.shape[1]]);case 3:return Od(n,[t,0,0],[e,n.shape[1],n.shape[2]]);case 4:return hu(n,[t,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3]]);case 5:return nt(n,[t,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4]]);case 6:return nt(n,[t,0,0,0,0,0],[e,n.shape[1],n.shape[2],n.shape[3],n.shape[4],n.shape[5]]);default:throw new O(`sliceAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Wp(n,t,e){return P(()=>{switch(n.rank){case 1:return Fd(n,t,e);case 2:return Hg(n,[0,t],[n.shape[0],e]);case 3:return Od(n,[0,0,t],[n.shape[0],n.shape[1],e]);case 4:return hu(n,[0,0,0,t],[n.shape[0],n.shape[1],n.shape[2],e]);default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Ou(n,t,e,s){return P(()=>{switch(n.rank){case 1:return Fd(n,t,e);case 2:switch(s){case 1:return Wr(n,t,e);case 2:return Wp(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Wr(n,t,e);case 2:return Od(n,[0,t,0],[n.shape[0],e,n.shape[2]]);case 3:return Wp(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Wr(n,t,e);case 2:return hu(n,[0,t,0,0],[n.shape[0],e,n.shape[2],n.shape[3]]);case 3:return hu(n,[0,0,t,0],[n.shape[0],n.shape[1],e,n.shape[3]]);case 4:return Wp(n,t,e);default:throw new O(`The axis is not within the rank of the tensor ${s}`)}default:throw new O(`sliceAlongLastAxis() received an unsupported tensor rank: ${n.rank}`)}})}function Up(n,t=-1){let e;return t<0&&(e=n[0].rank,t=0!==e?e:0),t===n[0].rank&&(t=-1),Ut(n,t)}function lx(n,t){switch(n.rank){case 1:return mI([n,t]);case 2:return yI([n,t],0);case 3:return bI([n,t],0);case 4:return vI([n,t],0);default:throw new O(`concatAlongFirstAxis() received an unsupported tensor rank: ${n.rank}`)}}function Gp(n,t){if(Array.isArray(t)||(t=[t]),n.rank!==t.length)throw new O(`The length of input n (${t.length}) does not match the number of dimensions in input x (${n.rank})`);return Qn(n,t)}function Lu(n,t=0,e=1,s,r){return yC(n,t,e,s,r)}function Ts(n,t,e,s){if(n.rank<2||t.rank<2)throw new Re(`dot requires both inputs to be rank >= 2 but got x shape = ${n.shape} and y shape = ${t.shape}`);if(t.rank>=3&&n.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Re(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${n.shape} and  y shape = ${t.shape}`);if(2===n.rank&&2===t.rank)return Vd({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Hp(n.rank,s,"channelsLast"):null,activation:e});{const r=n.shape.slice(),o=r.pop();n=F(n,[-1,o]);const a=t.shape.slice(),i=a.pop(),l=a.pop(),u=[...a,i],c=Array.from({length:t.rank},(f,m)=>0===m?t.rank-2:m<=t.rank-2?m-1:m);t=F(qe(t,c),[l,-1]);const h=[...r,...u];return F(Vd({a:n,b:t,transposeA:!1,transposeB:!1,bias:s?Hp(n.rank,s,"channelsLast"):null,activation:e}),h)}}function ux(n,t,e){return P(()=>(t=Array.isArray(t)?gn(t,"int32"):ue(t,"int32"),ei(n,t,e)))}function mi(n){return R(n,n)}function Hp(n,t,e){const s=t.shape;if(1!==t.rank&&t.rank!==n)throw new O(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${n}`);if(5===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1,1]:[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,1,s[0]]:[1].concat(s))}else if(4===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1,1]:[1,s[2],s[0],s[1]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,1,s[0]]:[1].concat(s))}else if(3===n){if("channelsFirst"===e)return F(t,1===s.length?[1,s[0],1]:[1,s[1],s[0]]);if("channelsLast"===e)return F(t,1===s.length?[1,1,s[0]]:[1].concat(s))}else if(n<3)return t;throw new O(`Unsupported input rank by biasAdd: ${t.rank}`)}function ms(n,t,e){return P(()=>(null==e&&(e="channelsLast"),Rt(e),se(n,Hp(n.rank,t,e))))}function cx(n,t,e,s){return P(()=>HC(n,t,e,s))}function gi(n,t,e=!1){return e?n():t()}const l_=["fanIn","fanOut","fanAvg"],u_=["normal","uniform","truncatedNormal"];class rs extends ho{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}ee((()=>{class n extends rs{apply(e,s){return Ht(e,s)}}return n.className="Zeros",n})());let hx=(()=>{class n extends rs{apply(e,s){return zs(e,s)}}return n.className="Ones",n})();ee(hx),ee((()=>{class n extends rs{constructor(e){if(super(),"object"!=typeof e)throw new O(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new O(`config must have value set but got ${e}`);this.value=e.value}apply(e,s){return P(()=>R(Ne(this.value),zs(e,s)))}getConfig(){return{value:this.value}}}return n.className="Constant",n})()),ee((()=>{class n extends rs{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,s){return ni(e,this.minval,this.maxval,s)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}return n.className="RandomUniform",n})()),ee((()=>{class n extends rs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Re(`randomNormal does not support dType ${s}.`);return Lu(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="RandomNormal",n})()),ee((()=>{class n extends rs{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,s){if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Re(`truncatedNormal does not support dType ${s}.`);return Ld(e,this.mean,this.stddev,s,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}return n.className="TruncatedNormal",n})()),ee((()=>{class n extends rs{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,s){return P(()=>{if(2!==e.length||e[0]!==e[1])throw new O("Identity matrix initializer can only be used for 2D square matrices.");return R(this.gain,Vg(e[0]))})}getConfig(){return{gain:this.gain}}}return n.className="Identity",n})());let Gn=(()=>{class n extends rs{constructor(e){if(super(),e.scale<0)throw new O(`scale must be a positive float. Got: ${e.scale}`);this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,function c_(n){Br(l_,"FanMode",n)}(this.mode),this.distribution=null==e.distribution?"normal":e.distribution,function h_(n){Br(u_,"Distribution",n)}(this.distribution),this.seed=e.seed}apply(e,s){const r=function d_(n,t="channelsLast"){let e,s;if(Rt(t),2===n.length)e=n[0],s=n[1];else if(-1!==[3,4,5].indexOf(n.length)){if("channelsFirst"===t){const r=lr(n,2);e=n[1]*r,s=n[0]*r}else if("channelsLast"===t){const r=lr(n,0,n.length-2);e=n[n.length-2]*r,s=n[n.length-1]*r}}else{const r=lr(n);e=Math.sqrt(r),s=Math.sqrt(r)}return[e,s]}(e),o=r[0],a=r[1];let i=this.scale;if(i/="fanIn"===this.mode?Math.max(1,o):"fanOut"===this.mode?Math.max(1,a):Math.max(1,(o+a)/2),"normal"===this.distribution){const l=Math.sqrt(i);if("float32"!==(s=s||"float32")&&"int32"!==s)throw new Re(`${this.getClassName()} does not support dType ${s}.`);return Ld(e,0,l,s,this.seed)}{const l=Math.sqrt(3*i);return ni(e,-l,l,s)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}return n.className="VarianceScaling",n})();ee(Gn);let dx=(()=>{class n extends Gn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="GlorotUniform",n})();ee(dx);let px=(()=>{class n extends Gn{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="GlorotNormal",n})();ee(px);let fx=(()=>{class n extends Gn{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="HeNormal",n})();ee(fx);let mx=(()=>{class n extends Gn{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="HeUniform",n})();ee(mx);let gx=(()=>{class n extends Gn{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="LeCunNormal",n})();ee(gx);let yx=(()=>{class n extends Gn{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return Gn.className}}return n.className="LeCunNormal",n})();ee(yx),ee((()=>{class n extends rs{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Re("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,s){return P(()=>{if(e.length<2)throw new Re("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const o=Lu(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let a=BN.gramSchmidt(o);return e[0]>e[1]&&(a=qe(a)),R(this.gain,a)})}getConfig(){return{gain:this.gain,seed:this.seed}}}return n.className="Orthogonal",n})());const xx={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function bx(n,t={}){return hi(n,Zn.getMap().classNameMap,t,"initializer")}function kt(n){return zp(n)}function wt(n){if("string"==typeof n){const t=n in xx?xx[n]:n;if("GlorotNormal"===t)return new px;if("GlorotUniform"===t)return new dx;if("HeNormal"===t)return new fx;if("HeUniform"===t)return new mx;if("LeCunNormal"===t)return new gx;if("LeCunUniform"===t)return new yx;{const e={};return e.className=t,e.config={},bx(e)}}return n instanceof rs?n:bx(n)}let p_=0;function wx(){return p_++}const Pu={};function zu(n=""){return n in Pu||(Pu[n]=0),Pu[n]+=1,n+Pu[n].toString()}function jp(n){return Array.isArray(n)&&Array.isArray(n[0])}function Mu(n){return 0===n.length?[]:Array.isArray(n[0])?n:[n]}function Oe(n){let t;if(Array.isArray(n)){if(1!==n.length)throw new O(`Expected Tensor length to be 1; got ${n.length}`);t=n[0]}else t=n;return t}function at(n){if(Array.isArray(n)&&Array.isArray(n[0])){if(1===n.length)return n[0];throw new O(`Expected exactly 1 Shape; got ${n.length}`)}return n}function Bu(n){let t=0;for(const e of n)t+=0===e.shape.length?1:e.shape.reduce((s,r)=>s*r);return t}const vx="Variable";class $s{constructor(t,e="float32",s=vx,r=!0,o=null){this.dtype=e??"float32",this.shape=t.shape,this.id=wx(),this.originalName=rx(s=s??vx),this.name=ox(this.originalName),this.trainable_=r,this.constraint=o,this.val=function zC(n,t=!0,e,s){return A.makeVariable(n,t,e,s)}(t,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(t){return this.assertNotDisposed(),function f_(n,t){if(n.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(n.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,t),this.val.id!==t.id&&(this.val.assign(t),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(t){this.trainable_=t,this.val.trainable=t}}function Kp(n){return n.map(t=>t.read())}function qp(n){n.forEach(t=>{t[0].write(t[1])})}class Xt{constructor(t){this.dtype=t.dtype,this.shape=t.shape,this.ndim=null!=t.shape?t.shape.length:t.ndim,this.maxNDim=t.maxNDim,this.minNDim=t.minNDim,this.axes=t.axes||{}}}class _s{constructor(t,e,s,r,o,a,i){this.dtype=t,this.shape=e,this.sourceLayer=s,this.inputs=r,this.callArgs=o,this.outputTensorIndex=i,this.id=wx(),null!=a&&(this.originalName=rx(a),this.name=ox(this.originalName)),this.rank=e.length}}let m_=0;class Vu{constructor(t,e){this.callArgs=e,this.id=m_++,this.outboundLayer=t.outboundLayer,this.inboundLayers=t.inboundLayers,this.nodeIndices=t.nodeIndices,this.tensorIndices=t.tensorIndices,this.inputTensors=t.inputTensors,this.outputTensors=t.outputTensors,this.inputMasks=t.inputMasks,this.outputMasks=t.outputMasks,this.inputShapes=t.inputShapes,this.outputShapes=t.outputShapes;for(const s of t.inboundLayers)s?.outboundNodes.push(this);t.outboundLayer.inboundNodes.push(this)}getConfig(){const t=[];for(const e of this.inboundLayers)t.push(null!=e?e.name:null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:t,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let g_=0;class Xe extends ho{constructor(t={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=g_++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let e=t.name;if(!e){const s=this.getClassName();e=Ws(s)+"_"+zu(s)}if(this.name=e,this.trainable_=null==t.trainable||t.trainable,null!=t.inputShape||null!=t.batchInputShape){let s;if(null!=t.batchInputShape)s=t.batchInputShape;else if(null!=t.inputShape){let o=null;null!=t.batchSize&&(o=t.batchSize),s=[o].concat(t.inputShape)}this.batchInputShape=s;let r=t.dtype;null==r&&(r=t.inputDType),null==r&&(r="float32"),this.dtype=r}this.initialWeights=null!=t.weights?t.weights:null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(t,e){return t.name+"_ib-"+e.toString()}getNodeAtIndex(t,e){if(0===this.inboundNodes.length)throw new ns(`The layer has never been called and thus has no defined ${e}.`);if(this.inboundNodes.length<=t)throw new O(`Asked to get ${e} at node ${t}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[t]}getInputAt(t){return Sn(this.getNodeAtIndex(t,"input").inputTensors)}getOutputAt(t){return Sn(this.getNodeAtIndex(t,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new Ss(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new Ss(`Layer ${this.name} is not connected, no input to return.`);return Sn(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new Ss(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new Ss(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Sn(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map(t=>t())}get updates(){return this._updates}get built(){return this._built}set built(t){this._built=t}get trainable(){return this.trainable_}set trainable(t){this._trainableWeights.forEach(e=>e.trainable=t),this.trainable_=t}get trainableWeights(){return this.trainable_?this._trainableWeights.filter(t=>t.trainable):[]}set trainableWeights(t){this._trainableWeights=t}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter(t=>!t.trainable).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(t){this._nonTrainableWeights=t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(t){if(t=pt(t),null==this.inputSpec||0===this.inputSpec.length)return;const e=pt(this.inputSpec);if(t.length!==e.length)throw new O(`Layer ${this.name} expects ${e.length} inputs, but it received ${t.length} input tensors. Input received: ${t}`);for(let s=0;s<t.length;s++){const r=t[s],o=e[s];if(null==o)continue;const a=r.rank;if(null!=o.ndim&&a!==o.ndim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected ndim=${o.ndim}, found ndim=${a}`);if(null!=o.maxNDim&&a>o.maxNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected max_ndim=${o.maxNDim}, found ndim=${a}`);if(null!=o.minNDim&&a<o.minNDim)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected min_ndim=${o.minNDim}, found ndim=${a}.`);if(null!=o.dtype&&r.dtype!==o.dtype)throw new O(`Input ${s} is incompatible with layer ${this.name} : expected dtype=${o.dtype}, found dtype=${r.dtype}.`);if(o.axes){const i=r.shape;for(const l in o.axes){const u=Number(l),c=o.axes[l];if(null!=c&&-1===[c,null].indexOf(u>=0?i[u]:i[i.length+u]))throw new O(`Input ${s} is incompatible with layer ${this.name}: expected axis ${u} of input shape to have value ${c} but got shape ${i}.`)}}if(null!=o.shape)for(let i=0;i<o.shape.length;++i){const l=o.shape[i],u=r.shape[i];if(null!=l&&null!=u&&l!==u)throw new O(`Input ${s} is incompatible with layer ${this.name}: expected shape=${o.shape}, found shape=${r.shape}.`)}}}call(t,e){return t}invokeCallHook(t,e){null!=this._callHook&&this._callHook(t,e)}setCallHook(t){this._callHook=t}clearCallHook(){this._callHook=null}apply(t,e){e=e||{},this.assertNotDisposed();const s=pt(t);let r=!0;for(const a of s)if(!(a instanceof _s)){r=!1;break}let o=!0;for(const a of s)if(a instanceof _s){o=!1;break}if(r===o)throw new O("Arguments to apply() must be all SymbolicTensors or all Tensors");return Vr(this.name,()=>{if(!this.built){this.assertInputCompatibility(t);const a=[];for(const i of pt(t))a.push(i.shape);this.build(Sn(a)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&o&&(this._refCount=1)}if(this.assertInputCompatibility(t),o){let a=this.call(t,e);const i=pt(a),l=[];for(let u of i)-1!==s.indexOf(u)&&(u=u.clone()),l.push(u);if(a=Sn(l),null!=this.activityRegularizer)throw new Re("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}{const a=function y_(n){n=pt(n);const t=[];for(const e of n)t.push(e.shape);return Sn(t)}(t),i=this.computeOutputShape(a);let l;const u="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(t)?a[0]:a),l=null!=i&&i.length>0&&Array.isArray(i[0])?i.map((c,h)=>new _s(u,c,this,pt(t),e,this.name,h)):new _s(u,i,this,pt(t),e,this.name),this.addInboundNode(t,l,null,null,a,i,e),this._refCount++,null!=this.activityRegularizer)throw new Re("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return l}})}warnOnIncompatibleInputShape(t){if(null!=this.batchInputShape)if(t.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(t)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let e=!1;this.batchInputShape.forEach((s,r)=>{null!=s&&null!=t[r]&&t[r]!==s&&(e=!0)}),e&&console.warn(`The shape of the input tensor (${JSON.stringify(t)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new Ss(`The layer ${this.name} has never been called and thus has no defined output shape.`);const t=[];for(const e of this.inboundNodes){const s=JSON.stringify(e.outputShapes);-1===t.indexOf(s)&&t.push(s)}if(1===t.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new Ss(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new ns(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return Bu(this.weights)}build(t){this.built=!0}getWeights(t=!1){return Kp(t?this.trainableWeights:this.weights)}setWeights(t){P(()=>{const e=this.weights;if(e.length!==t.length)throw new O(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${t.length}, but the layer was expecting ${e.length} weights. Provided weights: ${t}...`);if(0===e.length)return;const s=[],r=Kp(e);for(let o=0;o<r.length;++o){const a=r[o],i=e[o],l=t[o];if(!je(a.shape,l.shape))throw new O(`Layer weight shape ${a.shape} not compatible with provided weight shape ${l.shape}`);s.push([i,l])}qp(s)})}addWeight(t,e,s,r,o,a,i){if(-1!==this._addedWeightNames.indexOf(t))throw new O(`Duplicate weight name ${t} for layer ${this.name}`);this._addedWeightNames.push(t),null==s&&(s="float32"),this.fastWeightInitDuringBuild&&(r=wt("zeros"));const l=r.apply(e,s),u=new $s(l,s,t,a,i);return l.dispose(),null!=o&&this.addLoss(()=>o.apply(u.read())),null==a&&(a=!0),a?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(t){this.fastWeightInitDuringBuild=t}addLoss(t){null==t||Array.isArray(t)&&0===t.length||(t=pt(t),null!=this._losses&&this.losses.push(...t))}computeOutputShape(t){return t}computeMask(t,e){if(!this.supportsMasking){if(null!=e){if(!Array.isArray(e))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);e.forEach(s=>{if(null!=s)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)})}return null}return e}addInboundNode(t,e,s,r,o,a,i=null){const l=pt(t);e=pt(e),s=pt(s),r=pt(r),o=Mu(o),a=Mu(a);const u=[],c=[],h=[];for(const d of l)u.push(d.sourceLayer),c.push(d.nodeIndex),h.push(d.tensorIndex);new Vu({outboundLayer:this,inboundLayers:u,nodeIndices:c,tensorIndices:h,inputTensors:l,outputTensors:e,inputMasks:s,outputMasks:r,inputShapes:o,outputShapes:a},i);for(let d=0;d<e.length;d++)e[d].sourceLayer=this,e[d].nodeIndex=this.inboundNodes.length-1,e[d].tensorIndex=d}getConfig(){const t={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(t.batchInputShape=this.batchInputShape),null!=this.dtype&&(t.dtype=this.dtype),t}disposeWeights(){return this.weights.forEach(t=>t.dispose()),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let t=0;return 0==--this._refCount&&(t=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:t}}}function Ix(n,t,e){if((null==t||null!=e&&e>0)&&(t=n.sourceLayer,e=n.nodeIndex),0===t.inboundNodes.length)return[n];{const s=t.inboundNodes[e];if(0===s.inboundLayers.length)return s.inputTensors;{const r=[];for(let o=0;o<s.inboundLayers.length;o++){const u=Ix(s.inputTensors[o],s.inboundLayers[o],s.nodeIndices[o]);for(const c of u)-1===r.indexOf(c)&&r.push(c)}return r}}}let Wu=(()=>{class n extends Xe{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:zu("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new O("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let s=e.batchInputShape;if(null==s){if(null==e.inputShape)throw new O("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");s=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new O("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const r=e.dtype||"float32";this.batchInputShape=s,this.dtype=r,this.inputSpec=[{shape:s}];const o=new _s(this.dtype,this.batchInputShape,this,[],{},this.name);o.nodeIndex=0,o.tensorIndex=0,new Vu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[o],outputTensors:[o],inputMasks:[null],outputMasks:[null],inputShapes:[s],outputShapes:[s]})}apply(e,s){throw new O(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}return n.className="InputLayer",n})();function cr(n){return Xp.apply(this,arguments)}function Xp(){return(Xp=L(function*(n){if(null==n)return;const t=[],e=[],s=[];for(const r in n){const o=n[r];if("number"!=typeof o){const a=o;t.push(a.data()),e.push(r),s.push(a)}}if(t.length>0){const r=yield Promise.all(t);for(let o=0;o<r.length;++o)n[e[o]]=r[o][0];ze(s)}})).apply(this,arguments)}function Cx(n){if(null!=n)for(const t in n){const e=n[t];"number"!=typeof e&&e.dispose()}}ee(Wu);class Co{constructor(){this.validationData=null}setParams(t){this.params=t}onEpochBegin(t,e){return L(function*(){})()}onEpochEnd(t,e){return L(function*(){})()}onBatchBegin(t,e){return L(function*(){})()}onBatchEnd(t,e){return L(function*(){})()}onTrainBegin(t){return L(function*(){})()}onTrainEnd(t){return L(function*(){})()}setModel(t){}}class v_{constructor(t,e=10){null==t&&(t=[]),this.callbacks=t,this.queueLength=e}append(t){this.callbacks.push(t)}setParams(t){for(const e of this.callbacks)e.setParams(t)}setModel(t){for(const e of this.callbacks)e.setModel(t)}onEpochBegin(t,e){var s=this;return L(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochBegin(t,e)})()}onEpochEnd(t,e){var s=this;return L(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onEpochEnd(t,e)})()}onBatchBegin(t,e){var s=this;return L(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchBegin(t,e)})()}onBatchEnd(t,e){var s=this;return L(function*(){null==e&&(e={});for(const r of s.callbacks)yield r.onBatchEnd(t,e)})()}onTrainBegin(t){var e=this;return L(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainBegin(t)})()}onTrainEnd(t){var e=this;return L(function*(){null==t&&(t={});for(const s of e.callbacks)yield s.onTrainEnd(t)})()}}class I_ extends Co{constructor(){super()}onEpochBegin(t){var e=this;return L(function*(){e.seen=0,e.totals={}})()}onBatchEnd(t,e){var s=this;return L(function*(){null==e&&(e={});const r=null==e.size?0:e.size;s.seen+=r;for(const o in e){const a=e[o];if("number"==typeof a)s.totals.hasOwnProperty(o)||(s.totals[o]=0),s.totals[o]=s.totals[o]+a*r;else{let i;o in s.totals?i=s.totals[o]:s.totals[o]=0;const l=P(()=>se(s.totals[o],R(a,r)));s.totals[o]=l,i?.dispose()}}})()}onEpochEnd(t,e){var s=this;return L(function*(){if(null!=e)for(const r of s.params.metrics)null!=s.totals[r]&&("number"==typeof s.totals[r]?e[r]=s.totals[r]/s.seen:P(()=>{const o=R(ke(1,s.seen),s.totals[r]);e[r]=o,s.totals[r].dispose(),ln(e[r])}))})()}}class C_ extends Co{onTrainBegin(t){var e=this;return L(function*(){e.epoch=[],e.history={}})()}onEpochEnd(t,e){var s=this;return L(function*(){null==e&&(e={}),s.epoch.push(t);for(const r in e)null==s.history[r]&&(s.history[r]=[]),s.history[r].push(e[r])})()}syncData(){var t=this;return L(function*(){const e=[],s=[],r=[];for(const a in t.history){const i=t.history[a];for(let l=0;l<i.length;++l)"number"!=typeof i[l]&&(e.push(i[l].data()),s.push(a),r.push(l))}const o=yield Promise.all(e);for(let a=0;a<o.length;++a)t.history[s[a]][r[a]].dispose(),t.history[s[a]][r[a]]=o[a][0]})()}}class k_ extends Co{constructor(t,e){if(super(),this.currentEpoch=0,this.yieldEvery=e||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=t.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Oc(this.yieldEvery)&&(this.maybeWait=function G$(n,t){let s,e=kn();return(...o)=>{const a=kn();return a-e<t||(e=a,s=n(...o)),s}}(this.maybeWait.bind(this),this.yieldEvery)),this.trainBegin=t.onTrainBegin,this.trainEnd=t.onTrainEnd,this.epochBegin=t.onEpochBegin,this.epochEnd=t.onEpochEnd,this.batchBegin=t.onBatchBegin,this.batchEnd=t.onBatchEnd,this.yield=t.onYield}maybeWait(t,e,s){var r=this;return L(function*(){const o=[];null!=r.yield&&(yield cr(s),o.push(r.yield(t,e,s))),o.push(op()),yield Promise.all(o)})()}onEpochBegin(t,e){var s=this;return L(function*(){s.currentEpoch=t,null!=s.epochBegin&&(yield cr(e),yield s.epochBegin(t,e))})()}onEpochEnd(t,e){var s=this;return L(function*(){const r=[];null!=s.epochEnd&&(yield cr(e),r.push(s.epochEnd(t,e))),"epoch"===s.yieldEvery&&r.push(op()),yield Promise.all(r)})()}onBatchBegin(t,e){var s=this;return L(function*(){null!=s.batchBegin&&(yield cr(e),yield s.batchBegin(t,e))})()}onBatchEnd(t,e){var s=this;return L(function*(){const r=[];null!=s.batchEnd&&(yield cr(e),r.push(s.batchEnd(t,e))),"batch"===s.yieldEvery?r.push(op()):Oc(s.yieldEvery)&&r.push(s.maybeWait(s.currentEpoch,t,e)),yield Promise.all(r)})()}onTrainBegin(t){var e=this;return L(function*(){null!=e.trainBegin&&(yield cr(t),yield e.trainBegin(t))})()}onTrainEnd(t){var e=this;return L(function*(){null!=e.trainEnd&&(yield cr(t),yield e.trainEnd(t))})()}}function kx(n,t){return null==n&&(n={}),n instanceof Co?[n]:Array.isArray(n)&&n[0]instanceof Co?n:pt(n).map(s=>new k_(s,t))}let N_=(()=>{class n{constructor(){}static registerCallbackConstructor(e,s){C(e>=0&&Number.isInteger(e),()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`),n.checkForDuplicate(s),null==n.constructors[e]&&(n.constructors[e]=[]),n.constructors[e].push(s)}static checkForDuplicate(e){for(const s in n.constructors)n.constructors[+s].forEach(o=>{if(o===e)throw new O("Duplicate callback constructor.")})}static clear(){n.constructors={}}static createCallbacks(e){const s=[];for(const r in n.constructors){const o=+r;e>=o&&s.push(...n.constructors[o])}return s.map(r=>new r)}}return n.constructors={},n})();function Nx(n,t,e,s,r,o,a,i,l){const u=new C_,c=[new I_,...N_.createCallbacks(t)];null!=n&&c.push(...n),c.push(u);const h=new v_(c);return h.setParams({epochs:e,initialEpoch:s,samples:r,steps:o,batchSize:a,verbose:t,doValidation:i,metrics:l}),{callbackList:h,history:u}}function Us(n,t={},e=!1){return hi(n,Zn.getMap().classNameMap,t,"layer",e)}function Uu(n,t){return P(()=>{"float32"!==n.dtype&&(n=ue(n,"float32"));const e=we(mi(n),t,!0),s=Ja(e.shape,jt()),r=fn(Ps(e,s));return ke(n,r)})}function Gu(n,t){return P(()=>_t(mi(be(t,n)),-1))}function Yp(n,t){return P(()=>_t(Wt(be(t,n)),-1))}function Zp(n,t){return P(()=>{const e=be(n,t),s=_n(Wt(n),jt(),Number.MAX_VALUE),r=Wt(ke(e,s));return R(100,_t(r,-1))})}function yi(n,t,e=!1){return P(()=>{if(e)t=du(t);else{const s=we(t,t.shape.length-1,!0);t=ke(t,s)}return t=_n(t,jt(),1-jt()),Ct(we(R(ue(n,"float32"),Bn(t)),t.shape.length-1))})}function Hu(n,t,e=!1){return P(()=>{const s=ue(Qa(function s_(n){const t=[lr(n.shape)];return F(n,t)}(n)),"int32"),r=(t=_n(t,jt(),1-jt())).shape;return yi(F(_d(s,r[r.length-1]),r),t,e)})}function ju(n,t){return P(()=>{let e;return e=_n(t,jt(),1-jt()),e=Bn(ke(e,be(1,e))),_t(function A_(n,t){if(!je(n.shape,t.shape))throw new O(`logits and labels must have the same shape, but got shapes ${JSON.stringify(n.shape)} and ${JSON.stringify(t.shape)}`);return P(()=>{const e=ks(t),s=Ct(Wt(t));return se(be(e,R(t,n)),iu(Pn(s)))})}(n,e),-1)})}function Sx(n,t){return P(()=>{const e=Uu(n,-1),s=Uu(t,-1),r=R(e,s);return Ct(we(r,-1))})}const Ku={meanSquaredError:Gu,meanAbsoluteError:Yp,meanAbsolutePercentageError:Zp,meanSquaredLogarithmicError:function S_(n,t){return P(()=>{const e=_n(t,jt(),Number.MAX_VALUE),s=Bn(se(1,e)),r=_n(n,jt(),Number.MAX_VALUE),o=Bn(se(1,r));return _t(mi(be(s,o)),-1)})},squaredHinge:function T_(n,t){return P(()=>{const e=Ps(0,be(1,R(n,t)));return _t(mi(e),-1)})},hinge:function $_(n,t){return P(()=>{const e=Ps(0,be(1,R(n,t)));return _t(e,-1)})},categoricalHinge:function __(n,t){return P(()=>{const e=we(R(n,t),-1),s=hs(R(be(1,n),t),-1);return Ps(0,se(1,be(s,e)))})},logcosh:function E_(n,t){return P(()=>{const e=Math.log(2),s=be(t,n),r=be(se(s,xo(R(-2,s))),e);return _t(r,-1)})},categoricalCrossentropy:yi,sparseCategoricalCrossentropy:Hu,binaryCrossentropy:ju,kullbackLeiblerDivergence:function D_(n,t){return P(()=>{const e=_n(n,jt(),1),s=_n(t,jt(),1);return we(R(n,Bn(ke(e,s))),-1)})},poisson:function R_(n,t){return P(()=>{const e=Bn(se(jt(),t));return _t(be(t,R(n,e)),-1)})},cosineProximity:Sx};function Jp(n){if("string"==typeof n){if(n in Ku)return Ku[n];let t=`Unknown loss ${n}`;throw n.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${n}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new O(t)}return n}function Tx(n,t){return P(()=>{const e=R(.5,Vn(t)),s=Fu(Mn(t,e),n.dtype);return _t(cs(n,s),-1)})}function $x(n,t){return P(()=>Fu(cs(Er(n,-1),Er(t,-1)),"float32"))}function P_(n,t){return ju(n,t)}function z_(n,t){return n.rank===t.rank&&(n=ar(n,[n.rank-1])),(t=Er(t,-1)).dtype!==n.dtype&&(t=ue(t,n.dtype)),ue(cs(n,t),"float32")}const Ex=yi,Ax=Hu,qu={binaryAccuracy:Tx,categoricalAccuracy:$x,precision:function L_(n,t){return P(()=>{const e=function _x(n,t){return P(()=>ue(we(Cs(cs(n,1),cs(t,1))),"float32"))}(n,t),s=function O_(n,t){return P(()=>ue(we(Cs(cs(n,0),cs(t,1))),"float32"))}(n,t),r=se(e,s);return ue(Nn(Mn(r,0),ke(e,r),0),"float32")})},categoricalCrossentropy:Ex,sparseCategoricalCrossentropy:Ax,mse:Gu,MSE:Gu,mae:Yp,MAE:Yp,mape:Zp,MAPE:Zp,cosine:Sx};function j_(n){if("string"==typeof n&&n in qu)return qu[n];if("string"!=typeof n&&null!=n)return n;throw new O(`Unknown metric ${n}`)}function Xu(n){if(Wn(null!==n,`Unknown LossOrMetricFn ${n}`),"string"==typeof n)return n;{let t;for(const e of Object.keys(Ku))if(Ku[e]===n){t=e;break}if(void 0!==t)return t;for(const e of Object.keys(qu))if(qu[e]===n){t=e;break}return void 0!==t?t:n.name}}const Dx=1048576;function Rx(n,t,e=!1){if(null==n||"object"!=typeof n||Object.getPrototypeOf(n)!==Object.prototype||!Qp(n))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(e){const s=JSON.stringify(n);s.length>Dx&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${s.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= ${Dx}.`)}}function Qp(n){if(null===n)return!0;if("object"==typeof n){if(Object.getPrototypeOf(n)===Object.prototype){const t=Object.keys(n);for(const e of t)if("string"!=typeof e||!Qp(n[e]))return!1;return!0}if(Array.isArray(n)){for(const t of n)if(!Qp(t))return!1;return!0}return!1}{const t=typeof n;return"string"===t||"number"===t||"boolean"===t}}function Yu(n,t,e=console.log){let s="";for(let r=0;r<n.length;++r)r>0&&(s=s.slice(0,s.length-1)+" "),s+=n[r],s=s.slice(0,t[r]),s+=" ".repeat(t[r]-s.length);e(s)}function Z_(n,t,e){let s;try{s=JSON.stringify(n.outputShape)}catch{s="multiple"}Yu([`${n.name} (${n.getClassName()})`,s,n.countParams().toString()],t,e)}function J_(n,t,e,s){let r;try{r=JSON.stringify(n.outputShape)}catch{r="multiple"}const o=[];for(const c of n.inboundNodes)if(!(null!=e&&e.length>0&&-1===e.indexOf(c)))for(let h=0;h<c.inboundLayers.length;++h)o.push(`${c.inboundLayers[h].name}[${c.nodeIndices[h]}][${c.tensorIndices[h]}]`);const a=n.name,i=n.getClassName(),l=0===o.length?"":o[0];Yu([`${a} (${i})`,r,n.countParams().toString(),l],t,s);for(let c=1;c<o.length;++c)Yu(["","","",o[c]],t,s)}function Fx(n,t,e){return("inboundNodes"===n||"outputLayers"===n||"inputLayers"===n)&&0===t&&"string"==typeof e}function ef(n,t){if(null===n)return null;if("string"==typeof n)return Mr(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];Fx(t,r,o)?e.push(o):e.push(ef(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];if("name"===s&&"string"==typeof r)e[s]=r;else{const o=Mr(s);e[o]=ef(r,o)}}return e}}function nf(n,t){if(null==n)return null;if("string"==typeof n)return Ws(n);if("number"==typeof n||"boolean"==typeof n)return n;if(n instanceof Array){const e=[],s=n.length;for(let r=0;r<s;++r){const o=n[r];Fx(t,r,o)?e.push(o):e.push(nf(o,t))}return e}{const e={};for(const s of Object.keys(n)){const r=n[s];e[Ws(s)]="name"!==s&&"className"!==s||"string"!=typeof r?nf(r,s):r}return e}}class hr{constructor(t){if(this.id2Value={},this.id2Mask={},this.name2Id={},t instanceof hr)for(const e in t.id2Value)this.id2Value[e]=t.id2Value[e],e in t.id2Mask&&(this.id2Mask[e]=t.id2Mask[e]);else{if(null==t)return;for(const e of t)this.add(e.key,e.value)}}add(t,e,s){if(null!=this.id2Value[t.id])throw new O(`Duplicate key: name=${t.name}, id=${t.id}`);return this.id2Value[t.id]=function Q_(n,t){if(null==n.dtype||n.dtype===t.dtype)return t;try{return ue(t,n.dtype)}catch{throw new O(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${n.name}' (${n.dtype}).`)}}(t,e),this.name2Id[t.name]=t.id,null!=s&&(this.id2Mask[t.id]=s),this}addFeed(t){this.add(t.key,t.value)}hasKey(t){return null!=this.id2Value[t.id]}names(){return Object.keys(this.name2Id)}getValue(t){if(t instanceof _s){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Value[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Value[e]}}getMask(t){if(t instanceof _s){if(null==this.id2Value[t.id])throw new O(`Nonexistent key: ${t.name}`);return this.id2Mask[t.id]}{const e=this.name2Id[t];if(null==e)throw new O(`Feed dict has no SymbolicTensor name: ${t}`);return this.id2Mask[e]}}disposeMasks(){null!=this.id2Mask&&ze(this.id2Mask)}}const rf={},Ox={};function xi(n,t,e,s){const r=null!=e&&e.training,o=Array.isArray(n),a=o?n:[n],i=a.map(f=>f.name),l=[],u=t.names();for(const f of i)-1!==u.indexOf(f)?l.push(t.getValue(f)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=i.join(",")+"|"+t.names().join(",");let h,d;if(null==rf[c]){const f=function e2(n,t){C(null!=n&&n.length>0,()=>"Expected at least one fetch, got none");let e=[],s={};if(1===n.length){const r=Lx(n[0],t);e=r.sorted,s=r.recipientMap}else{const r=new Set;for(const o of n){const{sorted:a,recipientMap:i}=Lx(o,t);for(const l of a)r.has(l.name)||(e.push(l),r.add(l.name));for(const l in i)null==s[l]&&(s[l]=new Set),i[l].forEach(u=>s[l].add(u))}}return{sorted:e,recipientCounts:t2(s)}}(a,t);h=f.sorted,d=f.recipientCounts,rf[c]=h,Ox[c]=d}h=rf[c],d={},r||Object.assign(d,Ox[c]);const p=new hr(t);for(let f=0;f<h.length;++f){if(null!=s){const _=xd().numTensors;_>s.maxNumTensors&&(s.maxNumTensors=_),_<s.minNumTensors&&(s.minNumTensors=_)}const m=h[f],g=m.sourceLayer;if(g instanceof Wu)continue;const y=[],x=[],b=[];let w=!1;for(const _ of m.inputs){const E=p.getValue(_),M=p.getMask(_);y.push(E),x.push(M),null!=M&&(w=!0),r||(d[_.name]--,0===d[_.name]&&!t.hasKey(_)&&-1===i.indexOf(_.name)&&!E.isDisposed&&!0!==_.sourceLayer.stateful&&b.push(E))}w&&((e=e||{}).mask=x[0]);const I=pt(g.apply(y,e));let k=null;g.supportsMasking&&(k=g.computeMask(y,x));const S=n2(m),T=Array.isArray(S)?S:[S];for(let _=0;_<T.length;++_){p.hasKey(T[_])||p.add(T[_],I[_],Array.isArray(k)?k[0]:k);const E=i.indexOf(T[_].name);-1!==E&&(l[E]=I[_])}r||ze(b)}return p.disposeMasks(),o?l:l[0]}function t2(n){const t={};for(const e in n)t[e]=n[e].size;return t}function Lx(n,t){const e=new Set,s=[],r={};for(const i of t.names())e.add(i);const o=[],a=[];for(o.push(n);o.length>0;){const i=o[o.length-1];if(e.has(i.name)){o.pop();continue}const l=a[a.length-1]===o.length-1;if(0===i.inputs.length||l)o.pop(),s.push(i),e.add(i.name),l&&a.pop();else{a.push(o.length-1);for(const u of i.inputs)null==r[u.name]&&(r[u.name]=new Set),r[u.name].add(i.name),!e.has(u.name)&&o.push(u)}}return{sorted:s,recipientMap:r}}function n2(n){let t;if(1===n.sourceLayer.inboundNodes.length)t=n.sourceLayer.output;else{let e=null;for(let s=0;s<n.sourceLayer.inboundNodes.length;++s)for(const r of n.sourceLayer.inboundNodes[s].outputTensors)if(r.id===n.id){e=s;break}t=n.sourceLayer.getOutputAt(e)}return t}class gs extends Xe{constructor(t){if(super({}),this.containerNodes=new Set,this.name=t.name,null==this.name){const x=this.getClassName().toLowerCase();this.name=zu(x)}if(this.supportsMasking=!1,this.trainable_=!0,this.inputs=Array.isArray(t.inputs)?t.inputs.slice():[t.inputs],this.outputs=Array.isArray(t.outputs)?t.outputs.slice():[t.outputs],ir(this.inputs).length!==this.inputs.length)throw new O(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map(x=>x.name)}`);ir(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map(x=>x.name)}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const x of this.outputs){const w=x.nodeIndex,I=x.tensorIndex;this.outputLayers.push(x.sourceLayer),this.outputLayersNodeIndices.push(w),this.outputLayersTensorIndices.push(I)}for(const x of this.inputs){const b=x.sourceLayer,w=x.nodeIndex,I=x.tensorIndex;Wn(0===w,"input layer has >1 nodes"),Wn(0===I,"input layer has >1 tensors"),this.inputLayers.push(b),this.inputLayersNodeIndices.push(w),this.inputLayersTensorIndices.push(I)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let x=0;x<this.inputLayers.length;x++){const b=this.inputLayers[x];if(!(b instanceof Wu))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${t.inputs}. Input ${x} (0-based) originates from layer type ${b.getClassName()}.`);this.inputNames.push(b.name),this.feedInputShapes.push(b.batchInputShape),this.feedInputNames.push(b.name)}for(const x of this.outputLayers)this.outputNames.push(x.name);this.internalInputShapes=this.inputs.map(x=>x.shape),this.internalOutputShapes=this.outputs.map(x=>x.shape);const e={},s={},r={},o={},a={},i=[],l=(x,b,w,I,k,S)=>{(null==I||null==k||null==S)&&(I=x.sourceLayer,k=x.nodeIndex,S=x.tensorIndex);const T=I.inboundNodes[k];if(-1!==w.indexOf(T))throw new ns(`The tensor ${x.name} at layer "${I.name}" is part of a cycle.`);if(-1!==b.indexOf(T))return;this.containerNodes.add(gs.nodeKey(I,k)),I.id in a||(a[I.id]=Object.keys(a).length),-1===w.indexOf(T)&&w.push(T);const _=T.inboundLayers.length;for(let E=0;E<_;E++)l(T.inputTensors[E],b,w,T.inboundLayers[E],T.nodeIndices[E],T.tensorIndices[E]);for(b.push(T);w.indexOf(T)>=0;)w.splice(w.indexOf(T),1);i.push(T)},u=[],c=[];for(const x of this.outputs)l(x,u,c);const h=i.slice().reverse();for(const x of h){s[x.id]=x,x.id in e||(e[x.id]=0);let b=e[x.id];b=Math.max(b,null==r[x.outboundLayer.id]?0:r[x.outboundLayer.id]),r[x.outboundLayer.id]=b,o[x.outboundLayer.id]=x.outboundLayer,e[x.id]=b;for(let I=0;I<x.inboundLayers.length;I++){const T=x.inboundLayers[I].inboundNodes[x.nodeIndices[I]];e[T.id]=Math.max(b+1,null==e[T.id]?0:e[T.id]),s[T.id]=T}}const d={};for(const x in e){const b=e[x];b in d||(d[b]=[]),d[b].push(s[x])}const p={};for(const x in r){const b=r[x];b in p||(p[b]=[]),p[b].push(o[x])}let f=Object.keys(p).map(x=>parseInt(x,10)).sort(Ru);this.layers=[];for(const x of f){const b=p[x];b.sort((w,I)=>{const k=a[w.id],S=a[I.id];return k<S?-1:k>S?1:0});for(const w of b)w instanceof gs&&this.internalContainerRefs.push(w),this.layers.push(w)}this.layersByDepth=p,f=Object.keys(d).map(x=>parseInt(x,10)).sort(Ru);const m=this.inputs.slice(),g=[];for(const x of f)for(const b of d[x]){const w=b.outboundLayer;if(null!=w){for(const I of b.inputTensors)if(-1===m.indexOf(I))throw new ns(`Graph disconnected: cannot obtain value for tensor ${I} at layer "${w.name}". The following previous layers were accessed without issue: ${g}`);for(const I of b.outputTensors)m.push(I);g.push(w.name)}}this.nodesByDepth=d;const y=this.layers.map(x=>x.name);for(const x of y){const b=y.filter(w=>w===x).length;if(1!==b)throw new ns(`The name "${x}" is used ${b} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(y))}this.outboundNodes=[],this.inboundNodes=[],new Vu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map(x=>null),outputMasks:this.outputs.map(x=>null),inputShapes:this.inputs.map(x=>x.shape),outputShapes:this.outputs.map(x=>x.shape)}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const t={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const e of this.layers)t.numDisposedVariables+=e.dispose().numDisposedVariables;for(const e of this.internalContainerRefs)t.numDisposedVariables+=e.dispose().numDisposedVariables}return t.refCountAfterDispose=this._refCount,t}get trainable(){return this.trainable_}set trainable(t){this.layers.forEach(e=>{e._trainableWeights.forEach(s=>s.trainable=t)}),this.trainable_=t}get trainableWeights(){if(this._trainableWeights.length>0)throw new O("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let t=[];for(const e of this.layers)t=t.concat(e.trainableWeights);return t}get nonTrainableWeights(){const t=[];for(const e of this.layers)t.push(...e.nonTrainableWeights);if(!this.trainable){const e=[];for(const s of this.layers)e.push(...s.trainableWeights);return e.concat(t)}return t}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(t,e=!0){const s={};let r=0;for(const a of this.layers)for(const i of a.weights){if(null!=s[i.originalName])throw new O(`Duplicate weight name: ${i.originalName}`);s[i.originalName]=i,r++}const o=[];for(const a in t){let i=a;if(null==s[a]){const l=a.split("/");i=l.slice(0,-2).concat([l[l.length-1]]).join("/")}if(null!=s[i])o.push([s[i],t[a]]);else if(e)throw new O(`Provided weight data has no target variable: ${a}`);delete s[i]}if(e){const a=[];for(const i in s)a.push(i);if(a.length>0)throw new O(`${a.length} of ${r} weights are not set: ${a}`)}qp(o)}updatedConfig(){const t=this.getConfig(),e={};return e.className=this.getClassName(),e.config=t,e.kerasVersion="tfjs-layers 3.9.0",e.backend="TensorFlow.js",e}toJSON(t,e=!0){const s=nf(this.updatedConfig());return e?JSON.stringify(s):s}call(t,e){return P(()=>{t=pt(t);const s=new hr;for(let r=0;r<this.inputs.length;++r)s.add(this.inputs[r],t[r]);return xi(this.outputs,s,e)})}computeMask(t,e){return P(()=>{let s;return t=pt(t),s=null==e?zr(null,t.length):pt(e),this.runInternalGraph(t,s)[1]})}computeOutputShape(t){const e=Mu(t);if(e.length!==this.inputLayers.length)throw new O(`Invalid inputShape argument ${t}: model has ${this.inputLayers.length} tensor inputs.`);const s={};for(let i=0;i<e.length;i++)s[this.inputLayers[i].name+"_0_0"]=e[i];const r=Object.keys(this.nodesByDepth).map(i=>parseInt(i,10)).sort(Ru);if(r.length>1)for(const i of r){const l=this.nodesByDepth[i];for(const u of l){const c=u.outboundLayer;if(-1!==this.inputLayers.map(m=>m.id).indexOf(c.id))continue;const h=[];for(let m=0;m<u.inboundLayers.length;m++)h.push(s[`${u.inboundLayers[m].name}_${u.nodeIndices[m]}_${u.tensorIndices[m]}`]);const p=Mu(c.computeOutputShape(Sn(h))),f=c.inboundNodes.indexOf(u);for(let m=0;m<p.length;m++)s[`${c.name}_${f}_${m}`]=p[m]}}const o=[],a=[];for(let i=0;i<this.outputLayers.length;i++)a.push(`${this.outputLayers[i].name}_${this.outputLayersNodeIndices[i]}_${this.outputLayersTensorIndices[i]}`);for(let i=0;i<a.length;i++){const l=a[i];Wn(l in s),o.push(s[l])}return Sn(o)}runInternalGraph(t,e){null==e&&(e=zr(null,t.length));const s={};for(let l=0;l<this.inputs.length;++l)s[this.inputs[l].id]=[t[l],e[l]];const r=Object.keys(this.nodesByDepth).map(l=>parseInt(l,10)).sort(Ru);for(const l of r){const u=this.nodesByDepth[l];for(const c of u){const h=c.outboundLayer,d=c.inputTensors,p=c.outputTensors,f=new Array;for(const m of d)m.id in s&&f.push(s[m.id]);if(f.length===d.length){let g,y,x,b,m={};if(null!=c.callArgs&&(m=c.callArgs),1===f.length){const[w,I]=f[0];null==m.mask&&(m.mask=I),x=pt(h.call(w,m)),b=pt(h.computeMask(w,I)),g=[w],y=[I]}else g=f.map(w=>w[0]),y=f.map(w=>w[1]),null==m.mask&&(m.mask=y),x=pt(h.call(g,m)),b=pt(h.computeMask(g,y));if(h.activityRegularizer)throw new Re("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let w=0;w<p.length;++w)s[p[w].id]=[x[w],b[w]]}}}const o=[],a=[],i=[];for(const l of this.outputs){Wn(l.id in s,`Could not compute output ${l.name} : ${l.id}`);const[u,c]=s[l.id];i.push(u.shape),o.push(u),a.push(c)}return[o,a,i]}buildNodeConversionMap(t){const e={};let s;for(const r of this.layers){s=r instanceof gs?1:0;for(let o=0;o<r.inboundNodes.length;o++){const a=gs.nodeKey(r,o);this.containerNodes.has(a)&&(e[a]=s,s+=1)}}return e}getLayer(t,e){if(null!=e){if(this.layers.length<=e)throw new O(`Was asked to retrieve layer at index ${e}, but model only has ${this.layers.length} layer(s).`);return this.layers[e]}if(null==t)throw new O("Provide either a layer name or layer index");for(const s of this.layers)if(s.name===t)return s;throw new O(`No such layer: ${t}`)}calculateLosses(){return P(()=>{const t=[];for(const e of this.layers)for(let s=0;s<e.inboundNodes.length;++s){const r=gs.nodeKey(e,s);this.containerNodes.has(r)&&t.push(...e.calculateLosses())}return t})}getConfig(){const t={name:this.name},e=this.buildNodeConversionMap(this.layers),s=[];for(const a of this.layers){const i=a.getClassName(),l=a.getConfig(),u=[];for(let h=0;h<a.inboundNodes.length;h++){const d=a.inboundNodes[h],p=gs.nodeKey(a,h);let f={};if(this.containerNodes.has(p)){if(d.callArgs)try{JSON.stringify(d.callArgs),f=d.callArgs}catch{console.warn(`Layer ${a.name} was passed non-serializable keyword arguments: ${d.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),f={}}if(d.inboundLayers.length>0){const m=[];for(let g=0;g<d.inboundLayers.length;g++){const y=d.inboundLayers[g],b=d.tensorIndices[g];let I=e[gs.nodeKey(y,d.nodeIndices[g])];null==I&&(I=0),m.push([y.name,I,b,f])}u.push(m)}}}const c={};c.name=a.name,c.className=i,c.config=l,c.inboundNodes=u,s.push(c)}t.layers=s;const r=[];for(let a=0;a<this.inputLayers.length;a++){const i=this.inputLayers[a],u=gs.nodeKey(i,this.inputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),r.push([i.name,c,this.inputLayersTensorIndices[a]])}t.inputLayers=r;const o=[];for(let a=0;a<this.outputLayers.length;a++){const i=this.outputLayers[a],u=gs.nodeKey(i,this.outputLayersNodeIndices[a]);if(!this.containerNodes.has(u))continue;let c=e[u];null==c&&(c=0),o.push([i.name,c,this.outputLayersTensorIndices[a]])}return t.outputLayers=o,t}static fromConfig(t,e,s={},r=!1){const o={},a={};function i(g,y){g.name in a?a[g.name].push(y):a[g.name]=[y]}function l(g,y){const x=[];let b;for(const w of y){const I=w[0],k=w[1],S=w[2];if(b=null==w[3]?{}:w[3],!(I in o))return void i(g,y);const T=o[I];if(T.inboundNodes.length<=k)return void i(g,y);x.push(T.inboundNodes[k].outputTensors[S])}x.length>0&&g.apply(Sn(x),b)}function u(g){const y=g.name,x=Us(g,null!=e.customObjects?e.customObjects:{});x.setFastWeightInitDuringBuild(r),o[y]=x,g.inboundNodes.forEach(w=>{if(!(w instanceof Array))throw new O(`Corrupted configuration, expected array for nodeData: ${w}`);i(x,w)})}const c=e.name,h=e.layers;for(const g of h)u(g);for(;!U$(a);)for(const g of h){const y=o[g.name];if(y.name in a){const x=a[y.name];delete a[y.name];for(const b of x)l(y,b)}}const d=[],p=[],f=e.inputLayers;for(const g of f){const y=g[0],x=g[1],b=g[2];Wn(y in o),d.push(o[y].inboundNodes[x].outputTensors[b])}const m=e.outputLayers;for(const g of m){const y=g[0],x=g[1],b=g[2];Wn(y in o),p.push(o[y].inboundNodes[x].outputTensors[b])}return new t({inputs:d,outputs:p,name:c})}get stateful(){if(this._stateful)throw new O("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const t of this.layers)if(t.stateful)return!0;return!1}resetStates(){P(()=>{this.layers.forEach(t=>{t.stateful&&t.resetStates()})})}}function zx(n,t){return function Px(n,t,e){const s=t.length;if(null==n||Array.isArray(n)&&0===n.length)return t.map(r=>null);if(1===s)return Array.isArray(n)&&1===n.length?n:"object"==typeof n&&t[0]in n?[n[t[0]]]:[n];if(Array.isArray(n)){if(n.length!==s)throw new Error(`Provided ${e} is an array of ${n.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return n}if("object"==typeof n&&Object.keys(n).length>0&&"object"==typeof n[Object.keys(n)[0]]){const r=[];return t.forEach(o=>{r.push(o in n?n[o]:null)}),r}throw new Error(`The model has multiple (${s}) outputs, so ${e} must be either an array with ${s} elements or an object with ${t} keys. Provided ${e} not understood: ${JSON.stringify(n)}`)}(n,t,"classWeight")}function Mx(n,t,e,s){return of.apply(this,arguments)}function of(){return(of=L(function*(n,t,e,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=e){const r=P(()=>{if(1===n.shape.length)return tr(n);if(2===n.shape.length){if(n.shape[1]>1)return Er(n,1);if(1===n.shape[1])return F(n,[n.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${n.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${n.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)}),o=Array.from(yield r.data());ze(r);const a=[];return o.forEach(i=>{if(null==e[i])throw new Error(`classWeight must contain all classes in the training data. The class ${i} exists in the data but not in classWeight`);a.push(e[i])}),gn(a,"float32")}return null})).apply(this,arguments)}function s2(n,t){return R(n,t)}const r2=32;function Bx(n,t){let e,s;e=t.xs,s=t.ys,C(null!=e&&null!=s,()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`);const o=Vx("input",n.inputNames,e),a=Vx("output",n.outputNames,s),i=o[0].shape[0];C(o.length===n.inputs.length,()=>`LayersModel has ${n.inputs.length} inputs, but the dataset provides ${o.length} inputs.  (Expected input keys: ${JSON.stringify(n.inputNames)})`),C(a.length===n.outputs.length,()=>`LayersModel has ${n.outputs.length} outputs, but the dataset provides ${a.length} outputs.  (Expected output keys: ${JSON.stringify(n.outputNames)})`);for(let l=0;l<o.length;l++)C(o[l].shape[0]===i,()=>`Batch size mismatch: input ${n.inputNames[l]} has ${o[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);for(let l=0;l<a.length;l++)C(a[l].shape[0]===i,()=>`Batch size mismatch: output ${n.outputNames[l]} has ${a[l].shape[0]}; expected  ${i} based on input ${n.inputNames[0]}.`);return{xs:o,ys:a}}function Vx(n,t,e){if(e instanceof Tt)return[e];if(Array.isArray(e))return C(e.length===t.length,()=>`Received an array of ${e.length} Tensors, but expected ${t.length} to match the ${n} keys ${t}.`),e;{const s=[];for(const r of t){if(null==e[r])throw new O(`The feature data generated by the dataset lacks the required ${n} key '${r}'.`);s.push(e[r])}return s}}function af(){return(af=L(function*(n,t,e){const s=null!=e.batchesPerEpoch;if(C(null!=n.optimizer,()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig)."),C(null!=e,()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call."),C(null!=e.epochs&&e.epochs>0&&Number.isInteger(e.epochs),()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${e.epochs}`),C(!s||e.batchesPerEpoch>0&&Number.isInteger(e.batchesPerEpoch),()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${e.batchesPerEpoch}`),C(null==e.validationSplit,()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead."),n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");n.isTraining=!0;try{const r=null!=e.validationData;let o,a;if(r)if(Wx(e.validationData))C(null==e.validationBatches||e.validationBatches>0&&Number.isInteger(e.validationBatches),()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${e.validationBatches}`);else{const g=function o2(n){if(3===n.length)throw new Re("Validation with sample weights is not implemented yet.");return{xs:n[0],ys:n[1]}}(e.validationData);o=g.xs,a=g.ys}const i=n.makeTrainFunction(),l=n.getDedupedMetricsNames();let u;u=r?l.slice().concat(l.map(g=>"val_"+g)):l.slice();const c=kx(e.callbacks,e.yieldEvery),h=null==e.verbose?1:e.verbose,{callbackList:d,history:p}=Nx(c,h,e.epochs,null,null,function i2(n,t){let e=null;return null!=t.batchesPerEpoch?e=t.batchesPerEpoch:Number.isFinite(n.size)&&(e=n.size),e}(t,e),null,r,u);d.setModel(n),n.history=p,yield d.onTrainBegin(),n.stopTraining_=!1;let f=null==e.initialEpoch?0:e.initialEpoch,m=yield t.iterator();for(;f<e.epochs;){const g={};yield d.onEpochBegin(f);let y=0,x=0;for(s||(m=yield t.iterator());!s||y<e.batchesPerEpoch;){const b=yield m.next();if(s&&b.done){console.warn(`You provided \`batchesPerEpoch\` as ${e.batchesPerEpoch}, but your dataset iterator ran out of data after ${y} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, ${e.batchesPerEpoch*e.epochs} batches). You may need to use the repeat() function when building your dataset.`);break}if(null!=b.value){const{xs:w,ys:I}=Bx(n,b.value),k={};k.batch=x,k.size=w[0].shape[0],yield d.onBatchBegin(x,k);const S=[];if(null!=e.classWeight){const E=zx(e.classWeight,n.outputNames);for(let M=0;M<E.length;++M)S.push(yield Mx(I[M],null,E[M]))}const T=w.concat(I).concat(S),_=i(T);ze(T);for(let E=0;E<l.length;++E){const B=_[E];k[l[E]]=B,ln(B)}yield d.onBatchEnd(x,k),Cx(k),x++,y++}if(s?y>=e.batchesPerEpoch:b.done){if(r){let w;w=Wx(e.validationData)?pt(yield n.evaluateDataset(e.validationData,{batches:e.validationBatches})):pt(n.evaluate(o,a,{batchSize:null==e.validationBatchSize?r2:e.validationBatchSize,verbose:0}));for(let I=0;I<n.metricsNames.length;++I)g[`val_${n.metricsNames[I]}`]=w[I]}break}if(n.stopTraining_)break}if(yield d.onEpochEnd(f,g),f++,n.stopTraining_)break}return yield d.onTrainEnd(),yield n.history.syncData(),n.history}finally{n.isTraining=!1}})).apply(this,arguments)}function Wx(n){return"function"==typeof n.iterator}function lf(){return(lf=L(function*(n,t,e){const s=null!=(e=e||{}).batches,r=n.testFunction;let o=[];if(e.verbose>0)throw new Re("Verbose mode is not implemented yet.");C(!s||e.batches>0&&Number.isInteger(e.batches),()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(e.batches)}`);const a=function l2(n){return"function"==typeof n.next}(t)?t:yield t.iterator();let i=0,l=0;for(;!s||l<e.batches;){const u=yield a.next();if(o=P(()=>{if(u.value){const{xs:c,ys:h}=Bx(n,u.value),d=c.concat(h),p=P(()=>r(d));if(ze(d),0===l)for(let m=0;m<p.length;++m)o.push(Ne(0));const f=d[0].shape[0];for(let m=0;m<p.length;++m){const g=p[m],y=o[m];o[m]=P(()=>se(o[m],R(f,g))),l>0&&ze(y)}ze(p),i+=f,++l}return o}),u.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${e.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let u=0;u<o.length;++u){const c=o[u];o[u]=ke(o[u],i),ze(c)}return Sn(o)})).apply(this,arguments)}function uf(n){C(n>0&&Number.isInteger(n),()=>`batchSize is required to be a positive integer, but got ${n}`)}function bi(n,t,e){return null==n?[null]:Array.isArray(n)?n.map(s=>Wr(s,t,e-t)):Wr(n,t,e-t)}function cf(n,t){return P(()=>null==n?null:Array.isArray(n)?n.map(e=>cf(e,t)):ux(n,"int32"===t.dtype?t:ue(t,"int32")))}function hf(n,t){const e=[];let s=0,r=null;for(;s<n;)r=s+t,r>=n&&(r=n),e.push([s,r]),s=r;return e}function df(){return(df=L(function*(n,t,e,s,r,o,a,i,l,u,c,h,d,p,f){null==r&&(r=32),null==o&&(o=1),null==c&&(c=!0),null==d&&(d=0);let m=!1;if(null!=l&&null!=u&&(m=!0),null!=f&&(m=!0,null==p))throw new O("Can only use `validationSteps` when doing step-wise training, i.e., `stepsPerEpoch` must be set.");const g=n.checkNumSamples(e,r,p,"steps_per_epoch");let y;null!=g&&(y=fs(0,g)),null==a&&(a=1);const{callbackList:x,history:b}=Nx(i,a,o,d,g,p,r,m,h);x.setModel(n),n.history=b,yield x.onTrainBegin(),n.stopTraining_=!1;for(let w=d;w<o;++w){yield x.onEpochBegin(w);const I={};if(null!=p)throw new Re("stepsPerEpoch mode is not implemented yet.");{if("batch"===c)throw new Re("batch shuffling is not implemneted yet");c&&Zt(y);const k=gn(y),S=hf(g,r);for(let T=0;T<S.length;++T){const _={};if(yield x.onBatchBegin(T,_),P(()=>{const E=S[T][0],M=S[T][1],B=Wr(k,E,M-E);_.batch=T,_.size=M-E;const V=cf(e,B),j=t(V);for(let G=0;G<s.length;++G){const Z=j[G];_[s[G]]=Z,ln(Z)}if(T===S.length-1&&m){const G=n.testLoop(l,u,r);for(let W=0;W<s.length;++W){const Z=s[W],K=G[W];ln(K),I["val_"+Z]=K}}}),yield x.onBatchEnd(T,_),Cx(_),n.stopTraining_)break}k.dispose()}if(yield x.onEpochEnd(w,I),n.stopTraining_)break}return yield x.onTrainEnd(),yield n.history.syncData(),n.history})).apply(this,arguments)}function pf(){return pf=L(function*(n,t,e,s={}){if(n.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let r,o,a,i,l,u,c;n.isTraining=!0;try{const h=null==s.batchSize?32:s.batchSize;uf(h);const d=!1,p=yield n.standardizeUserData(t,e,s.sampleWeight,s.classWeight,d,h);r=p[0],o=p[1],c=p[2];let m,f=!1;if(null!=s.validationData&&s.validationData.length>0){if(f=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Re("validationData including sample weights is not supported yet."):new O(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);a=s.validationData[0],i=s.validationData[1];const S=!0,T=yield n.standardizeUserData(a,i,null,null,S,h);l=T[0],u=T[1],m=l.concat(u)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){f=!0;const S=Math.floor(r[0].shape[0]*(1-s.validationSplit)),T=r[0].shape[0];l=bi(r,S,T),r=bi(r,0,S),u=bi(o,S,T),o=bi(o,0,S),m=l.concat(u)}else null!=s.validationSteps&&(f=!0);const g=r.concat(o).concat(c);n.checkTrainableWeightsConsistency();const y=n.makeTrainFunction(),x=n.getDedupedMetricsNames();let b,w;f?(n.makeTestFunction(),b=n.testFunction,w=x.slice().concat(x.map(S=>"val_"+S))):(b=null,m=[],w=x.slice());const I=kx(s.callbacks,s.yieldEvery);return yield function c2(n,t,e,s,r,o,a,i,l,u,c,h,d,p,f){return df.apply(this,arguments)}(n,y,g,x,h,s.epochs,s.verbose,I,b,m,s.shuffle,w,s.initialEpoch,null,null)}finally{n.isTraining=!1,Ur(r,t),Ur(o,e),Ur(l,a),Ur(u,i),null!=c&&ze(c)}}),pf.apply(this,arguments)}function Ux(n){const t=[];n instanceof Tt&&(n=[n]);for(let e=0;e<n.length;++e){const s=n[e];if(1===s.rank)t.push(fi(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Ur(n,t){if(null==n)return;const e=[];if(t instanceof Tt)e.push(t.id);else if(Array.isArray(t))t.forEach(r=>e.push(r.id));else if(null!=t)for(const r in t)e.push(t[r].id);const s=[];if(n instanceof Tt)-1===e.indexOf(n.id)&&s.push(n);else if(Array.isArray(n))n.forEach(r=>{-1===e.indexOf(r.id)&&s.push(r)});else if(null!=n)for(const r in n){const o=n[r];-1===e.indexOf(o.id)&&s.push(o)}s.forEach(r=>{r.isDisposed||r.dispose()})}function ff(n){return Array.isArray(n)}function Gx(n){return!function d2(n){return n instanceof Tt}(n)&&!ff(n)}function Hx(n,t,e,s=!0,r=""){if(null==t||0===t.length){if(null!=n){let a=!1;if(ff(n)&&n.length>0)a=!0;else if(Gx(n)){for(const i in n)if(n.hasOwnProperty(i)){a=!0;break}}else a=!0;if(a)throw new O(`Error when checking model ${r} expected no data, but got ${n}`)}return[]}if(null==n)return t.map(a=>null);let o;if(Gx(n)){o=[];for(const a of t){if(null==n[a])throw new O(`No data provided for "${a}". Need data for each key in: ${t}`);o.push(n[a])}}else if(ff(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${n}`);o=n}else{if(t.length>1)throw new O(`The model ${r} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${n.shape}`);o=[n]}if(o=Ux(o),null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s). but got array with shape ${i.shape}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c>=0&&i.shape[l]!==c)throw new O(`${r} expected a batch of elements where each example has shape [${e[a].slice(1,e[a].length)}] (i.e.,tensor shape [*,${e[a].slice(1,e[a].length)}]) but the ${r} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return o}function jx(n,t,e,s=!0,r=""){let o;if(Array.isArray(n)){if(n.length!==t.length)throw new O(`Error when checking model ${r}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${n.length} Tensors(s).`);o=n}else{if(t.length>1)throw new O(`The model expects ${t.length} ${r} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(n.shape)}.`);o=[n]}if(null!=e)for(let a=0;a<t.length;++a){if(null==e[a])continue;const i=o[a];if(i.shape.length!==e[a].length)throw new O(`Error when checking ${r}: expected ${t[a]} to have ${e[a].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let l=0;l<e[a].length;++l){if(0===l&&!s)continue;const c=e[a][l];if(null!=c&&c!==i.shape[l])throw new O(`Error when checking ${r}: expected ${t[a]} to have shape ${JSON.stringify(e[a])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}let ko=(()=>{class n extends gs{constructor(e){super(e),this.isTraining=!1}summary(e,s,r=console.log){if(!this.built)throw new O("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function q_(n,t,e,s=console.log){const r=function Y_(n){let t=!0;const e=[],s=[];for(const r in n.nodesByDepth)e.push(n.nodesByDepth[r]);for(const r of e){if(r.length>1||1===r.length&&r[0].inboundLayers.length>1){t=!1;break}s.push(...r)}if(t)for(const r of n.layers){let o=!1;for(const a of r.inboundNodes)if(-1!==s.indexOf(a)){if(o){t=!1;break}o=!0}if(!t)break}return t}(n),o=["Layer (type)","Output shape","Param #"];let a;if(r?(t=t||65,e=e||[.45,.85,1]):(t=t||98,e=e||[.33,.55,.67,1]),e[e.length-1]<=1&&(e=e.map(c=>Math.floor(t*c))),!r){o.push("Receives inputs"),a=[];for(const c in n.nodesByDepth)a.push(...n.nodesByDepth[c])}s("_".repeat(t)),Yu(o,e,s),s("=".repeat(t));const i=n.layers;for(let c=0;c<i.length;++c)r?Z_(i[c],e,s):J_(i[c],e,a,s),s((c===i.length-1?"=":"_").repeat(t));n.checkTrainableWeightsConsistency();const l=function X_(n){let t;return t=Bu(null!=n.collectedTrainableWeights?n.collectedTrainableWeights:n.trainableWeights),t}(n),u=Bu(n.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,s,r)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function K_(n){const t={Adagrad:()=>wo.adagrad(.01),Adadelta:()=>wo.adadelta(1,.95,jt()),Adam:()=>wo.adam(.001,.9,.999,jt()),Adamax:()=>wo.adamax(.002,.9,.999,jt(),0),RMSProp:()=>wo.rmsprop(.001,.9,0,jt()),SGD:()=>wo.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,n in t)return t[n]();throw new O(`Unknown Optimizer ${n}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof nr))throw new O("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let s=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new O(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);s=e.loss.map(l=>Jp(l))}else{const i=Jp(e.loss);this.outputs.forEach(l=>{s.push(i)})}else{e.loss=e.loss;for(const i in e.loss)if(-1===this.outputNames.indexOf(i))throw new O(`Unknown entry in loss dictionary: "${i}". Only expected the following keys: ${this.outputNames}`);for(const i of this.outputNames)null==e.loss[i]&&console.warn(`Output "${i}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${i} during training`),s.push(Jp(e.loss[i]))}this.lossFunctions=s,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let i=0;i<this.outputs.length;++i){const l=this.internalOutputShapes[i];this.feedOutputNames.push(this.outputNames[i]),this.feedOutputShapes.push(l),this.feedLossFns.push(this.lossFunctions[i])}const r=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],Vr("loss",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&this.outputs.length>1&&(this.metricsTensors.push([this.lossFunctions[i],i]),this.metricsNames.push(this.outputNames[i]+"_loss"))});const o=function m2(n,t){if(null==n||Array.isArray(n)&&0===n.length)return t.map(s=>[]);let e;if("string"==typeof n||"function"==typeof n)e=[n];else{if(!Array.isArray(n)&&"object"!=typeof n)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${n}`);e=n}if(Array.isArray(e))return t.map(s=>e);{const s=[];for(const r of t){let o=e.hasOwnProperty(r)?e[r]:[];Array.isArray(o)||(o=[o]),s.push(o)}return s}}(e.metrics,this.outputNames),a=(i,l,u)=>{this.outputNames.length>1&&(l=this.outputNames[i]+"_"+l),this.metricsNames.push(l),this.metricsTensors.push([u,i])};Vr("metric",()=>{for(let i=0;i<this.outputs.length;++i)-1===r.indexOf(i)&&(c=>{let d,p,f;for(const m of c){if("string"==typeof m&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(m)){const y=this.internalOutputShapes[i];let x;1===y[y.length-1]||this.lossFunctions[i]===ju?-1!==["accuracy","acc"].indexOf(m)?p=Tx:-1!==["crossentropy","ce"].indexOf(m)&&(p=P_):this.lossFunctions[i]===Hu?-1!==["accuracy","acc"].indexOf(m)?p=z_:-1!==["crossentropy","ce"].indexOf(m)&&(p=Ax):-1!==["accuracy","acc"].indexOf(m)?p=$x:-1!==["crossentropy","ce"].indexOf(m)&&(p=Ex),-1!==["accuracy","acc"].indexOf(m)?x="acc":-1!==["crossentropy","ce"].indexOf(m)&&(x="ce"),f=p,d=""+x}else f=j_(m),d=""+Xu(m);let g;Vr(d,()=>{g=f}),a(i,d,g)}})(o[i])}),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,s,r={}){const o=null==r.batchSize?32:r.batchSize;uf(o);const i=this.standardizeUserDataXY(e,s,!0,o);try{const l=i[0].concat(i[1]);return this.makeTestFunction(),Sn(this.testLoop(this.testFunction,l,o,r.verbose,r.steps))}finally{Ur(i[0],e),Ur(i[1],s)}}evaluateDataset(e,s){var r=this;return L(function*(){return r.makeTestFunction(),function u2(n,t,e){return lf.apply(this,arguments)}(r,e,s)})()}checkNumSamples(e,s,r,o="steps"){let a;if(null!=r){if(a=null,null!=s)throw new O(`If ${o} is set, batchSize must be null or undefined.Got batchSize = ${s}`)}else{if(null==e)throw new O(`Either the input data should have a defined shape, or ${o} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,s){if(Array.isArray(s)&&0===s.length)throw new O("`outputs` is an empty Array, which is not allowed.");const r=Array.isArray(s),a=this.retrieveSymbolicTensors(r?s:[s]),i=new hr;if(e instanceof Tt&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new O(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let u=0;u<this.inputs.length;++u)i.add(this.inputs[u],e[u])}else for(const u of this.inputs){const c=e[u.name];if(null==c)throw new O(`No value is provided for the model's input ${u.name}`);i.add(u,c)}const l=xi(a,i);return r?l:l[0]}retrieveSymbolicTensors(e){const s=zr(null,e.length);let r=e.length;for(const o of this.layers){const a=Array.isArray(o.output)?o.output:[o.output],i=a.map(l=>l.name);for(let l=0;l<e.length;++l){const u=i.indexOf(e[l]);if(-1!==u&&(s[l]=a[u],r--),0===r)break}if(0===r)break}if(r>0){const o=[];throw s.forEach((a,i)=>{null==a&&o.push(e[i])}),new O(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(o)}`)}return s}predictLoop(e,s=32,r=!1){return P(()=>{const o=this.checkNumSamples(e);if(r)throw new Re("Verbose predictLoop() is not implemented yet.");const a=hf(o,s),i=this.outputs.map(l=>[]);for(let l=0;l<a.length;++l)P(()=>{const d=bi(e,a[l][0],a[l][1]),p=[];if(Array.isArray(d))for(let m=0;m<d.length;++m)p.push({key:this.inputs[m],value:d[m]});else p.push({key:this.inputs[0],value:d});const f=new hr(p);return xi(this.outputs,f)}).forEach((c,h)=>i[h].push(c));return Sn(i.map(l=>Ut(l,0)))})}predict(e,s={}){const r=Ux(e);jx(r,this.inputNames,this.feedInputShapes,!1);try{const o=null==s.batchSize?32:s.batchSize;return uf(o),this.predictLoop(r,o)}finally{Ur(r,e)}}predictOnBatch(e){jx(e,this.inputNames,this.feedInputShapes,!0);const s=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,s)}standardizeUserDataXY(e,s,r=!0,o){if(null==this.optimizer_)throw new ns("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let i=0;i<this.feedOutputShapes.length;++i){const l=this.feedOutputShapes[i];a.push(this.feedLossFns[i]===Hu?l.slice(0,l.length-1).concat([1]):l)}if(function p2(n,t,e){const s=ir(n.map(o=>o.shape[0]));s.sort();const r=ir(t.map(o=>o.shape[0]));if(r.sort(),s.length>1)throw new O(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(n.map(o=>o.shape))}`);if(r.length>1)throw new O(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map(o=>o.shape))}`);if(s.length>0&&r.length>0&&!je(s,r))throw new O(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${r[0]} target sample(s).`)}(e=Hx(e,this.feedInputNames,this.feedInputShapes,!1,"input"),s=Hx(s,this.feedOutputNames,a,!1,"target")),function f2(n,t,e){const s=[Gu,ju,yi];for(let r=0;r<n.length;++r){const o=n[r],a=t[r],i=e[r];if(null!=a){if(a===yi&&1===o.shape[o.shape.length-1])throw new O(`You are passing a target array of shape ${o.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(a)){const l=o.shape.slice(1),u=i.slice(1);for(let c=0;c<l.length;++c){const d=u[c];if(null!=d&&l[c]!==d)throw new O(`A target Tensor with shape ${o.shape} was passed for an output of shape ${i}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(s,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=o&&o>0&&e[0].shape[0]%o!=0)throw new O(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${o}. Found: ${e[0].shape[0]} sample(s).`);return[e,s]}standardizeUserData(e,s,r,o,a=!0,i){var l=this;return L(function*(){const[u,c]=l.standardizeUserDataXY(e,s,a,i);if(null!=r)throw new Error("sample weight is not supported yet.");let h=null;if(null!=o){const d=zx(o,l.outputNames);h=[];for(let p=0;p<d.length;++p)h.push(yield Mx(c[p],null,d[p]))}return[u,c,h]})()}testLoop(e,s,r,o=0,a){return P(()=>{const i=this.checkNumSamples(s,r,a,"steps"),l=[];if(o>0)throw new Re("Verbose mode is not implemented yet.");if(null!=a)throw new Re("steps mode in testLoop() is not implemented yet");{const u=hf(i,r),c=gn(fs(0,i));for(let h=0;h<u.length;++h){const d=u[h][0],p=u[h][1],f=Wr(c,d,p-d),m=cf(s,f),g=e(m);if(0===h)for(let y=0;y<g.length;++y)l.push(Ne(0));for(let y=0;y<g.length;++y)l[y]=se(l[y],R(p-d,g[y]))}for(let h=0;h<l.length;++h)l[h]=ke(l[h],i)}return l})}getDedupedMetricsNames(){const e=this.metricsNames,s=[];for(let r=0;r<e.length;++r){const o=e[r];let a=o;Zy(e,o)>1&&(a+=`_${Zy(e.slice(0,r),o)}`),s.push(a)}return s}makeTrainFunction(){return e=>{const s=[],r=e.slice(0,this.inputs.length),o=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),i=[],u=this.collectedTrainableWeights.map(d=>d.read());return[this.optimizer_.minimize(()=>{const d=[];for(let g=0;g<this.inputs.length;++g)d.push({key:this.inputs[g],value:r[g]});const p=new hr(d),f=xi(this.outputs,p,{training:!0});let m;for(let g=0;g<this.lossFunctions.length;++g){let x=(0,this.lossFunctions[g])(o[g],f[g]);null!=a[g]&&(x=s2(x,a[g]));const b=_t(x);s.push(b),m=0===g?x:se(m,x)}for(let g=0;g<this.metricsTensors.length;++g){let y;if(this.outputs.length>1&&g<this.outputs.length)y=s[g];else{const b=this.metricsTensors[g][1];y=_t((0,this.metricsTensors[g][0])(o[b],f[b]))}ln(y),i.push(y)}return m=_t(m),this.calculateLosses().forEach(g=>{m=se(m,g)}),m},!0,u)].concat(i)}}makeTestFunction(){this.testFunction=e=>P(()=>{const s=[];let r;const o=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),i=[];for(let c=0;c<this.inputs.length;++c)i.push({key:this.inputs[c],value:o[c]});const l=new hr(i),u=xi(this.outputs,l);for(let c=0;c<this.lossFunctions.length;++c){const d=_t((0,this.lossFunctions[c])(a[c],u[c]));r=0===c?d:se(r,d),s.push(r)}for(let c=0;c<this.metricsTensors.length;++c){const d=this.metricsTensors[c][1],p=_t((0,this.metricsTensors[c][0])(a[d],u[d]));s.push(p)}return s})}fit(e,s,r={}){var o=this;return L(function*(){return function h2(n,t,e){return pf.apply(this,arguments)}(o,e,s,r)})()}fitDataset(e,s){var r=this;return L(function*(){return function a2(n,t,e){return af.apply(this,arguments)}(r,e,s)})()}trainOnBatch(e,s){var r=this;return L(function*(){const o=yield r.standardizeUserData(e,s),a=o[0],i=o[1],u=r.makeTrainFunction()(a.concat(i)),c=[];for(const h of u){const d=yield h.data();c.push(d[0])}return ze(u),Sn(c)})()}getNamedWeights(e){const s=[],r=null!=e&&e.trainableOnly,o=r?this.trainableWeights:this.weights,a=this.getWeights(r);for(let i=0;i<o.length;++i)r&&!o[i].trainable||s.push({name:o[i].originalName,tensor:a[i]});return s}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const s=xd().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=s-xd().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Ws(this.loss);else if(Array.isArray(this.loss)){for(const s of this.loss)if("string"!=typeof s)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map(s=>Ws(s))}else{const s=Object.keys(this.loss);e={};const r=this.loss;for(const o of s){if("string"!=typeof r[o])throw new Error("Serialization of non-string loss is not supported.");e[o]=Ws(r[o])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Ws(Xu(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map(e=>Ws(Xu(e)));{const e={};for(const s in this.metrics)e[s]=Ws(Xu(this.metrics[s]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const r=Us(ef(e.optimizer_config));let o,a;if("string"==typeof e.loss)o=Mr(e.loss);else if(Array.isArray(e.loss))o=e.loss.map(i=>Mr(i));else if(null!=e.loss){o={};for(const i in e.loss)o[i]=Mr(e.loss[i])}if(Array.isArray(e.metrics))a=e.metrics.map(i=>Mr(i));else if(null!=e.metrics){a={};for(const i in e.metrics)a[i]=Mr(e.metrics[i])}this.compile({loss:o,metrics:a,optimizer:r})}save(e,s){var r=this;return L(function*(){if("string"==typeof e){const h=ug(e);if(0===h.length)throw new O(`Cannot find any save handlers for URL '${e}'`);if(h.length>1)throw new O(`Found more than one (${h.length}) save handlers for URL '${e}'`);e=h[0]}if(null==e.save)throw new O("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const o=yield sg(r.getNamedWeights(s)),u={modelTopology:r.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.9.0",convertedBy:null};if(null!=s&&s.includeOptimizer&&null!=r.optimizer){u.trainingConfig=r.getTrainingConfig();const h="optimizer",{data:d,specs:p}=yield sg(yield r.optimizer.getWeights(),h);o.specs.push(...p),o.data=Zh([o.data,d])}return null!=r.userDefinedMetadata&&(Rx(r.userDefinedMetadata,r.name,!0),u.userDefinedMetadata=r.userDefinedMetadata),u.weightData=o.data,u.weightSpecs=o.specs,e.save(u)})()}setUserDefinedMetadata(e){Rx(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}return n.className="Model",n})();ee(ko),ee((()=>{class n extends ko{}return n.className="Functional",n})()),ee((()=>{class n extends ko{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:zu("sequential_"),null!=e.layers)for(const s of e.layers)this.add(s)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some(r=>r<0))throw new O(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const s=e instanceof n||e instanceof ko;let r;if(s){if(r=e,1!==r.outputs.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==r.inputs.length)throw new O("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new O("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const o=function b_(n){if(null==n.batchShape&&null==n.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=n.batchShape&&null!=n.shape)throw new O("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=n.batchShape;null!=n.shape&&null==t&&(t=[null].concat(n.shape));let e=n.dtype;return null==e&&(e="float32"),new Wu({batchInputShape:t,name:n.name,dtype:e,sparse:n.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(o)}if(s)this.outputs=r.outputs,this.inputs=r.inputs;else{if(1!==e.inboundNodes.length)throw new O(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new O("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Ix(this.outputs[0])}this.inboundNodes=[],new Vu({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:zr(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map(o=>o.shape),outputShapes:this.outputs[0].shape})}else{const o=e.apply(this.outputs[0]);if(Array.isArray(o))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[o],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,s){return null==this.model&&this.build(),this.model.call(e,s)}build(e){if(at(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new ko({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,s,r=console.log){this.built||this.build(),super.summary(e,s,r)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,s,r={}){if(!this.built)throw new ns("The model needs to be compiled before being used.");return this.model.evaluate(e,s,r)}evaluateDataset(e,s){var r=this;return L(function*(){if(!r.built)throw new ns("The model needs to be compiled before being used.");return r.model.evaluateDataset(e,s)})()}predict(e,s={}){return null==this.model&&this.build(),this.model.predict(e,s)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}fit(e,s,r={}){var o=this;return L(function*(){if(!o.built)throw new ns("The model needs to be compiled before being used.");return o.model.fit(e,s,r)})()}fitDataset(e,s){var r=this;return L(function*(){if(!r.built)throw new ns("The model needs to be compiled before being used.");return r.model.fitDataset(e,s)})()}trainOnBatch(e,s){var r=this;return L(function*(){return r.model.trainOnBatch(e,s)})()}static fromConfig(e,s,r={},o=!1){let a,i={};if(s instanceof Array){if(null==s[0].className||"Merge"===s[0].className)throw new O("Legacy serialization format not supported yet.");a=s}else C(null!=s.layers,()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field."),a=s.layers,delete s.layers,i=s;const l=new e(i);if(!(l instanceof n))throw new Re(`Sequential.fromConfig called on non-Sequential input: ${l}`);for(const u of a){const h=Us(u,void 0,o);o&&h.setFastWeightInitDuringBuild(!0),l.add(h)}return l}set stopTraining(e){if(null==this.model)throw new O("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new O("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const s of this.layers){const r={};r.className=s.getClassName(),r.config=s.getConfig(),e.push(r)}return{name:this.name,layers:e}}}return n.className="Sequential",n})());class Tn extends ho{getConfig(){return{}}}ee((()=>{class n extends Tn{apply(e,s=1){return function o_(n,t=1){if(1!==t)throw new Re(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return Za(n)}(e,s)}}return n.className="elu",n})()),ee((()=>{class n extends Tn{apply(e){return Rd(e)}}return n.className="selu",n})()),ee((()=>{class n extends Tn{apply(e){return ks(e)}}return n.className="relu",n})()),ee((()=>{class n extends Tn{apply(e){return P(()=>ti(6,ks(e)))}}return n.className="relu6",n})()),ee((()=>{class n extends Tn{apply(e){return e}}return n.className="linear",n})()),ee((()=>{class n extends Tn{apply(e){return Rr(e)}}return n.className="sigmoid",n})()),ee((()=>{class n extends Tn{apply(e){return function i_(n){return P(()=>{const t=se(.5,R(.2,n));return _n(t,0,1)})}(e)}}return n.className="hardSigmoid",n})()),ee((()=>{class n extends Tn{apply(e){return xo(e)}}return n.className="softplus",n})()),ee((()=>{class n extends Tn{apply(e){return function a_(n){return P(()=>ke(n,se(Wt(n),1)))}(e)}}return n.className="softsign",n})()),ee((()=>{class n extends Tn{apply(e){return pu(e)}}return n.className="tanh",n})());let Kx=(()=>{class n extends Tn{apply(e,s=-1){return du(e,s)}}return n.className="softmax",n})();function dr(n){return n.getClassName()}function xf(n,t={}){return hi(n,Zn.getMap().classNameMap,t,"activation")}function pr(n){if(null==n){return xf({className:"linear",config:{}})}if("string"==typeof n){const t={};return t.className=n,t.config={},xf(t)}return n instanceof Tn?n:xf(n)}ee(Kx),ee((()=>{class n extends Tn{apply(e,s=-1){return Sd(e,s)}}return n.className="logSoftmax",n})()),ee((()=>{class n extends Tn{apply(e,s=1){return P(()=>R(Rr(R(e,s)),e))}}return n.className="swish",n})()),ee((()=>{class n extends Tn{apply(e){return P(()=>R(e,pu(xo(e))))}}return n.className="mish",n})());class qx extends ho{}ee((()=>{class n extends qx{constructor(e){super(),function bf(n){if(null!=n&&"object"!=typeof n)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${n}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return P(()=>{let s=Ht([1]);return this.hasL1&&(s=se(s,we(R(this.l1,Wt(e))))),this.hasL2&&(s=se(s,we(R(this.l2,mi(e))))),F(s,[])})}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,s){return new e({l1:s.l1,l2:s.l2})}}return n.className="L1L2",n})());const Xx={l1l2:"L1L2"};function ct(n){return zp(n)}function Yx(n,t={}){return hi(n,Zn.getMap().classNameMap,t,"regularizer")}function vt(n){return null==n?null:"string"==typeof n?Yx({className:n in Xx?Xx[n]:n,config:{}}):n instanceof qx?n:Yx(n)}function No(n,t,e){if("number"==typeof n)return zr(n,t);if(n.length!==t)throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${n.length} elements.`);for(let s=0;s<t;++s){const r=n[s];if(!Q$(r))throw new O(`The ${e} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(n)} including a non-integer number ${r}`)}return n}function ys(n,t,e,s,r=1){if(null==n)return n;let a;return a="same"===e?n:n-(t+(t-1)*(r-1))+1,Math.floor((a+s-1)/s)}function Es(n,t,e,s){if(null==n)return null;if("valid"===s)n=n*t+ur([e-t,0]);else{if("same"!==s)throw new O(`Unsupport padding mode: ${s}.`);n*=t}return n}function vf(n,t){return P(()=>(Rt(t),"channelsFirst"===t?qe(n,[0,2,3,1]):n))}function Zx(n,t){return P(()=>(Rt(t),"channelsFirst"===t?qe(n,[0,2,3,4,1]):n))}function If(n,t,e,s=[1,1],r="valid",o,a,i=null){return P(()=>{if(null==o&&(o="channelsLast"),Rt(o),3!==n.rank&&4!==n.rank)throw new O(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${n.rank}.`);if(3!==t.rank&&4!==t.rank)throw new O(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${n.rank}.`);let l=vf(n,o);if("causal"===r)throw new Re("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=jg({x:l,filter:t,strides:s,pad:"same"===r?"same":"valid",dilations:a,dataFormat:"NHWC",bias:e,activation:i}),"channelsFirst"===o&&(l=qe(l,[0,3,1,2])),l})}ee((()=>{class n extends Xe{constructor(e){super(e??{}),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,s){e=Oe(e);let r=ks(e);return null!=this.maxValue&&(r=_n(r,0,this.maxValue)),r}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ReLU",n})()),ee((()=>{class n extends Xe{constructor(e){super(e??{}),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Oe(e);return au(r,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LeakyReLU",n})()),ee((()=>{class n extends Xe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=wt(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=vt(e.alphaRegularizer),this.alphaConstraint=qt(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new O(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const s=(e=at(e)).slice(1);if(null!=this.sharedAxes)for(const o of this.sharedAxes)s[o-1]=1;this.alpha=this.addWeight("alpha",s,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const r={};if(null!=this.sharedAxes)for(let o=1;o<e.length;++o)r[o]=e[o];this.inputSpec=[new Xt({ndim:e.length,axes:r})],this.built=!0}call(e,s){return e=Oe(e),cu(e,this.alpha.read())}getConfig(){const e={alphaInitializer:kt(this.alphaInitializer),alphaRegularizer:ct(this.alphaRegularizer),alphaConstraint:Kt(this.alphaConstraint),sharedAxes:this.sharedAxes},s=super.getConfig();return Object.assign(e,s),e}}return n.className="PReLU",n})()),ee((()=>{class n extends Xe{constructor(e){if(super(e??{}),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Re(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,s){const r=Oe(e);return Za(r)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ELU",n})()),ee((()=>{class n extends Xe{constructor(e){super(e??{}),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,s){const r=Oe(e);return R(r,ue(Mn(r,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ThresholdedReLU",n})()),ee((()=>{class n extends Xe{constructor(e){super(e??{}),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new Kx).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,s){const r=Oe(e);return this.softmax(r,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Softmax",n})());class Zu extends Xe{constructor(t,e){if(super(e),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Zu.verifyArgs(e),this.rank=t,sn(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Re(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=No(e.kernelSize,t,"kernelSize"),this.strides=No(null==e.strides?1:e.strides,t,"strides"),this.padding=null==e.padding?"valid":e.padding,Un(this.padding),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rt(this.dataFormat),this.activation=pr(e.activation),this.useBias=null==e.useBias||e.useBias,this.biasInitializer=wt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=qt(e.biasConstraint),this.biasRegularizer=vt(e.biasRegularizer),this.activityRegularizer=vt(e.activityRegularizer),this.dilationRate=No(null==e.dilationRate?1:e.dilationRate,t,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new O(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new O(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(t){if(Wn("kernelSize"in t,"required key 'kernelSize' not in config"),"number"!=typeof t.kernelSize&&!Bp(t.kernelSize,"number",1,3))throw new O(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(t.kernelSize)}.`)}getConfig(){const t={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:dr(this.activation),useBias:this.useBias,biasInitializer:kt(this.biasInitializer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),biasConstraint:Kt(this.biasConstraint)},e=super.getConfig();return Object.assign(t,e),t}}class So extends Zu{constructor(t,e){super(t,e),this.kernel=null,So.verifyArgs(e),this.filters=e.filters,sn(this.filters,"filters"),this.kernelInitializer=wt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=qt(e.kernelConstraint),this.kernelRegularizer=vt(e.kernelRegularizer)}build(t){t=at(t);const e="channelsFirst"===this.dataFormat?1:t.length-1;if(null==t[e])throw new O(`The channel dimension of the input should be defined. Found ${t[e]}`);const s=t[e],r=this.kernelSize.concat([s,this.filters]);this.kernel=this.addWeight("kernel",r,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[e]:s}}],this.built=!0}call(t,e){return P(()=>{let s;t=Oe(t);const r=null==this.bias?null:this.bias.read(),o=Qy(this.activation.getClassName());if(null!=o&&2===this.rank)s=If(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate,o);else{if(1===this.rank)s=function Jx(n,t,e,s=1,r="valid",o,a=1){return P(()=>{if(null==o&&(o="channelsLast"),Rt(o),3!==n.shape.length)throw new O(`The input of a conv1dWithBias operation should be 3, but is ${n.shape.length} instead.`);if(3!==t.shape.length)throw new O(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=e&&1!==e.shape.length)throw new O(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===o&&(n=qe(n,[0,2,1])),"causal"===r)throw new Re("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let i=Id(n,t,s,"same"===r?"same":"valid","NWC",a);return null!=e&&(i=ms(i,e)),i})}(t,this.kernel.read(),r,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)s=If(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Re("convolutions greater than 3D are not implemented yet.");s=function Qx(n,t,e,s=[1,1,1],r="valid",o,a){return P(()=>{if(null==o&&(o="channelsLast"),Rt(o),4!==n.rank&&5!==n.rank)throw new O(`conv3dWithBias expects input to be of rank 4 or 5, but received ${n.rank}.`);if(4!==t.rank&&5!==t.rank)throw new O(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${n.rank}.`);let i=Zx(n,o);if("causal"===r)throw new Re("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return i=Mg(i,t,s,"same"===r?"same":"valid","NDHWC",a),null!=e&&(i=ms(i,e)),"channelsFirst"===o&&(i=qe(i,[0,4,1,2,3])),i})}(t,this.kernel.read(),r,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(s=this.activation.apply(s))}return s})}computeOutputShape(t){t=at(t);const e=[],s="channelsLast"===this.dataFormat?t.slice(1,t.length-1):t.slice(2);for(let o=0;o<s.length;++o){const a=ys(s[o],this.kernelSize[o],this.padding,this.strides[o],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[o]);e.push(a)}let r=[t[0]];return"channelsLast"===this.dataFormat?(r=r.concat(e),r.push(this.filters)):(r.push(this.filters),r=r.concat(e)),r}getConfig(){const t={filters:this.filters,kernelInitializer:kt(this.kernelInitializer),kernelRegularizer:ct(this.kernelRegularizer),kernelConstraint:Kt(this.kernelConstraint)},e=super.getConfig();return Object.assign(t,e),t}static verifyArgs(t){if(!("filters"in t)||"number"!=typeof t.filters||t.filters<1)throw new O(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(t.filters)}`)}}let eb=(()=>{class n extends So{constructor(e){super(2,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Bp(e.kernelSize,"number",1,2))throw new O(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv2D",n})();ee(eb);let tb=(()=>{class n extends So{constructor(e){super(3,e),n.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new O(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv3D",n})();ee(tb),ee((()=>{class n extends eb{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=at(e)).length)throw new O("Input should have rank 4; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:4,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=Oe(e);if(4!==r.shape.length)throw new O(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l;"channelsFirst"===this.dataFormat?(i=2,l=3):(i=1,l=2);const c=o[l],d=this.kernelSize[1],f=this.strides[1],y=[o[0],Es(o[i],this.strides[0],this.kernelSize[0],this.padding),Es(c,f,d,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=qe(r,[0,2,3,1]));let x=kd(r,this.kernel.read(),y,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(x=qe(x,[0,3,1,2])),null!=this.bias&&(x=ms(x,this.bias.read(),this.dataFormat)),null!=this.activation&&(x=this.activation.apply(x)),x})}computeOutputShape(e){const s=(e=at(e)).slice();let r,o,a;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3):(r=3,o=1,a=2);const i=this.kernelSize[0],l=this.kernelSize[1],u=this.strides[0],c=this.strides[1];return s[r]=this.filters,s[o]=Es(s[o],u,i,this.padding),s[a]=Es(s[a],c,l,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv2DTranspose",n})()),ee((()=>{class n extends tb{constructor(e){if(super(e),this.inputSpec=[new Xt({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new O(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=at(e)).length)throw new O("Input should have rank 5; Received input shape: "+JSON.stringify(e));const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s])throw new O("The channel dimension of the inputs should be defined. Found `None`.");const r=e[s],o=this.kernelSize.concat([this.filters,r]);this.kernel=this.addWeight("kernel",o,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Xt({ndim:5,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r=Oe(e);if(5!==r.shape.length)throw new O(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${r.shape.length}`);const o=r.shape;let i,l,u;"channelsFirst"===this.dataFormat?(u=2,i=3,l=4):(u=1,i=2,l=3);const h=o[i],d=o[l],f=this.kernelSize[1],m=this.kernelSize[2],y=this.strides[1],x=this.strides[2],k=[o[0],Es(o[u],this.strides[0],this.kernelSize[0],this.padding),Es(h,y,f,this.padding),Es(d,x,m,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(r=qe(r,[0,2,3,4,1]));let S=_I(r,this.kernel.read(),k,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(S=qe(S,[0,4,1,2,3])),null!==this.bias&&(S=ms(S,this.bias.read(),this.dataFormat)),null!==this.activation&&(S=this.activation.apply(S)),S})}computeOutputShape(e){const s=(e=at(e)).slice();let r,o,a,i;"channelsFirst"===this.dataFormat?(r=1,o=2,a=3,i=4):(r=4,o=1,a=2,i=3);const l=this.kernelSize[0],u=this.kernelSize[1],c=this.kernelSize[2],h=this.strides[0],d=this.strides[1],p=this.strides[2];return s[r]=this.filters,s[o]=Es(s[o],h,l,this.padding),s[a]=Es(s[a],d,u,this.padding),s[i]=Es(s[i],p,c,this.padding),s}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}return n.className="Conv3DTranspose",n})());let b2=(()=>{class n extends So{constructor(e,s){if(super(e,s),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==s.filters)throw new O("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=s.kernelInitializer||null!=s.kernelRegularizer||null!=s.kernelConstraint)throw new O("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=s.padding&&"same"!==s.padding&&"valid"!==s.padding)throw new O(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(s.padding)}`);this.depthMultiplier=null==s.depthMultiplier?1:s.depthMultiplier,this.depthwiseInitializer=wt(s.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=vt(s.depthwiseRegularizer),this.depthwiseConstraint=qt(s.depthwiseConstraint),this.pointwiseInitializer=wt(s.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=vt(s.pointwiseRegularizer),this.pointwiseConstraint=qt(s.pointwiseConstraint)}build(e){if((e=at(e)).length<this.rank+2)throw new O(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const s="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[s])}`);const r=e[s],o=this.kernelSize.concat([r,this.depthMultiplier]),a=[];for(let l=0;l<this.rank;++l)a.push(1);a.push(r*this.depthMultiplier,this.filters);const i=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",o,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,i,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,i,this.pointwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,i,this.biasConstraint):null,this.inputSpec=[new Xt({ndim:this.rank+2,axes:{[s]:r}})],this.built=!0}call(e,s){return P(()=>{let r;if(e=Oe(e),1===this.rank)throw new Re("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=qe(e,[0,2,3,1])),r=Gg(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(r=ms(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),"channelsFirst"===this.dataFormat&&(r=qe(r,[0,3,1,2])),r})}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.pointwiseInitializer=kt(this.pointwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.pointwiseRegularizer=ct(this.pointwiseRegularizer),e.depthwiseConstraint=Kt(this.depthwiseConstraint),e.pointwiseConstraint=Kt(this.pointwiseConstraint),e}}return n.className="SeparableConv",n})();function nb(n,t,e,s){if(Array.isArray(n)){if(null!=t||null!=e)throw new O("When inputs is an array, neither initialState or constants should be provided");null!=s&&(e=n.slice(n.length-s,n.length),n=n.slice(0,n.length-s)),n.length>1&&(t=n.slice(1,n.length)),n=n[0]}function r(o){return null==o||Array.isArray(o)?o:[o]}return{inputs:n,initialState:t=r(t),constants:e=r(e)}}function sb(n,t,e,s=!1,r,o,a=!1,i=!1){return P(()=>{const l=t.shape.length;if(l<3)throw new O(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(fs(2,l));if(t=qe(t,u),null!=o)throw new Re("The rnn() functoin of the deeplearn.js backend does not support constants yet.");a&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=r&&((r=ue(ue(r,"bool"),"float32")).rank===l-1&&(r=zn(r,-1)),r=qe(r,u)),s&&(t=Ms(t,0),null!=r&&(r=Ms(r,0)));const c=[];let h,d=e;const p=t.shape[0],f=ds(t);let m,g;null!=r&&(m=ds(r));for(let y=0;y<p;++y){const x=f[y],b=P(()=>n(x,d));if(null==r)h=b[0],d=b[1];else{const w=P(()=>{const I=m[y],k=be(Vn(I),I);return{output:se(R(b[0],I),R(d[0],k)),newStates:d.map((_,E)=>se(R(b[1][E],I),R(_,k)))}});h=w.output,d=w.newStates}i&&c.push(h)}return i&&(g=es(c,1)),[h,g,d]})}ee((()=>{class n extends b2{constructor(e){super(2,e)}}return n.className="SeparableConv2D",n})()),ee((()=>{class n extends So{constructor(e){super(1,e),n.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!Bp(e.kernelSize,"number",1,1))throw new O(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}return n.className="Conv1D",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.cropping="number"==typeof e.cropping?[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,s){return P(()=>{if(e=Oe(e),"channelsLast"===this.dataFormat){const r=Ou(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Ou(r,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const r=Ou(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Ou(r,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}})}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Cropping2D",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,Rt(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,function Y$(n){Br(j$,"InterpolationFormat",n)}(this.interpolation)}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],null==e[2]?null:this.size[0]*e[2],null==e[3]?null:this.size[1]*e[3]]:[e[0],null==e[1]?null:this.size[0]*e[1],null==e[2]?null:this.size[1]*e[2],e[3]]}call(e,s){return P(()=>{let r=Oe(e);const o=r.shape;if("channelsFirst"===this.dataFormat){r=qe(r,[0,2,3,1]);const a=this.size[0]*o[2],i=this.size[1]*o[3],l="nearest"===this.interpolation?ts.resizeNearestNeighbor(r,[a,i]):ts.resizeBilinear(r,[a,i]);return qe(l,[0,3,1,2])}{const a=this.size[0]*o[1],i=this.size[1]*o[2];return"nearest"===this.interpolation?ts.resizeNearestNeighbor(r,[a,i]):ts.resizeBilinear(r,[a,i])}})}getConfig(){const e={size:this.size,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="UpSampling2D",n})()),ee((()=>{class n extends Zu{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=wt(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=qt(e.depthwiseConstraint),this.depthwiseRegularizer=vt(e.depthwiseRegularizer)}build(e){if((e=at(e)).length<4)throw new O(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const s="channelsFirst"===this.dataFormat?1:3;if(null==e[s]||e[s]<0)throw new O(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[s]}).`);const r=e[s];this.depthwiseKernel=this.addWeight("depthwise_kernel",[this.kernelSize[0],this.kernelSize[1],r,this.depthMultiplier],null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.bias=this.useBias?this.addWeight("bias",[r*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{let r=function w2(n,t,e=[1,1],s="valid",r,o){return P(()=>{null==r&&(r="channelsLast"),Rt(r);let a=vf(n,r);if(4!==n.rank)throw new O(`Input for depthwiseConv2d is required to be 4-D, but is instead ${n.rank}-D`);if(4!==t.rank)throw new O(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return a=Ya(a,t,e,"same"===s?"same":"valid","NHWC",o),"channelsFirst"===r&&(a=qe(a,[0,3,1,2])),a})}(e=Oe(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(r=ms(r,this.bias.read(),this.dataFormat)),null!=this.activation&&(r=this.activation.apply(r)),r})}computeOutputShape(e){e=at(e);const r="channelsFirst"===this.dataFormat?e[3]:e[2],o="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=ys("channelsFirst"===this.dataFormat?e[2]:e[1],this.kernelSize[0],this.padding,this.strides[0]),i=ys(r,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],o,a,i]:[e[0],a,i,o]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=kt(this.depthwiseInitializer),e.depthwiseRegularizer=ct(this.depthwiseRegularizer),e.depthwiseConstraint=Kt(this.depthwiseRegularizer),e}}return n.className="DepthwiseConv2D",n})());let wi=(()=>{class n extends Xe{constructor(e){let s;if(super(e),null==e.cell)throw new O("cell property is missing for the constructor of RNN.");if(s=Array.isArray(e.cell)?new ab({cells:e.cell}):e.cell,null==s.stateSize)throw new O("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=s,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Xt({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?fs(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map(s=>null):this.states_}setStates(e){this.states_=e}computeOutputShape(e){jp(e)&&(e=e[0]);let s=this.cell.stateSize;Array.isArray(s)||(s=[s]);const r=s[0];let o;if(o=this.returnSequences?[e[0],e[1],r]:[e[0],r],this.returnState){const a=[];for(const i of s)a.push([e[0],i]);return[o].concat(a)}return o}computeMask(e,s){return P(()=>{Array.isArray(s)&&(s=s[0]);const r=this.returnSequences?s:null;if(this.returnState){const o=this.states.map(a=>null);return[r].concat(o)}return r})}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,s=[];for(let r=0;r<e;++r)s.push(null);return s}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Re("Constants support is not implemented in RNN yet.");jp(e)&&(e=e[0]);const r=this.stateful?e[0]:null,o=e.slice(2);this.inputSpec[0]=new Xt({shape:[r,null,...o]});const a=[e[0]].concat(e.slice(2));let i;if(this.cell.build(a),i=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!je(this.stateSpec.map(l=>l.shape[l.shape.length-1]),i))throw new O(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=i.map(l=>new Xt({shape:[null,l]}));this.stateful&&this.resetStates()}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new Ss("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape[0];if(null==r)throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(o=>Ht([r,o])):[Ht([r,this.cell.stateSize])];else if(null==e)ze(this.states_),null!=this.keptStates&&(ze(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(o=>Ht([r,o])):this.states_[0]=Ht([r,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===s?this.keptStates.push(this.states_.slice()):ze(this.states_);for(let o=0;o<this.states_.length;++o){const a=e[o],i=Array.isArray(this.cell.stateSize)?this.cell.stateSize[o]:this.cell.stateSize,l=[r,i];if(!je(a.shape,l))throw new O(`State ${o} is incompatible with layer ${this.name}: expected shape=${l}, received shape=${a.shape}`);this.states_[o]=a}}this.states_=this.states_.map(o=>ln(o.clone()))})}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=nb(e,r,o,this.numConstants);e=a.inputs,r=a.initialState,o=a.constants;let i=[],l=[];if(null!=r){s.initialState=r,i=i.concat(r),this.stateSpec=[];for(const c of r)this.stateSpec.push(new Xt({shape:c.shape}));l=l.concat(this.stateSpec)}if(null!=o&&(s.constants=o,i=i.concat(o),this.numConstants=o.length),i[0]instanceof _s){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=null==s?null:s.mask,o=null==s?null:s.training;let a=null==s?null:s.initialState;e=Oe(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const i=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==i)throw new O(`RNN Layer has ${i} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const l={training:o},c=sb((m,g)=>{const y=this.cell.call([m].concat(g),l);return[y[0],y.slice(1)]},e,a,this.goBackwards,r,null,this.unroll,this.returnSequences),h=c[0],d=c[1],p=c[2];this.stateful&&this.resetStates(p,o);const f=this.returnSequences?d:h;return this.returnState?[f].concat(p):f})}getInitialState(e){return P(()=>{let s=Ht(e.shape);return s=we(s,[1,2]),s=fi(s),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(r=>r>1?Gp(s,[1,r]):s):this.cell.stateSize>1?[Gp(s,[1,this.cell.stateSize])]:[s]})}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),s={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(s.numConstants=this.numConstants);const r=this.cell.getConfig();return this.getClassName()===n.className&&(s.cell={className:this.cell.getClassName(),config:r}),Object.assign({},r,e,s)}static fromConfig(e,s,r={}){const a=Us(s.cell,r);return new e(Object.assign(s,{cell:a}))}}return n.className="RNN",n})();ee(wi);class Ju extends Xe{}let rb=(()=>{class n extends Ju{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=pr(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=wt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=wt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=wt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=vt(e.kernelRegularizer),this.recurrentRegularizer=vt(e.recurrentRegularizer),this.biasRegularizer=vt(e.biasRegularizer),this.kernelConstraint=qt(e.kernelConstraint),this.recurrentConstraint=qt(e.recurrentConstraint),this.biasConstraint=qt(e.biasConstraint),this.dropout=Io([1,ur([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Io([1,ur([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let r=e[1];e=e[0];const o=null!=s.training&&s.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fr({ones:()=>Vn(e),rate:this.dropout,training:o})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fr({ones:()=>Vn(r),rate:this.recurrentDropout,training:o}));const i=this.dropoutMask,l=this.recurrentDropoutMask;a=Ts(null!=i?R(e,i):e,this.kernel.read()),null!=this.bias&&(a=ms(a,this.bias.read())),null!=l&&(r=R(r,l));let u=se(a,Ts(r,this.recurrentKernel.read()));return null!=this.activation&&(u=this.activation.apply(u)),[u,u]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:dr(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Kt(this.kernelConstraint),recurrentConstraint:Kt(this.recurrentConstraint),biasConstraint:Kt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,s)}}return n.className="SimpleRNNCell",n})();ee(rb),ee((()=>{class n extends wi{constructor(e){e.cell=new rb(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return new e(s)}}return n.className="SimpleRNN",n})());let ob=(()=>{class n extends Ju{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new O("GRUCell does not support reset_after parameter set to true.");this.units=e.units,sn(this.units,"units"),this.activation=pr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=pr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=wt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=wt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=wt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=vt(e.kernelRegularizer),this.recurrentRegularizer=vt(e.recurrentRegularizer),this.biasRegularizer=vt(e.biasRegularizer),this.kernelConstraint=qt(e.kernelConstraint),this.recurrentConstraint=qt(e.recurrentConstraint),this.biasConstraint=qt(e.biasConstraint),this.dropout=Io([1,ur([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Io([1,ur([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.bias=this.useBias?this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):null,this.built=!0}call(e,s){return P(()=>{if(2!==e.length)throw new O(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const r=null!=s.training&&s.training;let o=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fr({ones:()=>Vn(e),rate:this.dropout,training:r,count:3})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fr({ones:()=>Vn(o),rate:this.recurrentDropout,training:r,count:3}));const i=this.recurrentDropoutMask;let l,u,c;0<this.dropout&&this.dropout<1&&(e=R(e,this.dropoutMask[0]));let h=Ts(e,this.kernel.read());this.useBias&&(h=ms(h,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(o=R(o,i[0]));const d=this.recurrentKernel.read(),[p,f]=En(d,[2*this.units,this.units],d.rank-1),m=Ts(o,p),[g,y,x]=En(h,3,h.rank-1),[b,w]=En(m,2,m.rank-1);l=this.recurrentActivation.apply(se(g,b)),u=this.recurrentActivation.apply(se(y,w));const I=Ts(R(u,o),f);c=this.activation.apply(se(x,I));const k=se(R(l,o),R(se(1,Ct(l)),c));return[k,k]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:dr(this.activation),recurrentActivation:dr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Kt(this.kernelConstraint),recurrentConstraint:Kt(this.recurrentConstraint),biasConstraint:Kt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,s)}}return n.className="GRUCell",n})();ee(ob),ee((()=>{class n extends wi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new ob(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="GRU",n})());let Cf=(()=>{class n extends Ju{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,sn(this.units,"units"),this.activation=pr(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=pr(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=wt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=wt(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=wt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=vt(e.kernelRegularizer),this.recurrentRegularizer=vt(e.recurrentRegularizer),this.biasRegularizer=vt(e.biasRegularizer),this.kernelConstraint=qt(e.kernelConstraint),this.recurrentConstraint=qt(e.recurrentConstraint),this.biasConstraint=qt(e.biasConstraint),this.dropout=Io([1,ur([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Io([1,ur([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var s;let o;if(e=at(e),this.kernel=this.addWeight("kernel",[e[e.length-1],4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const a=this.biasInitializer,i=this.units;o=new((s=class extends rs{apply(u,c){const h=a.apply([i]),d=(new hx).apply([i]),p=a.apply([2*i]);return lx(lx(h,d),p)}}).className="CustomInit",s)}else o=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,o,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training;if(3!==e.length)throw new O(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let o=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fr({ones:()=>Vn(e),rate:this.dropout,training:r,count:4})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fr({ones:()=>Vn(o),rate:this.recurrentDropout,training:r,count:4}));const l=this.recurrentDropoutMask;let u,c,h,d;0<this.dropout&&this.dropout<1&&(e=R(e,this.dropoutMask[0]));let p=Ts(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(o=R(o,l[0])),p=se(p,Ts(o,this.recurrentKernel.read())),this.useBias&&(p=ms(p,this.bias.read()));const[f,m,g,y]=En(p,4,p.rank-1);u=this.recurrentActivation.apply(f),c=this.recurrentActivation.apply(m),h=se(R(c,a),R(u,this.activation.apply(g))),d=this.recurrentActivation.apply(y);const x=R(d,this.activation.apply(h));return[x,x,h]})}getConfig(){const e=super.getConfig(),s={units:this.units,activation:dr(this.activation),recurrentActivation:dr(this.recurrentActivation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),recurrentInitializer:kt(this.recurrentInitializer),biasInitializer:kt(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:ct(this.kernelRegularizer),recurrentRegularizer:ct(this.recurrentRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Kt(this.kernelConstraint),recurrentConstraint:Kt(this.recurrentConstraint),biasConstraint:Kt(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,s)}}return n.className="LSTMCell",n})();ee(Cf),ee((()=>{class n extends wi{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Cf(e),super(e)}call(e,s){return P(()=>(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})))}static fromConfig(e,s){return 0===s.implmentation&&(s.implementation=1),new e(s)}}return n.className="LSTM",n})());let ab=(()=>{class n extends Ju{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const s of this.cells.slice().reverse())Array.isArray(s.stateSize)?e.push(...s.stateSize):e.push(s.stateSize);return e}call(e,s){return P(()=>{let r=e.slice(1);const o=[];for(const l of this.cells.slice().reverse())Array.isArray(l.stateSize)?o.push(r.splice(0,l.stateSize.length)):o.push(r.splice(0,1));o.reverse();const a=[];let i;for(let l=0;l<this.cells.length;++l){const u=this.cells[l];r=o[l],i=0===l?[e[0]].concat(r):[i[0]].concat(r),i=u.call(i,s),a.push(i.slice(1))}r=[];for(const l of a.slice().reverse())r.push(...l);return[i[0]].concat(r)})}build(e){let s;jp(e)&&(e=e[0]),this.cells.forEach((r,o)=>{Vr(`RNNCell_${o}`,()=>{r.build(e),s=Array.isArray(r.stateSize)?r.stateSize[0]:r.stateSize,e=[e[0],s]})}),this.built=!0}getConfig(){const e=super.getConfig(),o={cells:this.cells.map(a=>({className:a.getClassName(),config:a.getConfig()}))};return Object.assign({},e,o)}static fromConfig(e,s,r={}){const o=[];for(const a of s.cells)o.push(Us(a,r));return new e({cells:o})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const s of this.cells)e.push(...s.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const s of this.cells)e.push(...s.nonTrainableWeights);if(!this.trainable){const s=[];for(const r of this.cells)s.push(...r.trainableWeights);return s.concat(e)}return e}getWeights(){const e=[];for(const s of this.cells)e.push(...s.weights);return Kp(e)}setWeights(e){const s=[];for(const r of this.cells){const a=e.splice(r.weights.length);for(let i=0;i<r.weights.length;++i)s.push([r.weights[i],a[i]])}qp(s)}}return n.className="StackedRNNCells",n})();function fr(n){const{ones:t,rate:e,training:s=!1,count:r=1}=n,o=()=>cx(t(),e),a=()=>gi(o,t,s);return!r||r<=1?ln(a().clone()):Array(r).fill(void 0).map(a).map(l=>ln(l.clone()))}ee(ab);let I2=(()=>{class n extends wi{constructor(e){if(e.unroll)throw new Re("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Re("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Xt({ndim:5})]}call(e,s){return P(()=>{if(null!=this.cell.dropoutMask&&(ze(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ze(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),s&&s.constants)throw new O("ConvRNN2D cell does not support constants");return super.call(e,{mask:null==s?null:s.mask,training:null==s?null:s.training,initialState:null==s?null:s.initialState})})}computeOutputShape(e){let s=this.computeSingleOutputShape(e);return this.returnSequences||(s=[s[0],...s.slice(2)]),this.returnState&&(s=[s,...Array(2).fill([e[0],...s.slice(-3)])]),s}getInitialState(e){return P(()=>{const{stateSize:s}=this.cell,o=this.computeSingleOutputShape(e.shape),i=Ht([o[0],...o.slice(2)]);return Array.isArray(s)?Array(s.length).fill(i):[i]})}resetStates(e,s=!1){P(()=>{if(!this.stateful)throw new Ss("Cannot call resetStates() on an RNN Layer that is not stateful.");const r=this.inputSpec[0].shape,o=this.computeSingleOutputShape(r),a=[o[0],...o.slice(2)];if(null==r[0])throw new O("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())this.states_=Array.isArray(this.cell.stateSize)?this.cell.stateSize.map(()=>Ht(a)):[Ht(a)];else if(null==e)ze(this.states_),null!=this.keptStates&&(ze(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map(()=>Ht(a)):this.states_[0]=Ht(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new O(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);s?this.keptStates.push(this.states_.slice()):ze(this.states_);for(let l=0;l<this.states_.length;++l){const u=e[l],c=a;if(!je(u.shape,c))throw new O(`State ${l} is incompatible with layer ${this.name}: expected shape=${c}, received shape=${u.shape}`);this.states_[l]=u}}this.states_=this.states_.map(l=>ln(l.clone()))})}computeSingleOutputShape(e){const{dataFormat:s,filters:r,kernelSize:o,padding:a,strides:i,dilationRate:l}=this.cell,u="channelsFirst"===s,h=e[u?4:3],d=ys(e[u?3:2],o[0],a,i[0],l[0]),p=ys(h,o[1],a,i[1],l[1]);return[...e.slice(0,2),...u?[r,d,p]:[d,p,r]]}}return n.className="ConvRNN2D",n})(),ib=(()=>{class n extends Cf{constructor(e){const{filters:s,kernelSize:r,strides:o,padding:a,dataFormat:i,dilationRate:l}=e;super(Object.assign({},e,{units:s})),this.filters=s,sn(this.filters,"filters"),this.kernelSize=No(r,2,"kernelSize"),this.kernelSize.forEach(u=>sn(u,"kernelSize")),this.strides=No(o||1,2,"strides"),this.strides.forEach(u=>sn(u,"strides")),this.padding=a||"valid",Un(this.padding),this.dataFormat=i||"channelsLast",Rt(this.dataFormat),this.dilationRate=No(l||1,2,"dilationRate"),this.dilationRate.forEach(u=>sn(u,"dilationRate"))}build(e){var s;e=at(e);const r="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[r])throw new O(`The channel dimension of the input should be defined. Found ${e[r]}`);const i=this.kernelSize.concat([e[r],4*this.filters]);this.kernel=this.addWeight("kernel",i,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const l=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",l,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let u;if(this.unitForgetBias){const c=this.biasInitializer,h=this.filters;u=new((s=class extends rs{apply(p,f){return Up([c.apply([h]),zs([h]),c.apply([2*h])])}}).className="CustomInit",s)}else u=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,u,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,s){return P(()=>{if(3!==e.length)throw new O(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const r=s.training||!1,o=e[0],a=e[1],i=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=fr({ones:()=>Vn(o),rate:this.dropout,training:r,count:4}));const u=this.dropoutMask,c=(oe,le,ie)=>le&&le[ie]?R(le[ie],oe):oe;let h=c(o,u,0),d=c(o,u,1),p=c(o,u,2),f=c(o,u,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=fr({ones:()=>Vn(a),rate:this.recurrentDropout,training:r,count:4}));const m=this.recurrentDropoutMask;let g=c(a,m,0),y=c(a,m,1),x=c(a,m,2),b=c(a,m,3);const[I,k,S,T]=En(this.kernel.read(),4,3),[_,E,M,B]=this.useBias?En(this.bias.read(),4):[null,null,null,null];h=this.inputConv(h,I,_,this.padding),d=this.inputConv(d,k,E,this.padding),p=this.inputConv(p,S,M,this.padding),f=this.inputConv(f,T,B,this.padding);const[V,j,G,W]=En(this.recurrentKernel.read(),4,3);g=this.recurrentConv(g,V),y=this.recurrentConv(y,j),x=this.recurrentConv(x,G),b=this.recurrentConv(b,W);const Z=this.recurrentActivation.apply(se(h,g)),K=this.recurrentActivation.apply(se(d,y)),Q=se(R(K,i),R(Z,this.activation.apply(se(p,x)))),te=R(this.recurrentActivation.apply(se(f,b)),this.activation.apply(Q));return[te,te,Q]})}getConfig(){const r=function(n,t){var e={};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&t.indexOf(s)<0&&(e[s]=n[s]);if(null!=n&&"function"==typeof Object.getOwnPropertySymbols){var r=0;for(s=Object.getOwnPropertySymbols(n);r<s.length;r++)t.indexOf(s[r])<0&&Object.prototype.propertyIsEnumerable.call(n,s[r])&&(e[s[r]]=n[s[r]])}return e}(super.getConfig(),["units"]);return Object.assign({},r,{filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides})}inputConv(e,s,r,o){const a=or(e,s,this.strides,o||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return r?ms(a,r,this.dataFormat):a}recurrentConv(e,s){return or(e,s,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}return n.className="ConvLSTM2DCell",n})();ee(ib),ee((()=>{class n extends I2{constructor(e){const s=new ib(e);super(Object.assign({},e,{cell:s}))}static fromConfig(e,s){return new e(s)}}return n.className="ConvLSTM2D",n})());let lb=(()=>{class n extends Xe{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const s=e.shape,r=[];for(let o=0;o<this.noiseShape.length;++o)r.push(null==this.noiseShape[o]?s[o]:this.noiseShape[o]);return r}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e);if(0<this.rate&&this.rate<1){const o=null!=s.training&&s.training,a=this.getNoiseShape(r);return gi(()=>cx(r,this.rate,a,this.seed),()=>r,o)}return e})}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},s=super.getConfig();return Object.assign(e,s),e}dispose(){return super.dispose()}}return n.className="Dropout",n})();ee(lb),ee((()=>{class n extends lb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const s=e.shape;return[s[0],1,s[2]]}}return n.className="SpatialDropout1D",n})()),ee((()=>{class n extends Xe{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=[s,e.inputDim]}this.units=e.units,sn(this.units,"units"),this.activation=pr(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=wt(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=wt(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=qt(e.kernelConstraint),this.biasConstraint=qt(e.biasConstraint),this.kernelRegularizer=vt(e.kernelRegularizer),this.biasRegularizer=vt(e.biasRegularizer),this.activityRegularizer=vt(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const s=(e=at(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[s,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:s}}],this.built=!0}computeOutputShape(e){const s=(e=at(e)).slice();return s[s.length-1]=this.units,s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e),o=Qy(this.activation.getClassName());let a;return null!=o?a=Ts(r,this.kernel.read(),o,this.bias?this.bias.read():null):(a=Ts(r,this.kernel.read()),null!=this.bias&&(a=ms(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a})}getConfig(){const e={units:this.units,activation:dr(this.activation),useBias:this.useBias,kernelInitializer:kt(this.kernelInitializer),biasInitializer:kt(this.biasInitializer),kernelRegularizer:ct(this.kernelRegularizer),biasRegularizer:ct(this.biasRegularizer),activityRegularizer:ct(this.activityRegularizer),kernelConstraint:Kt(this.kernelConstraint),biasConstraint:Kt(this.biasConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dense",n})()),ee((()=>{class n extends Xe{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=at(e);for(const s of e.slice(1))if(null==s)throw new O(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],lr(e,1)]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=Oe(e);if("channelsFirst"===this.dataFormat&&r.rank>1){const o=[0];for(let a=2;a<r.rank;++a)o.push(a);o.push(1),r=qe(r,o)}return function r_(n){if(n.rank<=1)throw new O(`batchFlatten requires a minimum rank of 2. Got rank: ${n.rank}.`);const t=[n.shape[0],lr(n.shape,1)];return F(n,t)}(r)})}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const s=super.getConfig();return Object.assign(e,s),e}}return n.className="Flatten",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.supportsMasking=!0,this.activation=pr(e.activation)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e);return this.activation.apply(r)})}getConfig(){const e={activation:dr(this.activation)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Activation",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,s){return P(()=>function n_(n,t){return P(()=>{if(2!==n.shape.length)throw new O(`repeat() expects a rank-2 tensor, but received a rank-${n.shape.length} tensor.`);return Gp(fi(n,1),[1,t,1])})}(e=Oe(e),this.n))}getConfig(){const e={n:this.n},s=super.getConfig();return Object.assign(e,s),e}}return n.className="RepeatVector",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.targetShape=e.targetShape;for(let s=0;s<this.targetShape.length;++s)this.isUnknown(this.targetShape[s])&&(this.targetShape[s]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,s){const r="Total size of new array must be unchanged.",o=s.slice();let a=1,i=null;for(let u=0;u<o.length;++u){const c=o[u];if(this.isUnknown(c)){if(null!==i)throw new O("Can only specifiy one unknown dimension.");i=u}else a*=c}const l=lr(e);if(null!==i){if(0===a||l%a!=0)throw new O(r);o[i]=l/a}else if(l!==a)throw new O(r);return o}computeOutputShape(e){let s=!1;for(let r=0;r<e.length;++r)if(this.isUnknown(e[r])){s=!0;break}return s?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e),o=r.shape,a=o.slice(0,1).concat(this.fixUnknownDimension(o.slice(1),this.targetShape));return F(r,a)})}getConfig(){const e={targetShape:this.targetShape},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Reshape",n})()),ee((()=>{class n extends Xe{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const s=fs(1,e.dims.length+1);if(!je(e.dims.slice().sort(),s))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Xt({ndim:this.dims.length+1})]}computeOutputShape(e){const s=(e=at(e)).slice();return this.dims.forEach((r,o)=>{s[o+1]=e[r]}),s}call(e,s){return qe(Oe(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Permute",n})()),ee((()=>{class n extends Xe{constructor(e){super(e??{}),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={maskValue:this.maskValue};return Object.assign(s,e),s}computeMask(e,s){const r=Oe(e);return su(yo(r,this.maskValue),-1)}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e),i=su(yo(r,this.maskValue),-1,!0);return R(r,ue(i,r.dtype))})}}return n.className="Masking",n})()),ee((()=>{class n extends Xe{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let s=null;null!=e.batchSize&&(s=e.batchSize),this.batchInputShape=null==e.inputLength?[s,null]:[s].concat(pt(e.inputLength))}this.inputDim=e.inputDim,sn(this.inputDim,"inputDim"),this.outputDim=e.outputDim,sn(this.outputDim,"outputDim"),this.embeddingsInitializer=wt(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=vt(e.embeddingsRegularizer),this.activityRegularizer=vt(e.activityRegularizer),this.embeddingsConstraint=qt(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,s){return P(()=>this.maskZero?(e=Oe(e),yo(e,Ke(e))):null)}computeOutputShape(e){if(e=at(e),null==this.inputLength)return[...e,this.outputDim];const s=pt(this.inputLength);if(s.length!==e.length-1)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let r=0;for(let o=0;o<s.length;++o){const a=s[o],i=e[o+1];if(null!=a&&null!=i&&a!==i)throw new O(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(s[r]=i),r++}}return[e[0],...s,this.outputDim]}call(e,s){return P(()=>{this.invokeCallHook(e,s);let r=Oe(e);"int32"!==r.dtype&&(r=Fu(r,"int32"));const o=ux(this.embeddings.read(),F(r,[r.size]));return F(o,at(this.computeOutputShape(r.shape)))})}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:kt(this.embeddingsInitializer),embeddingsRegularizer:ct(this.embeddingsRegularizer),activityRegularizer:ct(this.activityRegularizer),embeddingsConstraint:Kt(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Embedding",n})());class Gr extends Xe{constructor(t){super(t||{}),this.supportsMasking=!0}mergeFunction(t){throw new Re}computeElementwiseOpOutputShape(t,e){if(null==t||null==e)return null;if(t.length<e.length)return this.computeElementwiseOpOutputShape(e,t);if(0===e.length)return t;const s=t.slice(0,t.length-e.length);for(let r=0;r<e.length;++r){const o=t[t.length-e.length+r],a=e[r];if(null==o||null==a||o<0||a<0)s.push(null);else if(1===o)s.push(a);else if(1===a)s.push(o);else{if(o!==a)throw new O("Operands could not be broadcast together with shapes "+JSON.stringify(t)+" "+JSON.stringify(e));s.push(o)}}return s}build(t){if(Array.isArray(t)&&!Array.isArray(t[0])&&(t=[at(t)]),t.length<2)throw new O(`A merge layer should be called on an Array of at least 2 inputs. Got ${t.length} input(s).`);let e=[];for(const o of t)null!=o&&null!==o[0]&&e.push(o[0]);if(e=ir(e),e.length>1)throw new O(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(t)}.`);let s=null==t[0]?null:t[0].slice(1);for(let o=1;o<t.length;++o){const a=null==t[o]?null:t[o].slice(1);s=this.computeElementwiseOpOutputShape(s,a)}const r=t.map(o=>o.length);this.reshapeRequired=-1!==t.indexOf(null)||1!==ir(r).length}call(t,e){return P(()=>{if(this.reshapeRequired){const s=[],r=t.map(o=>o.rank);if(-1===r.indexOf(null)){const o=ur(r);for(let a of t){const i=a.rank;for(let l=0;l<o-i;++l)a=fi(a,1);s.push(a)}return this.mergeFunction(s)}{let o=!1;for(const l of t){const u=l.rank;if(null==u){const c=l.shape,h=c[0],d=c.slice(1).concat([h]);let p=F(l,[h].concat(lr(c.slice(1))));p=qe(p,[1,0]),p=F(p,d),s.push(p),o=!0}else if(u>1){const c=fs(1,u).concat([0]);s.push(qe(l,c)),o=!0}else s.push(l)}let a=this.mergeFunction(s);const i=a.rank;if(o)if(null==i){const l=a.shape,c=l[l.length-1],h=[c].concat(l.slice(0,l.length-1));a=F(qe(F(a,[-1,c]),[1,0]),h)}else if(i>1){const l=[i-1].concat(fs(0,i-1));a=qe(a,l)}return a}}return this.mergeFunction(t)})}computeOutputShape(t){let e;e=null==t[0]?null:t[0].slice(1);for(let r=1;r<t.length;++r){const o=null==t[r]?null:t[r].slice(1);e=this.computeElementwiseOpOutputShape(e,o)}let s=[];for(const r of t)null!=r&&null!==r[0]&&s.push(r[0]);return s=ir(s),e=1===s.length?s.concat(e):[null].concat(e),e}computeMask(t,e){return P(()=>{if(null==e)return null;if(!Array.isArray(e))throw new O("`mask` should be an Array");if(!Array.isArray(t))throw new O("`inputs` should be an Array");if(e.length!==t.length)throw new O(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${t.length} vs ${e.length})`);if(e.every(r=>null==r))return null;let s=(e=e.map(r=>null==r?r:zn(r,0)))[0];for(let r=1;r<e.length-1;++r)s=Cs(s,e[r]);return s})}}function vi(n,t){for(;n<0;)n+=t;return n}function Ii(n,t,e,s,r,o=.001){let a;if(2===n.rank)a=iI(n,t,e,s,r,o);else if(3===n.rank)a=uI(n,t,e,s,r,o);else{if(4!==n.rank)throw new Re(`batchNormalization is not implemented for array of rank ${n.rank} yet`);a=hI(n,t,e,s,r,o)}return a}function Qu(n,t,e,s,r,o){return P(()=>{let a;Rt(r),nx(o),Un(s),null==e&&(e=[1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=vf(n,r);const i="same"===s?"same":"valid";return a="max"===o?lu(n,t,e,i):ou(n,t,e,i),"channelsFirst"===r&&(a=qe(a,[0,3,1,2])),a})}function ub(n,t,e,s,r,o){return P(()=>{let a;Rt(r),nx(o),Un(s),null==e&&(e=[1,1,1]),null==s&&(s="valid"),null==r&&(r="channelsLast"),null==o&&(o="max"),n=Zx(n,r);const i="same"===s?"same":"valid";return a="max"===o?Wg(n,t,e,i):zg(n,t,e,i),"channelsFirst"===r&&(a=qe(a,[0,4,1,2,3])),a})}ee((()=>{class n extends Gr{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=se(s,e[r]);return s})}}return n.className="Add",n})()),ee((()=>{class n extends Gr{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=R(s,e[r]);return s})}}return n.className="Multiply",n})()),ee((()=>{class n extends Gr{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0].clone();for(let r=1;r<e.length;++r)s=se(s,e[r]);return R(1/e.length,s)})}}return n.className="Average",n})()),ee((()=>{class n extends Gr{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=Ps(s,e[r]);return s})}}return n.className="Maximum",n})()),ee((()=>{class n extends Gr{constructor(e){super(e)}mergeFunction(e){return P(()=>{let s=e[0];for(let r=1;r<e.length;++r)s=ti(s,e[r]);return s})}}return n.className="Minimum",n})()),ee((()=>{class n extends Gr{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new O("A `Concatenate` layer should be called on a list of at least 2 inputs");let s=!0;for(const o of e)if(null!=o){s=!1;break}if(s)return;const r=[];for(let o=0;o<e.length;++o){const a=e[o].slice();a.splice(this.axis,1);let i=!1;for(const l of r)if(je(l,a)){i=!0;break}i||r.push(a)}if(r.length>1)throw new O("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return P(()=>Up(e,this.axis))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new O("A `Concatenate` layer should be called on a list of inputs.");const s=e,r=s[0].slice(),o=this.axis<0?r.length+this.axis:this.axis;for(const a of s.slice(1)){if(null==r[o]||null==a[o]){r[o]=null;break}r[o]+=a[o]}return r}computeMask(e,s){if(null==s)return null;if(!Array.isArray(s))throw new O("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new O("`inputs` should be an array for Concatenate");if(s.length!==e.length)throw new O(`Mismatch in the length of mask (${s.length}) and the legnth of inputs (${e.length})`);return P(()=>{let r=!0;if(s.forEach(i=>{null==i||(r=!1)}),r)return null;const o=[];for(let i=0;i<e.length;++i)o.push(null==s[i]?ue(Vn(e[i]),"bool"):s[i].rank<e[i].rank?zn(s[i],-1):s[i]);const a=Ut(o,this.axis);return bd(a,-1,!1)})}getConfig(){const e={axis:this.axis},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Concatenate",n})()),ee((()=>{class n extends Gr{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0],r=e[1];if(s.length>3||r.length>3)throw new Re("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);if(s[o[0]]!==r[o[1]])throw new O(`Dimension incompatibility: ${s[o[0]]} !== ${r[o[1]]}`)}mergeFunction(e){if(2!==e.length)throw new O(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let o,s=e[0],r=e[1];return o=Array.isArray(this.axes)?this.axes.map((a,i)=>vi(a,e[i].shape.length)):[vi(this.axes,s.shape.length),vi(this.axes,r.shape.length)],this.normalize&&(s=Uu(s,o[0]),r=Uu(r,o[1])),function C2(n,t,e){if(n.shape.length>3||t.shape.length>3)throw new Re("batchDot is not implemented for tensors of 4D or higher rank yet");if(C(n.shape.length>=2,()=>`batchDot requires the rank of x to be >= 2, but got ${n.shape.length}`),C(n.shape.length>=2,()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`),"number"==typeof e&&(e=[e,e]),"complex64"===n.dtype||"complex64"===t.dtype)throw new Re("batchDot is not implemented for complex64-type Tensors yet.");const s=n.shape.length,r=t.shape.length;null==e&&(e=[s-1,r-2]);const o=e;return P(()=>{let a,i;if(s>r){a=s-r;const l=[];for(let u=0;u<a;++u)l.push(1);t=F(t,t.shape.concat(l))}else if(r>s){a=r-s;const l=[];for(let u=0;u<a;++u)l.push(1);n=F(n,n.shape.concat(l))}else a=0;if(i=2===n.shape.length&&2===t.shape.length?o[0]===o[1]?we(R(n,t),o[0]):we(R(qe(n,[1,0]),t),o[1]):tt(n,t,o[0]!==n.shape.length-1,o[1]===t.shape.length-1),a>0){let l;l=s>r?s+r-3:s-1;const u=[];for(let c=l;c<l+a;++c)u.push(c);i=ar(i,u)}return 1===i.shape.length&&(i=zn(i,1)),i})}(s,r,o)}interpretAxes(e,s){let r;return r=Array.isArray(this.axes)?this.axes:[vi(this.axes,e.length),vi(this.axes,s.length)],r}computeOutputShape(e){C(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),()=>"A `Dot` layer should be called on a list of exactly 2 inputs.");const s=e[0].slice(),r=e[1].slice();if(s.length>3||r.length>3)throw new Re("Dot layer does not support tensors of 4D or higher rank yet.");const o=this.interpretAxes(s,r);s.splice(o[0],1),r.splice(o[1],1),r.splice(0,1);const a=s.concat(r);return 1===a.length&&a.push(1),a}computeMask(e,s){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},s=super.getConfig();return Object.assign(e,s),e}}return n.className="Dot",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={stddev:this.stddev};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e);return gi(()=>se(Lu(r.shape,0,this.stddev),r),()=>r,s.training||!1)})}}return n.className="GaussianNoise",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{this.invokeCallHook(e,s);const r=Oe(e);return this.rate>0&&this.rate<1?gi(()=>{const a=Math.sqrt(this.rate/(1-this.rate));return R(r,Lu(r.shape,1,a))},()=>r,s.training||!1):r})}}return n.className="GaussianDropout",n})()),ee((()=>{class n extends Xe{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||Oe(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),s={rate:this.rate};return Object.assign(s,e),s}call(e,s){return P(()=>{if(this.rate<1&&this.rate>0){const r=this._getNoiseShape(e);return gi(()=>{const a=Oe(e),u=-1.7580993408473766;let c=Dr(ni(r),this.rate);c=Fu(c,"float32");const h=((1-this.rate)*(1+this.rate*u**2))**-.5,d=-h*u*this.rate,p=se(R(a,c),R(se(c,-1),u));return se(R(p,h),d)},()=>Oe(e),s.training||!1)}return e})}}return n.className="AlphaDropout",n})()),ee((()=>{class n extends Xe{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=wt(e.betaInitializer||"zeros"),this.gammaInitializer=wt(e.gammaInitializer||"ones"),this.movingMeanInitializer=wt(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=wt(e.movingVarianceInitializer||"ones"),this.betaConstraint=qt(e.betaConstraint),this.gammaConstraint=qt(e.gammaConstraint),this.betaRegularizer=vt(e.betaRegularizer),this.gammaRegularizer=vt(e.gammaRegularizer)}build(e){e=at(e);const s=this.axis>=0?this.axis:this.axis+e.length,r=e[s];if(null==r)throw new O(`Axis ${s} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Xt({ndim:e.length,axes:{[s]:r}})];const o=[r];this.scale&&(this.gamma=this.addWeight("gamma",o,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",o,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",o,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",o,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,s){return P(()=>{const r=null!=s.training&&s.training,o=Oe(e),a=o.shape,i=a.length,l=fs(0,i),u=this.axis>=0?this.axis:this.axis+i;l.splice(u,1);const c=zr(1,i);c[u]=a[u];const h=l.slice();h.sort();const d=!je(h,fs(0,i).slice(0,i-1));if(!r)return(()=>{if(d){const b=F(this.movingMean.read(),c),w=F(this.movingVariance.read(),c),I=this.center?F(this.beta.read(),c):null,k=this.scale?F(this.gamma.read(),c):null;return Ii(o,b,w,I,k,this.epsilon)}return Ii(o,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[f,m,g]=function S2(n,t,e,s,r=.001){return je(s.slice().sort(),fs(0,n.rank-1))?function k2(n,t,e,s,r=.001){return P(()=>{const o=$d(n,s),a=o.mean,i=o.variance;return[Ii(n,a,i,e,t,r),a,i]})}(n,t,e,s,r):function N2(n,t,e,s,r=.001){return P(()=>{const o=$d(n,s),a=o.mean,i=o.variance,l=[];for(const f of fs(0,n.rank))-1!==s.indexOf(f)?l.push(1):l.push(n.shape[f]);const u=F(a,l),c=F(i,l),h=null==t?null:F(t,l),d=null==e?null:F(e,l);return[Ii(n,u,c,d,h,r),a,i]})}(n,t,e,s,r)}(o,this.gamma.read(),this.beta.read(),l,this.epsilon),y=(b,w,I)=>{P(()=>{const k=1-I,S=b.read(),T=R(be(S,w),k);b.write(be(S,T))})};return(()=>{y(this.movingMean,m,this.momentum),y(this.movingVariance,g,this.momentum)})(),f})}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),movingMeanInitializer:kt(this.movingMeanInitializer),movingVarianceInitializer:kt(this.movingVarianceInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer),betaConstraint:Kt(this.betaConstraint),gammaConstraint:Kt(this.gammaConstraint)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="BatchNormalization",n})()),ee((()=>{class n extends Xe{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const s of this.axis)if(!Number.isInteger(s))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=wt(e.betaInitializer||"zeros"),this.gammaInitializer=wt(e.gammaInitializer||"ones"),this.betaRegularizer=vt(e.betaRegularizer),this.gammaRegularizer=vt(e.gammaRegularizer),this.supportsMasking=!0}build(e){const s=(e=at(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let a=0;a<this.axis.length;++a)this.axis[a]<0&&(this.axis[a]+=s);for(const a of this.axis)if(a<0||a>=s)throw new Error(`Invalid axis: ${a}`);if(this.axis.length!==ir(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const r=this.axis.map(a=>e[a]);this.gamma=this.scale?this.addWeight("gamma",r,"float32",this.gammaInitializer,this.gammaRegularizer,!0):null,this.beta=this.center?this.addWeight("beta",r,"float32",this.betaInitializer,this.betaRegularizer,!0):null,this.built=!0}call(e,s){const r=Oe(e),o=r.shape,a=o.length;return P(()=>{let{mean:l,variance:u}=$d(r,this.axis,!0);const c=zr(1,a);for(const g of this.axis)c[g]=o[g];const h=g=>null!=g&&g.shape.length!==a&&this.axis!==[a-1]?F(g,c):g;let d=h(this.gamma.read()),p=h(this.beta.read());const f=[],m=[];for(let g=0;g<a;++g)-1!==this.axis.indexOf(g)?(f.push(o[g]),m.push(1)):(f.push(1),m.push(o[g]));return l=Qn(l,f),u=Qn(u,f),d=Qn(d,m),p=Qn(p,m),Ii(r,l,u,p,d,this.epsilon)})}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:kt(this.betaInitializer),gammaInitializer:kt(this.gammaInitializer),betaRegularizer:ct(this.betaRegularizer),gammaRegularizer:ct(this.gammaRegularizer)},s=super.getConfig();return Object.assign(e,s),e}}return n.className="LayerNormalization",n})()),ee((()=>{class n extends Xe{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new O(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let s,r;if("number"==typeof e.padding[0])s=[e.padding[0],e.padding[0]],r=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new O(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(s=e.padding[0],2!==e.padding[1].length)throw new O(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);r=e.padding[1]}this.padding=[s,r]}this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(e){let s,r;return e=at(e),"channelsFirst"===this.dataFormat?(s=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],s,r]):(s=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,r=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],s,r,e[3]])}call(e,s){return P(()=>function T2(n,t,e){return P(()=>{if(4!==n.rank)throw new O(`temporalPadding expects input tensor to be 4-D, but received a ${n.rank}-D tensor.`);if(null==t&&(t=[[1,1],[1,1]]),2!==t.length||2!==t[0].length||2!==t[1].length)throw new O("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==e&&(e="channelsLast"),"channelsLast"!==e&&"channelsFirst"!==e)throw new O(`Unknown data format: ${e}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let s;return s="channelsFirst"===e?[[0,0],[0,0],t[0],t[1]]:[[0,0],t[0],t[1],[0,0]],uu(n,s)})}(Oe(e),this.padding,this.dataFormat))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},s=super.getConfig();return Object.assign(e,s),e}}return n.className="ZeroPadding2D",n})());class cb extends Xe{constructor(t){if(null==t.poolSize&&(t.poolSize=2),super(t),"number"==typeof t.poolSize)this.poolSize=[t.poolSize];else{if(!Array.isArray(t.poolSize)||1!==t.poolSize.length||"number"!=typeof t.poolSize[0])throw new O(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.poolSize)}`);this.poolSize=t.poolSize}if(sn(this.poolSize,"poolSize"),null==t.strides)this.strides=this.poolSize;else if("number"==typeof t.strides)this.strides=[t.strides];else{if(!Array.isArray(t.strides)||1!==t.strides.length||"number"!=typeof t.strides[0])throw new O(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(t.strides)}`);this.strides=t.strides}sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,Un(this.padding),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){const e=ys((t=at(t))[1],this.poolSize[0],this.padding,this.strides[0]);return[t[0],e,t[2]]}call(t,e){return P(()=>{this.invokeCallHook(t,e),t=fi(Oe(t),2);const s=this.poolingFunction(Oe(t),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return ar(s,[2])})}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides},e=super.getConfig();return Object.assign(t,e),t}}ee((()=>{class n extends cb{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),Qu(e,s,r,o,a,"max")}}return n.className="MaxPooling1D",n})()),ee((()=>{class n extends cb{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),Qu(e,s,r,o,a,"avg")}}return n.className="AveragePooling1D",n})());class hb extends Xe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(2!==t.strides.length)throw new O(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),Un(this.padding),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){t=at(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2];return e=ys(e,this.poolSize[0],this.padding,this.strides[0]),s=ys(s,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s]:[t[0],e,s,t[3]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(Oe(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ee((()=>{class n extends hb{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),Qu(e,s,r,o,a,"max")}}return n.className="MaxPooling2D",n})()),ee((()=>{class n extends hb{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),Qu(e,s,r,o,a,"avg")}}return n.className="AveragePooling2D",n})());class db extends Xe{constructor(t){if(null==t.poolSize&&(t.poolSize=[2,2,2]),super(t),this.poolSize=Array.isArray(t.poolSize)?t.poolSize:[t.poolSize,t.poolSize,t.poolSize],null==t.strides)this.strides=this.poolSize;else if(Array.isArray(t.strides)){if(3!==t.strides.length)throw new O(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${t.strides.length}.`);this.strides=t.strides}else this.strides=[t.strides,t.strides,t.strides];sn(this.poolSize,"poolSize"),sn(this.strides,"strides"),this.padding=null==t.padding?"valid":t.padding,this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),Un(this.padding),this.inputSpec=[new Xt({ndim:5})]}computeOutputShape(t){t=at(t);let e="channelsFirst"===this.dataFormat?t[2]:t[1],s="channelsFirst"===this.dataFormat?t[3]:t[2],r="channelsFirst"===this.dataFormat?t[4]:t[3];return e=ys(e,this.poolSize[0],this.padding,this.strides[0]),s=ys(s,this.poolSize[1],this.padding,this.strides[1]),r=ys(r,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[t[0],t[1],e,s,r]:[t[0],e,s,r,t[4]]}call(t,e){return P(()=>(this.invokeCallHook(t,e),this.poolingFunction(Oe(t),this.poolSize,this.strides,this.padding,this.dataFormat)))}getConfig(){const t={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ee((()=>{class n extends db{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),ub(e,s,r,o,a,"max")}}return n.className="MaxPooling3D",n})()),ee((()=>{class n extends db{constructor(e){super(e)}poolingFunction(e,s,r,o,a){return Rt(a),Un(o),ub(e,s,r,o,a,"avg")}}return n.className="AveragePooling3D",n})());class pb extends Xe{constructor(t){super(t),this.inputSpec=[new Xt({ndim:3})]}computeOutputShape(t){return[t[0],t[2]]}call(t,e){throw new Re}}ee((()=>{class n extends pb{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=Oe(e);return _t(r,1)})}}return n.className="GlobalAveragePooling1D",n})()),ee((()=>{class n extends pb{constructor(e){super(e||{})}call(e,s){return P(()=>{const r=Oe(e);return hs(r,1)})}}return n.className="GlobalMaxPooling1D",n})());class fb extends Xe{constructor(t){super(t),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,Rt(this.dataFormat),this.inputSpec=[new Xt({ndim:4})]}computeOutputShape(t){return"channelsLast"===this.dataFormat?[t[0],t[3]]:[t[0],t[1]]}call(t,e){throw new Re}getConfig(){const t={dataFormat:this.dataFormat},e=super.getConfig();return Object.assign(t,e),t}}ee((()=>{class n extends fb{call(e,s){return P(()=>{const r=Oe(e);return _t(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalAveragePooling2D",n})()),ee((()=>{class n extends fb{call(e,s){return P(()=>{const r=Oe(e);return hs(r,"channelsLast"===this.dataFormat?[1,2]:[2,3])})}}return n.className="GlobalMaxPooling2D",n})());class mb extends Xe{constructor(t){super(t),this.layer=t.layer}build(t){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(t){null!=this.layer&&(this.layer.trainable=t)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(t){this.layer.setWeights(t)}getConfig(){const t={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},e=super.getConfig();return Object.assign(t,e),t}setFastWeightInitDuringBuild(t){super.setFastWeightInitDuringBuild(t),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(t)}static fromConfig(t,e,s={}){const o=Us(e.layer,s);delete e.layer;const a={layer:o};return Object.assign(a,e),new t(a)}}ee((()=>{class n extends mb{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=at(e)).length<3)throw new O(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const s=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(s),this.layer.built=!0),super.build(e)}computeOutputShape(e){const s=[(e=at(e))[0]].concat(e.slice(2)),r=this.layer.computeOutputShape(s);return[r[0],e[1]].concat(r.slice(1))}call(e,s){return P(()=>sb((i,l)=>[Oe(this.layer.call(i,s)),[]],e=Oe(e),[],!1,null,null,!1,!0)[1])}}return n.className="TimeDistributed",n})()),ee((()=>{class n extends mb{constructor(e){super(e);const s=e.layer.getConfig(),r={};r.className=e.layer.getClassName(),r.config=s,this.forwardLayer=Us(r),s.goBackwards=!0!==s.goBackwards;const o={};if(o.className=e.layer.getClassName(),o.config=s,this.backwardLayer=Us(o),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,function $2(n){Br(X$,"BidirectionalMergeMode",n)}(this.mergeMode),e.weights)throw new Re("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const r=Math.floor(e.length/2);this.forwardLayer.setWeights(e.slice(0,r)),this.backwardLayer.setWeights(e.slice(r))}computeOutputShape(e){let r,o,a,s=this.forwardLayer.computeOutputShape(e);return Array.isArray(s)&&Array.isArray(s[0])||(s=[s]),this.returnState&&(a=s.slice(1)),r=s[0],"concat"===this.mergeMode?(r[r.length-1]*=2,o=[r]):o=null==this.mergeMode?[r,r.slice()]:[r],this.returnState?null==this.mergeMode?o.concat(a).concat(a.slice()):[r].concat(a).concat(a.slice()):Sn(o)}apply(e,s){let r=null==s?null:s.initialState,o=null==s?null:s.constants;null==s&&(s={});const a=nb(e,r,o,this.numConstants);if(e=a.inputs,r=a.initialState,o=a.constants,Array.isArray(e)&&(r=e.slice(1),e=e[0]),(null==r||0===r.length)&&null==o)return super.apply(e,s);const i=[],l=[];if(null!=r){const c=r.length;if(c%2>0)throw new O("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");s.initialState=r,i.push(...r);const h=r.map(d=>new Xt({shape:d.shape}));this.forwardLayer.stateSpec=h.slice(0,c/2),this.backwardLayer.stateSpec=h.slice(c/2),l.push(...h)}if(null!=o)throw new Re("Support for constants in Bidirectional layers is not implemented yet.");const u=i[0]instanceof _s;for(const c of i)if(c instanceof _s!==u)throw new O("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(u){const c=[e].concat(i),h=this.inputSpec.concat(l),d=this.inputSpec;this.inputSpec=h;const p=super.apply(c,s);return this.inputSpec=d,p}return super.apply(e,s)}call(e,s){return P(()=>{const r=s.initialState;let o,a,i,l;if(null==r)o=this.forwardLayer.call(e,s),a=this.backwardLayer.call(e,s);else{const u=r.slice(0,r.length/2),c=r.slice(r.length/2);o=this.forwardLayer.call(e,Object.assign(s,{initialState:u})),a=this.backwardLayer.call(e,Object.assign(s,{initialState:c}))}return this.returnState&&(Array.isArray(o)&&(i=o.slice(1).concat(a.slice(1))),o=o[0],a=a[0]),this.returnSequences&&(a=Ms(a,1)),"concat"===this.mergeMode?l=Up([o,a]):"sum"===this.mergeMode?l=se(o,a):"ave"===this.mergeMode?l=R(.5,se(o,a)):"mul"===this.mergeMode?l=R(o,a):null==this.mergeMode&&(l=[o,a]),this.returnState?null==this.mergeMode?l.concat(i):[l].concat(i):l})}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){Vr(this.forwardLayer.name,()=>{this.forwardLayer.build(e)}),Vr(this.backwardLayer.name,()=>{this.backwardLayer.build(e)}),this.built=!0}computeMask(e,s){let r;if(Array.isArray(s)&&(s=s[0]),r=this.returnSequences?null==this.mergeMode?[s,s]:s:null==this.mergeMode?[null,null]:null,this.returnState){const a=this.forwardLayer.states.map(i=>null);return Array.isArray(r)?r.concat(a).concat(a):[r].concat(a).concat(a)}return r}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},s=super.getConfig();return Object.assign(e,s),e}static fromConfig(e,s){const r=Us(s.layer);if(delete s.layer,null!=s.numConstants)throw new Re("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const o=s;return o.layer=r,new e(o)}}return n.className="Bidirectional",n})());var wb,os=(()=>{return(n=os||(os={}))[n.DT_INVALID=0]="DT_INVALID",n[n.DT_FLOAT=1]="DT_FLOAT",n[n.DT_DOUBLE=2]="DT_DOUBLE",n[n.DT_INT32=3]="DT_INT32",n[n.DT_UINT8=4]="DT_UINT8",n[n.DT_INT16=5]="DT_INT16",n[n.DT_INT8=6]="DT_INT8",n[n.DT_STRING=7]="DT_STRING",n[n.DT_COMPLEX64=8]="DT_COMPLEX64",n[n.DT_INT64=9]="DT_INT64",n[n.DT_BOOL=10]="DT_BOOL",n[n.DT_QINT8=11]="DT_QINT8",n[n.DT_QUINT8=12]="DT_QUINT8",n[n.DT_QINT32=13]="DT_QINT32",n[n.DT_BFLOAT16=14]="DT_BFLOAT16",n[n.DT_FLOAT_REF=101]="DT_FLOAT_REF",n[n.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",n[n.DT_INT32_REF=103]="DT_INT32_REF",n[n.DT_UINT8_REF=104]="DT_UINT8_REF",n[n.DT_INT16_REF=105]="DT_INT16_REF",n[n.DT_INT8_REF=106]="DT_INT8_REF",n[n.DT_STRING_REF=107]="DT_STRING_REF",n[n.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",n[n.DT_INT64_REF=109]="DT_INT64_REF",n[n.DT_BOOL_REF=110]="DT_BOOL_REF",n[n.DT_QINT8_REF=111]="DT_QINT8_REF",n[n.DT_QUINT8_REF=112]="DT_QUINT8_REF",n[n.DT_QINT32_REF=113]="DT_QINT32_REF",n[n.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",os;var n})();!function(n){let t;var e;(e=t=n.CheckpointFormatVersion||(n.CheckpointFormatVersion={}))[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(wb||(wb={}));const Ef={};function vb(n){return Ef[n]}function v(n,t,e,s,r){const o=t.inputParams[n];if(o&&void 0!==o.inputIndexStart){const i=o.inputIndexStart,l=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?i+1:o.inputIndexEnd;if("tensor"===o.type)return xn(t.inputNames[o.inputIndexStart],e,s,r);if("tensors"===o.type)return t.inputNames.slice(i,l).map(d=>xn(d,e,s,r));const u=xn(t.inputNames.slice(i)[0],e,s,r),c=u.dataSync();return"number"===o.type?c[0]:Yn(u.shape,c)}const a=t.attrParams[n];return a&&a.value}function xn(n,t,e,s){const[r,o]=An(n);if(null!=s){const i=s.getHashTableHandleByName(r);if(null!=i)return i}const a=e.currentContextIds.find(i=>!!t[tc(r,i)]);return void 0!==a?t[tc(r,a)][o]:void 0}function Gs(n,t){const[e,s,r]=An(n);return[tc(e,t&&t.currentContextId),s,r]}function tc(n,t){return t?`${n}-${t}`:n}function An(n){const t=n.split(":");if(1===t.length)return[n,0,void 0];const s=3===t.length?t[1]:void 0;return[t[0],Number(t[t.length-1]),s]}function nc(n,t,e){let s=v("pad",n,t,e);if("explicit"===s){s=v("explicitPaddings",n,t,e);const r=[[0,0],[0,0],[0,0],[0,0]];for(let o=0;o<4;o++)r[o][0]=s[2*o],r[o][1]=s[2*o+1];return r}return s}function Hs(n){return n.kept?n:tr(n)}const F2=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],O2=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],L2=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],P2=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],z2=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],M2=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],B2=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],V2=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],W2=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],U2=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],G2=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],H2=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],j2=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],K2=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],q2=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],X2=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Y2=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Z2=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],J2=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Ib{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[bt,Pe,_e,Le,ge,z,ae,he,J,re,ye,Ce,ot,Bt,Ot,qn,On,He,Qe].map(s=>s.json));this.opMappers=e.reduce((s,r)=>(s[r.tfOpName]=r,s),{})}transformGraph(t,e={}){const r=[],o=[],a=[],i=t.node.reduce((m,g)=>(m[g.name]=this.mapNode(g),g.op.startsWith("Placeholder")?r.push(m[g.name]):"Const"===g.op?o.push(m[g.name]):(null==g.input||0===g.input.length)&&a.push(m[g.name]),m),{});let l=[];const u=[];let c={},h={};null!=e&&(c=this.mapSignatureEntries(e.inputs),h=this.mapSignatureEntries(e.outputs));const d=Object.keys(i);d.forEach(m=>{const g=i[m];g.inputNames.forEach((y,x)=>{const[b,,w]=Gs(y),I=i[b];if(null!=I.outputs){const k=I.outputs.indexOf(w);-1!==k&&(g.inputNames[x]=`${b}:${k}`)}g.inputs.push(I),I.children.push(g)})}),0===Object.keys(h).length?d.forEach(m=>{const g=i[m];0===g.children.length&&u.push(g)}):Object.keys(h).forEach(m=>{const[g]=Gs(m),y=i[g];null!=y&&(y.signatureKey=h[m],u.push(y))}),Object.keys(c).length>0?Object.keys(c).forEach(m=>{const[g]=Gs(m),y=i[g];y&&(y.signatureKey=c[m],l.push(y))}):l=r;let p={};null!=t.library&&null!=t.library.function&&(p=t.library.function.reduce((m,g)=>(m[g.signature.name]=this.mapFunction(g),m),{}));const f={nodes:i,inputs:l,outputs:u,weights:o,placeholders:r,signature:e,functions:p};return a.length>0&&(f.initNodes=a),f}mapSignatureEntries(t){return Object.keys(t||{}).reduce((e,s)=>(e[t[s].name]=s,e),{})}mapNode(t){const e=vb(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const s={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map(r=>r.startsWith("^")?r.substr(1):r),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr,outputs:e.outputs};return null!=e.inputs&&(s.inputParams=e.inputs.reduce((r,o)=>(r[o.name]={type:o.type,inputIndexStart:o.start,inputIndexEnd:o.end},r),{})),null!=e.attrs&&(s.attrParams=e.attrs.reduce((r,o)=>{const a=o.type;let i;switch(o.type){case"string":i=Af(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Af(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"string[]":i=Mf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Mf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number":i=Rf(t.attr,o.tfName,o.defaultValue||0),void 0===i&&o.tfDeprecatedName&&(i=Rf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"number[]":i=zf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=zf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool":i=Df(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Df(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"bool[]":i=Vf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Vf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape":i=Pf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Pf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"shape[]":i=Bf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Bf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype":i=Of(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Of(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"dtype[]":i=Lf(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=Lf(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"func":i=kb(t.attr,o.tfName,o.defaultValue),void 0===i&&o.tfDeprecatedName&&(i=kb(t.attr,o.tfDeprecatedName,o.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${o.type} for op: ${t.op}`)}return r[o.name]={value:i,type:a},r},{})),s}mapFunction(t){const e=t.nodeDef,r=[];let o={};null!=e&&(o=e.reduce((h,d)=>(h[d.name]=this.mapNode(d),"Const"===d.op&&r.push(h[d.name]),h),{}));const a=[],i=[];t.signature.inputArg.forEach(h=>{const[d]=Gs(h.name),p={name:d,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Ff(h.type),type:"dtype"}},children:[]};p.signatureKey=h.name,a.push(p),o[d]=p}),Object.keys(o).forEach(h=>{const d=o[h];d.inputNames.forEach((p,f)=>{const[m,,g]=Gs(p),y=o[m];if(null!=y.outputs){const x=y.outputs.indexOf(g);-1!==x&&(d.inputNames[f]=`${m}:${x}`)}d.inputs.push(y),y.children.push(d)})});const u=t.ret;t.signature.outputArg.forEach(h=>{const[d,p]=Gs(u[h.name]),f=o[d];null!=f&&(f.defaultOutput=p,i.push(f))});const c=this.mapArgsToSignature(t);return{nodes:o,inputs:a,outputs:i,weights:r,placeholders:[],signature:c}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s),e),{}),outputs:t.signature.outputArg.reduce((e,s)=>(e[s.name]=this.mapArgToTensorInfo(s,t.ret),e),{})}}mapArgToTensorInfo(t,e){let s=t.name;return null!=e&&(s=e[s]),{name:s,dtype:t.type}}}function Cb(n,t){const e=Array.isArray(n)?String.fromCharCode.apply(null,n):function Q2(n){const t=X().global;if(typeof t.atob<"u")return t.atob(n);if(typeof Buffer<"u")return new Buffer(n,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(n);return t?e:e.toLowerCase()}function Af(n,t,e,s=!1){const r=n[t];return null!=r?Cb(r.s,s):e}function Df(n,t,e){const s=n[t];return s?s.b:e}function Rf(n,t,e){const s=n[t]||{},r=null!=s.i?s.i:null!=s.f?s.f:e;return"number"==typeof r?r:parseInt(r,10)}function Ff(n){switch("string"==typeof n&&(n=os[n]),n){case os.DT_FLOAT:return"float32";case os.DT_INT32:case os.DT_INT64:case os.DT_INT8:case os.DT_UINT8:return"int32";case os.DT_BOOL:return"bool";case os.DT_DOUBLE:return"float32";case os.DT_STRING:return"string";default:return null}}function kb(n,t,e){const s=n[t];return s&&s.func?s.func.name:e}function Of(n,t,e){const s=n[t];return s&&s.type?Ff(s.type):e}function Lf(n,t,e){const s=n[t];return s&&s.list&&s.list.type?s.list.type.map(r=>Ff(r)):e}function Nb(n){if(!n.unknownRank)return null!=n.dim?n.dim.map(t=>"number"==typeof t.size?t.size:parseInt(t.size,10)):[]}function Pf(n,t,e){const s=n[t];return s&&s.shape?Nb(s.shape):e}function zf(n,t,e){const s=n[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map(r=>"number"==typeof r?r:parseInt(r,10)):e}function Mf(n,t,e,s=!1){const r=n[t];return r&&r.list&&r.list.s?r.list.s.map(o=>Cb(o,s)):e}function Bf(n,t,e){const s=n[t];return s&&s.list&&s.list.shape?s.list.shape.map(r=>Nb(r)):e}function Vf(n,t,e){const s=n[t];return s&&s.list&&s.list.b?s.list.b:e}class eE{constructor(t,e,s){this.node=t,this.tensorMap=e,this.context=s,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map(r=>this.getInput(r)),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce((r,o)=>(r[o]=this.getAttr(o),r),{}))}getInput(t){return xn(t,this.tensorMap,this.context)}getAttr(t,e){const s=this.node.rawAttrs[t];if(null!=s.tensor)return xn(t,this.tensorMap,this.context);if(null!=s.i||null!=s.f)return Rf(this.node.rawAttrs,t,e);if(null!=s.s)return Af(this.node.rawAttrs,t,e);if(null!=s.b)return Df(this.node.rawAttrs,t,e);if(null!=s.shape)return Pf(this.node.rawAttrs,t,e);if(null!=s.type)return Of(this.node.rawAttrs,t,e);if(null!=s.list){if(null!=s.list.i||null!=s.list.f)return zf(this.node.rawAttrs,t,e);if(null!=s.list.s)return Mf(this.node.rawAttrs,t,e);if(null!=s.list.shape)return Bf(this.node.rawAttrs,t,e);if(null!=s.list.b)return Vf(this.node.rawAttrs,t,e);if(null!=s.list.type)return Lf(this.node.rawAttrs,t,e)}return e}}const nE=D({addN_:function tE(n){C(Array.isArray(n),()=>"The argument passed to tf.addN() must be a list of tensors"),C(n.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${n.length}`);const t=n.map((r,o)=>N(r,`tensors${o}`,"addN")),e=t[0];return t.forEach(r=>{if(r.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(r=>{if(!je(r.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}),A.runKernel(Mi,t)}}),sE=(n,t,e)=>{switch(n.op){case"BiasAdd":case"AddV2":case"Add":return[se(v("a",n,t,e),v("b",n,t,e))];case"AddN":return[nE(v("tensors",n,t,e))];case"FloorMod":case"Mod":return[Gy(v("a",n,t,e),v("b",n,t,e))];case"Mul":return[R(v("a",n,t,e),v("b",n,t,e))];case"RealDiv":case"Div":return[ke(v("a",n,t,e),v("b",n,t,e))];case"DivNoNan":return[zy(v("a",n,t,e),v("b",n,t,e))];case"FloorDiv":return[Nd(v("a",n,t,e),v("b",n,t,e))];case"Sub":return[be(v("a",n,t,e),v("b",n,t,e))];case"Minimum":return[ti(v("a",n,t,e),v("b",n,t,e))];case"Maximum":return[Ps(v("a",n,t,e),v("b",n,t,e))];case"Pow":return[Or(v("a",n,t,e),v("b",n,t,e))];case"SquaredDifference":return[Zd(v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},rE=(n,t,e)=>{switch(n.op){case"Abs":case"ComplexAbs":return[Wt(v("x",n,t,e))];case"Acos":return[Ty(v("x",n,t,e))];case"Acosh":return[$y(v("x",n,t,e))];case"Asin":return[Ey(v("x",n,t,e))];case"Asinh":return[Ay(v("x",n,t,e))];case"Atan":return[Dy(v("x",n,t,e))];case"Atan2":return[Ry(v("x",n,t,e),v("y",n,t,e))];case"Atanh":return[Fy(v("x",n,t,e))];case"Ceil":return[Oy(v("x",n,t,e))];case"Complex":return[Sr(v("real",n,t,e),v("imag",n,t,e))];case"Cos":return[Eu(v("x",n,t,e))];case"Cosh":return[Rp(v("x",n,t,e))];case"Elu":return[Za(v("x",n,t,e))];case"Erf":return[My(v("x",n,t,e))];case"Exp":return[Pn(v("x",n,t,e))];case"Expm1":return[By(v("x",n,t,e))];case"Floor":return[Qa(v("x",n,t,e))];case"Log":return[Bn(v("x",n,t,e))];case"Log1p":return[iu(v("x",n,t,e))];case"Imag":return[Pd(v("x",n,t,e))];case"Neg":return[Ct(v("x",n,t,e))];case"Reciprocal":return[Hy(v("x",n,t,e))];case"Real":return[fu(v("x",n,t,e))];case"Relu":return[ks(v("x",n,t,e))];case"Round":return[Xd(v("x",n,t,e))];case"Selu":return[Rd(v("x",n,t,e))];case"Sigmoid":return[Rr(v("x",n,t,e))];case"Sin":return[$p(v("x",n,t,e))];case"Sign":return[jy(v("x",n,t,e))];case"Sinh":return[_p(v("x",n,t,e))];case"Softplus":return[xo(v("x",n,t,e))];case"Sqrt":return[fn(v("x",n,t,e))];case"Square":return[ut(v("x",n,t,e))];case"Tanh":return[pu(v("x",n,t,e))];case"Tan":return[qy(v("x",n,t,e))];case"ClipByValue":return[_n(v("x",n,t,e),v("clipValueMin",n,t,e),v("clipValueMax",n,t,e))];case"Relu6":return[Bd(v("x",n,t,e))];case"Rsqrt":return[Ap(xn(n.inputNames[0],t,e))];case"Prod":return[Op(v("x",n,t,e),v("axes",n,t,e))];case"LeakyRelu":return[au(v("x",n,t,e),v("alpha",n,t,e))];case"Prelu":return[cu(v("x",n,t,e),v("alpha",n,t,e))];case"IsNan":return[Vy(xn(n.inputNames[0],t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};function as(n,t,e=""){if("number"!=typeof n&&"number"!=typeof t){C(n.length===t.length,()=>e+` Shapes ${n} and ${t} must match`);for(let s=0;s<n.length;s++){const r=n[s],o=t[s];C(r<0||o<0||r===o,()=>e+` Shapes ${n} and ${t} must match`)}}}function Sb(n){return!("number"==typeof n||n.some(t=>t<0))}function Ci(n,t,e){let s=Wf(n,e);const r=!Sb(s);if(r&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(r&&t.forEach(o=>{s=Wf(o.shape,s)}),!Sb(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Wf(n,t){if("number"==typeof n)return t;if("number"==typeof t)return n;if(n.length!==t.length)throw new Error(`Incompatible ranks during merge: ${n} vs. ${t}`);const e=[];for(let s=0;s<n.length;++s){const r=n[s],o=t[s];if(r>=0&&o>=0&&r!==o)throw new Error(`Incompatible shape during merge: ${n} vs. ${t}`);e[s]=r>=0?r:o}return e}class oE{constructor(t,e,s,r,o,a,i){this.name=t,this.dtype=e,this.maxSize=s,this.elementShape=r,this.identicalElementShapes=o,this.dynamicSize=a,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=Ne(0),ln(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.tensor.id))&&e.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||t>=this.size())throw new Error(`Tried to read from index ${t}, but array size is: ${this.size()}`);const e=this.tensors[t];if(e.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${t} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(e.cleared=!0),e.read=!0,e.tensor}readMany(t){return t.map(e=>this.read(e))}write(t,e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(t<0||!this.dynamicSize&&t>=this.maxSize)throw new Error(`Tried to write to index ${t}, but array is not resizeable and size is: ${this.maxSize}`);const s=this.tensors[t]||{};if(e.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t},\n          because the value dtype is ${e.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0===this.size()&&(null==this.elementShape||0===this.elementShape.length)&&(this.elementShape=e.shape),as(this.elementShape,e.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${t}.`),s.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been read.`);if(s.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${t}, because it has already been written.`);s.tensor=e,ln(e),s.written=!0,this.tensors[t]=s}writeMany(t,e){if(t.length!==e.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${t.length} is not the same as tensors size: ${e.length}.`);t.forEach((s,r)=>this.write(s,e[r]))}gather(t,e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${e}`);if(t)t=t.slice(0,this.size());else{t=[];for(let r=0;r<this.size();r++)t.push(r)}if(0===t.length)return Qs([],[0].concat(this.elementShape));const s=this.readMany(t);return as(this.elementShape,s[0].shape,"TensorArray shape mismatch: "),es(s,0)}concat(t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${t}`);if(0===this.size())return Qs([],[0].concat(this.elementShape));const e=[];for(let r=0;r<this.size();r++)e.push(r);const s=this.readMany(e);return as(this.elementShape,s[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${s[0].shape})`),Ut(s,0)}scatter(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(!this.dynamicSize&&s>=this.maxSize)throw new Error(`Max index must be < array size (${s}  vs. ${this.maxSize})`);this.writeMany(t,ds(e,0))}split(t,e){if(e.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${e.dtype}`);let s=0;const r=t.map(l=>(s+=l,s));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);if(!this.dynamicSize&&t.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${t.length}), and the TensorArray is not marked as dynamically resizeable`);const o=0===s?0:e.size/s,a=[];P(()=>{e=F(e,[1,s,o]);for(let l=0;l<t.length;++l)a[l]=F(nt(e,[0,0===l?0:r[l-1],0],[1,t[l],o]),this.elementShape);return a});const i=[];for(let l=0;l<t.length;l++)i[l]=l;this.writeMany(i,a)}}class To{constructor(t,e,s,r=-1){this.tensors=t,this.elementShape=e,this.elementDtype=s,t?.forEach(o=>{if(s!==o.dtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${o.dtype}`);as(e,o.shape,"TensorList shape mismatch: "),ln(o)}),this.idTensor=Ne(0),this.maxNumElements=r,ln(this.idTensor)}get id(){return this.idTensor.id}copy(){return new To([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(t){this.tensors.forEach(e=>{(null==t||!t.has(e.id))&&e.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(t,e,s=-1){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(-1!==s&&this.tensors.length!==s)throw new Error(`Operation expected a list with ${s} elements but got a list with ${this.tensors.length} elements.`);as(t,this.elementShape,"TensorList shape mismatch: ");const r=Ci(this.elementShape,this.tensors,t);return P(()=>{const o=this.tensors.map(a=>F(a,r));return es(o,0)})}popBack(t,e){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const s=Ci(this.elementShape,this.tensors,t),r=this.tensors.pop();return as(r.shape,t,"TensorList shape mismatch: "),F(r,s)}pushBack(t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(as(t.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ln(t),this.tensors.push(t)}resize(t){if(t<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${t}`);if(-1!==this.maxNumElements&&t>this.maxNumElements)throw new Error(`TensorListResize input size ${t} is greater maxNumElement ${this.maxNumElements}.`);this.tensors.length=t}getItem(t,e,s){if(s!==this.elementDtype)throw new Error(`Invalid data types; op elements ${s}, but list elements ${this.elementDtype}`);if(t<0||t>this.tensors.length)throw new Error(`Trying to access element ${t} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[t])throw new Error(`element at index ${t} is null.`);as(this.tensors[t].shape,e,"TensorList shape mismatch: ");const r=Ci(this.elementShape,this.tensors,e);return F(this.tensors[t],r)}setItem(t,e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(t<0||-1!==this.maxNumElements&&t>=this.maxNumElements)throw new Error(`Trying to set element ${t} in a list with max ${this.maxNumElements} elements.`);as(this.elementShape,e.shape,"TensorList shape mismatch: "),ln(e),this.tensors[t]=e}gather(t,e,s){if(e!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e}, but list elements ${this.elementDtype}`);as(this.elementShape,s,"TensorList shape mismatch: "),t=t.slice(0,this.size());const r=Ci(this.elementShape,this.tensors,s);return 0===t.length?Qs([],[0].concat(r)):P(()=>{const o=t.map(a=>F(this.tensors[a],r));return es(o,0)})}concat(t,e){if(t&&t!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${t}`);as(this.elementShape,e,"TensorList shape mismatch: ");const s=Ci(this.elementShape,this.tensors,e);return 0===this.size()?Qs([],[0].concat(s)):P(()=>{const r=this.tensors.map(o=>F(o,s));return Ut(r,0)})}}const cE=function(){var n=L(function*(t,e,s){switch(t.op){case"If":case"StatelessIf":{const r=v("thenBranch",t,e,s),o=v("elseBranch",t,e,s),a=v("cond",t,e,s),i=v("args",t,e,s);return(yield a.data())[0]?s.functionMap[r].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap):s.functionMap[o].executeFunctionAsync(i,s.tensorArrayMap,s.tensorListMap)}case"While":case"StatelessWhile":{const r=v("body",t,e,s),o=v("cond",t,e,s),a=v("args",t,e,s),i=yield s.functionMap[o].executeFunctionAsync(a,s.tensorArrayMap,s.tensorListMap),l=a.map(h=>h.id);let u=yield i[0].data();i.forEach(h=>{!h.kept&&-1===l.indexOf(h.id)&&h.dispose()});let c=a;for(;u[0];){const h=c;c=yield s.functionMap[r].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);const d=c.map(f=>f.id);h.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()});const p=yield s.functionMap[o].executeFunctionAsync(c,s.tensorArrayMap,s.tensorListMap);u=yield p[0].data(),p.forEach(f=>{!f.kept&&-1===l.indexOf(f.id)&&-1===d.indexOf(f.id)&&f.dispose()})}return c}case"LoopCond":return[Hs(v("pred",t,e,s))];case"Switch":{const r=v("pred",t,e,s);let o=v("data",t,e,s);return o.kept||(o=Hs(o)),(yield r.data())[0]?[void 0,o]:[o,void 0]}case"Merge":{const r=t.inputNames.find(o=>void 0!==xn(o,e,s));return r?[Hs(xn(r,e,s))]:void 0}case"Enter":{const r=v("frameName",t,e,s),o=v("tensor",t,e,s);return s.enterFrame(r),[Hs(o)]}case"Exit":{const r=v("tensor",t,e,s);return s.exitFrame(),[Hs(r)]}case"NextIteration":{const r=v("tensor",t,e,s);return s.nextIteration(),[Hs(r)]}case"TensorArrayV3":{const r=v("size",t,e,s),o=v("dtype",t,e,s),a=v("elementShape",t,e,s),i=v("dynamicSize",t,e,s),l=v("clearAfterRead",t,e,s),u=v("identicalElementShapes",t,e,s),c=v("name",t,e,s),h=new oE(c,o,r,a,u,i,l);return s.addTensorArray(h),[h.idTensor,Ne(1)]}case"TensorArrayWriteV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.write(o,a),[i.idTensor]}case"TensorArrayReadV3":{const r=v("tensorArrayId",t,e,s),o=v("index",t,e,s);return[s.getTensorArray(r.id).read(o)]}case"TensorArrayGatherV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("dtype",t,e,s);return[s.getTensorArray(r.id).gather(o,a)]}case"TensorArrayScatterV3":{const r=v("tensorArrayId",t,e,s),o=v("indices",t,e,s),a=v("tensor",t,e,s),i=s.getTensorArray(r.id);return i.scatter(o,a),[i.idTensor]}case"TensorArrayConcatV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id),a=v("dtype",t,e,s);return[o.concat(a)]}case"TensorArraySplitV3":{const r=v("tensorArrayId",t,e,s),o=v("tensor",t,e,s),a=v("lengths",t,e,s),i=s.getTensorArray(r.id);return i.split(a,o),[i.idTensor]}case"TensorArraySizeV3":{const r=v("tensorArrayId",t,e,s);return[Ne(s.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=v("tensorArrayId",t,e,s),o=s.getTensorArray(r.id);return o.clearAndClose(),[o.idTensor]}case"TensorListSetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("tensor",t,e,s),i=s.getTensorList(r.id);return i.setItem(o,a),[i.idTensor]}case"TensorListGetItem":{const r=v("tensorListId",t,e,s),o=v("index",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).getItem(o,a,i)]}case"TensorListScatterV2":case"TensorListScatter":{const r=v("indices",t,e,s),l=function lE(n,t,e,s){if(t.length!==n.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${n.shape[0]}`);const r=Math.max(...t);if(null!=s&&-1!==s&&r>=s)throw new Error(`Max index must be < array size (${r}  vs. ${s})`);const o=new To([],e,n.dtype,s),a=ds(n,0);return t.forEach((i,l)=>{o.setItem(i,a[l])}),o}(v("tensor",t,e,s),r,v("elementShape",t,e,s),v("numElements",t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=v("elementShape",t,e,s),o=v("elementDType",t,e,s);let a;a="TensorListReserve"===t.op?"numElements":"maxNumElements";const l=function iE(n,t,e){return new To([],n,t,e)}(r,o,v(a,t,e,s));return s.addTensorList(l),[l.idTensor]}case"TensorListGather":{const r=v("tensorListId",t,e,s),o=v("indices",t,e,s),a=v("elementShape",t,e,s),i=v("elementDType",t,e,s);return[s.getTensorList(r.id).gather(o,i,a)]}case"TensorListStack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s),i=v("numElements",t,e,s);return[s.getTensorList(r.id).stack(o,a,i)]}case"TensorListFromTensor":{const i=function aE(n,t,e){const s=n.dtype;if(n.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${n.shape}`);if(n.dtype!==e)throw new Error(`Invalid data types; op elements ${n.dtype}, but list elements ${e}`);as(n.shape.slice(1),t,"TensorList shape mismatch: ");const o=ds(n);return new To(o,t,s)}(v("tensor",t,e,s),v("elementShape",t,e,s),v("elementDType",t,e,s));return s.addTensorList(i),[i.idTensor]}case"TensorListConcat":{const r=v("tensorListId",t,e,s),o=s.getTensorList(r.id),a=v("dtype",t,e,s),i=v("elementShape",t,e,s);return[o.concat(a,i)]}case"TensorListPushBack":{const r=v("tensorListId",t,e,s),o=v("tensor",t,e,s),a=s.getTensorList(r.id);return a.pushBack(o),[a.idTensor]}case"TensorListPopBack":{const r=v("tensorListId",t,e,s),o=v("elementShape",t,e,s),a=v("elementDType",t,e,s);return[s.getTensorList(r.id).popBack(o,a)]}case"TensorListSplit":{const r=v("tensor",t,e,s),o=v("elementShape",t,e,s),i=function uE(n,t,e){let s=0;const r=t.map(c=>(s+=c,s));if(s!==n.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${n.shape}`);const a=Wf(n.shape.slice(1),e),i=0===s?0:n.size/s,l=P(()=>{const c=[];n=F(n,[1,s,i]);for(let h=0;h<t.length;++h)c[h]=F(nt(n,[0,0===h?0:r[h-1],0],[1,t[h],i]),a);return n.dispose(),c}),u=new To([],e,n.dtype,t.length);for(let c=0;c<l.length;c++)u.setItem(c,l[c]);return u}(r,v("lengths",t,e,s),o);return s.addTensorList(i),[i.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}(),dE=D({maxPoolWithArgmax_:function hE(n,t,e,s,r=!1){const a={x:N(n,"x","maxPoolWithArgmax")},l=A.runKernel(fh,a,{filterSize:t,strides:e,pad:s,includeBatchInIndex:r});return{result:l[0],indexes:l[1]}}});function Tb(n,t,e){const[s,r]=v("fusedOps",n,t,e),o="biasadd"===s,a=!o,i="prelu"===r,l="fusedbatchnorm"===s,u=v("numArgs",n,t,e);if(o){if(i&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&o&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=v("strides",n,t,e),h=nc(n,t,e),d=v("dataFormat",n,t,e).toUpperCase(),p=v("dilations",n,t,e);let[f,m]=v("args",n,t,e);return a&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:d,dilations:p,biasArg:f,preluArg:m,activationFunc:r,leakyreluAlpha:v("leakyreluAlpha",n,t,e)}}const pE=(n,t,e)=>{switch(n.op){case"Conv1D":{const s=v("stride",n,t,e),r=v("pad",n,t,e),o=v("dataFormat",n,t,e).toUpperCase(),a=v("dilation",n,t,e);return[Id(v("x",n,t,e),v("filter",n,t,e),s,r,o,a)]}case"Conv2D":{const s=v("strides",n,t,e),r=nc(n,t,e),o=v("dataFormat",n,t,e).toUpperCase(),a=v("dilations",n,t,e);return[or(v("x",n,t,e),v("filter",n,t,e),[s[1],s[2]],r,o,[a[1],a[2]])]}case"_FusedConv2D":{const{stride:s,pad:r,dataFormat:o,dilations:a,biasArg:i,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Tb(n,t,e);return[jg({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[a[1],a[2]],bias:i,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:r,dataFormat:o,dilations:a,biasArg:i,preluArg:l,activationFunc:u,leakyreluAlpha:c}=Tb(n,t,e);return[ok({x:v("x",n,t,e),filter:v("filter",n,t,e),strides:[s[1],s[2]],pad:r,dataFormat:o,dilations:[a[1],a[2]],bias:i,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=v("outputShape",n,t,e),r=v("strides",n,t,e),o=nc(n,t,e);return[kd(v("x",n,t,e),v("filter",n,t,e),s,[r[1],r[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=v("strides",n,t,e),r=nc(n,t,e),o=v("dilations",n,t,e),a=v("dataFormat",n,t,e).toUpperCase();return[Ya(v("input",n,t,e),v("filter",n,t,e),[s[1],s[2]],r,a,[o[1],o[2]])]}case"Conv3D":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("dataFormat",n,t,e).toUpperCase(),a=v("dilations",n,t,e);return[Mg(v("x",n,t,e),v("filter",n,t,e),[s[1],s[2],s[3]],r,o,[a[1],a[2],a[3]])]}case"AvgPool":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("kernelSize",n,t,e);return[ou(v("x",n,t,e),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPool":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("kernelSize",n,t,e);return[lu(v("x",n,t,e),[o[1],o[2]],[s[1],s[2]],r)]}case"MaxPoolWithArgmax":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("kernelSize",n,t,e),a=v("includeBatchInIndex",n,t,e),{result:i,indexes:l}=dE(v("x",n,t,e),[o[1],o[2]],[s[1],s[2]],r,a);return[i,l]}case"AvgPool3D":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("kernelSize",n,t,e);return[zg(v("x",n,t,e),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"MaxPool3D":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("kernelSize",n,t,e);return[Wg(v("x",n,t,e),[o[1],o[2],o[3]],[s[1],s[2],s[3]],r)]}case"Dilation2D":{const s=v("strides",n,t,e),r=v("pad",n,t,e),o=v("dilations",n,t,e),a=s[1],i=s[2],l=o[1],u=o[2];return[Py(v("x",n,t,e),v("filter",n,t,e),[a,i],r,[l,u],"NHWC")]}default:throw TypeError(`Node type ${n.op} is not implemented`)}};function fE(n,t,e){if(e<=0)throw new Error("The number of values should be positive.");return A.runKernel(ch,{},{start:n,stop:t,num:e})}const gE=D({multinomial_:function mE(n,t,e,s=!1){const r=N(n,"logits","multinomial"),o=r.size,a=r.rank;if(o<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${o}.`);if(a>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);e=e||Math.random();const l={logits:1===a?F(r,[1,-1]):r},c=A.runKernel(mh,l,{numSamples:t,seed:e,normalized:s});return 1===a?F(c,[c.size]):c}}),yE=(n,t,e)=>{switch(n.op){case"Fill":{const s=v("shape",n,t,e),r=v("dtype",n,t,e);return[Ja(s,v("value",n,t,e),r)]}case"LinSpace":return[fE(v("start",n,t,e),v("stop",n,t,e),v("num",n,t,e))];case"Multinomial":{const s=v("logits",n,t,e),r=v("numSamples",n,t,e),o=v("seed",n,t,e);return[gE(s,r,o)]}case"OneHot":{const s=v("indices",n,t,e),r=v("depth",n,t,e),o=v("onValue",n,t,e),a=v("offValue",n,t,e);return[_d(s,r,o,a)]}case"Ones":return[zs(v("shape",n,t,e),v("dtype",n,t,e))];case"OnesLike":return[Vn(v("x",n,t,e))];case"RandomUniform":return[ni(v("shape",n,t,e),v("minval",n,t,e),v("maxval",n,t,e),v("dtype",n,t,e))];case"Range":return[ai(v("start",n,t,e),v("stop",n,t,e),v("step",n,t,e),v("dtype",n,t,e))];case"TruncatedNormal":{const s=v("shape",n,t,e),r=v("mean",n,t,e),o=v("stdDev",n,t,e),a=v("seed",n,t,e);return[Ld(s,r,o,v("dtype",n,t,e),a)]}case"Zeros":return[Ht(v("shape",n,t,e),v("dtype",n,t,e))];case"ZerosLike":return[Ke(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};function Uf(){return(Uf=L(function*(n){const t=N(n,"condition","whereAsync","bool"),e=yield t.data(),s=Tp(t.shape,e);return n!==t&&t.dispose(),s})).apply(this,arguments)}const bE=function xE(n){return Uf.apply(this,arguments)};function Gf(){return(Gf=L(function*(n,t){const e=N(n,"x","setdiff1d"),s=N(t,"y","setdiff1d");C(e.dtype===s.dtype,()=>`x and y should have the same dtype, but got x (${e.dtype}) and y (${s.dtype}).`),C(1===e.rank,()=>`x should be 1D tensor, but got x (${e.shape}).`),C(1===s.rank,()=>`y should be 1D tensor, but got y (${s.shape}).`);const r=yield e.data(),o=yield s.data(),a=new Set(o);let i=0;for(let c=0;c<r.length;c++)a.has(r[c])||i++;const l=new en([i],e.dtype),u=new en([i],"int32");for(let c=0,h=0;c<r.length;c++)a.has(r[c])||(l.values[h]=r[c],u.values[h]=c,h++);return[l.toTensor(),u.toTensor()]})).apply(this,arguments)}function Hf(n,t,e){return{boxes:v("boxes",n,t,e),scores:v("scores",n,t,e),maxOutputSize:v("maxOutputSize",n,t,e),iouThreshold:v("iouThreshold",n,t,e),scoreThreshold:v("scoreThreshold",n,t,e),softNmsSigma:v("softNmsSigma",n,t,e)}}const IE=function(){var n=L(function*(t,e,s){switch(t.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:o,maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=Hf(t,e,s),c=yield ts.nonMaxSuppressionWithScoreAsync(r,o,a,i,l,u);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:o,maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=Hf(t,e,s),u=v("padToMaxOutputSize",t,e,s),c=yield ts.nonMaxSuppressionPaddedAsync(r,o,a,i,l,u);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:o,maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=Hf(t,e,s);return[yield ts.nonMaxSuppressionAsync(r,o,a,i,l)]}case"Where":{const r=ue(v("condition",t,e,s),"bool"),o=[yield bE(r)];return r.dispose(),o}case"ListDiff":return function wE(n,t){return Gf.apply(this,arguments)}(v("x",t,e,s),v("y",t,e,s));default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r){return n.apply(this,arguments)}}(),CE=(n,t,e)=>{switch(n.op){case"TopKV2":{const s=v("x",n,t,e),r=v("k",n,t,e),o=v("sorted",n,t,e),a=Xy(s,r,o);return[a.values,a.indices]}case"Unique":{const s=v("x",n,t,e),r=Lp(s);return[r.values,r.indices]}case"UniqueV2":{const s=v("x",n,t,e),r=v("axis",n,t,e),o=Lp(s,r);return[o.values,o.indices]}default:throw TypeError(`Node type ${n.op} is not implemented`)}},kE=(n,t,e)=>{switch(n.op){case"Const":return t[n.name];case"PlaceholderWithDefault":const s=v("default",n,t,e);return[xn(n.name,t,e)||s];case"Placeholder":return[xn(n.name,t,e)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Hs(v("x",n,t,e))];case"IdentityN":return v("x",n,t,e).map(u=>Hs(u));case"Shape":return[gn(v("x",n,t,e).shape,"int32")];case"ShapeN":return v("x",n,t,e).map(u=>gn(u.shape));case"Size":return[Ne(v("x",n,t,e).size,"int32")];case"Rank":return[Ne(v("x",n,t,e).rank,"int32")];case"NoOp":return[Ne(1)];case"Print":const o=v("x",n,t,e),a=v("data",n,t,e),i=v("message",n,t,e),l=v("summarize",n,t,e);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let u=0;u<a.length;u++)console.log(Array.prototype.slice.call(a[u].dataSync()).slice(0,l));return[o];default:throw TypeError(`Node type ${n.op} is not implemented`)}};class NE{constructor(t,e){this.keyDType=t,this.valueDType=e,this.handle=Ne(0),this.tensorMap=new Map,ln(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(t=>t.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Ne(this.size(),"int32")}import(t,e){var s=this;return L(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return s.tensorMap.forEach(o=>o.dispose()),s.tensorMap.clear(),P(()=>{const o=ds(e),a=r.length,i=o.length;C(a===i,()=>`The number of elements doesn't match, keys has ${a} elements, the values has ${i} elements.`);for(let l=0;l<a;l++){const u=r[l],c=o[l];ln(c),s.tensorMap.set(u,c)}return s.handle})})()}find(t,e){var s=this;return L(function*(){s.checkKeyAndValueTensor(t,e);const r=yield t.data();return P(()=>{const o=[];for(let a=0;a<r.length;a++){const l=s.findWithDefault(r[a],e);o.push(l)}return es(o)})})()}findWithDefault(t,e){return this.tensorMap.get(t)??e}checkKeyAndValueTensor(t,e){if(t.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${t.dtype}`);if(e.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${e.dtype}`)}}const SE=function(){var n=L(function*(t,e,s,r){switch(t.op){case"HashTable":case"HashTableV2":{const o=v("keyDType",t,e,s),a=v("valueDType",t,e,s),i=new NE(o,a);return r.addHashTable(t.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("values",t,e,s);return[yield r.getHashTableById(o.id).import(a,i)]}case"LookupTableFind":case"LookupTableFindV2":{const o=v("tableHandle",t,e,s,r),a=v("keys",t,e,s),i=v("defaultValue",t,e,s);return[yield r.getHashTableById(o.id).find(a,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const o=v("tableHandle",t,e,s,r);return[r.getHashTableById(o.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}});return function(e,s,r,o){return n.apply(this,arguments)}}(),TE=(n,t,e)=>{switch(n.op){case"ResizeBilinear":{const s=v("images",n,t,e),r=v("size",n,t,e),o=v("alignCorners",n,t,e),a=v("halfPixelCenters",n,t,e);return[ts.resizeBilinear(s,[r[0],r[1]],o,a)]}case"ResizeNearestNeighbor":{const s=v("images",n,t,e),r=v("size",n,t,e),o=v("alignCorners",n,t,e),a=v("halfPixelCenters",n,t,e);return[ts.resizeNearestNeighbor(s,[r[0],r[1]],o,a)]}case"CropAndResize":{const s=v("image",n,t,e),r=v("boxes",n,t,e),o=v("boxInd",n,t,e),a=v("cropSize",n,t,e),i=v("method",n,t,e),l=v("extrapolationValue",n,t,e);return[ts.cropAndResize(s,r,o,a,i,l)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}},$E=(n,t,e)=>{switch(n.op){case"Equal":return[cs(v("a",n,t,e),v("b",n,t,e))];case"NotEqual":return[yo(v("a",n,t,e),v("b",n,t,e))];case"Greater":return[Mn(v("a",n,t,e),v("b",n,t,e))];case"GreaterEqual":return[Dr(v("a",n,t,e),v("b",n,t,e))];case"Less":return[Dp(v("a",n,t,e),v("b",n,t,e))];case"LessEqual":return[Fr(v("a",n,t,e),v("b",n,t,e))];case"LogicalAnd":return[Cs(v("a",n,t,e),v("b",n,t,e))];case"LogicalNot":return[_u(v("a",n,t,e))];case"LogicalOr":return[Fp(v("a",n,t,e),v("b",n,t,e))];case"Select":case"SelectV2":return[Nn(v("condition",n,t,e),v("a",n,t,e),v("b",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},EE=D({einsum_:function _E(n,...t){const e=t.map((r,o)=>N(r,`tensors${o}`,"einsum"));return A.runKernel(nh,e,{equation:n})}}),AE=(n,t,e)=>{switch(n.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[tt(v("a",n,t,e),v("b",n,t,e),v("transposeA",n,t,e),v("transposeB",n,t,e))];case"Einsum":return[EE(v("equation",n,t,e),...v("tensors",n,t,e))];case"Transpose":return[qe(v("x",n,t,e),v("perm",n,t,e))];case"_FusedMatMul":const[s,r]=v("fusedOps",n,t,e),o="biasadd"===s,a="prelu"===r,i=v("numArgs",n,t,e),l=v("leakyreluAlpha",n,t,e);if(o){if(a&&2!==i)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!a&&1!==i)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=v("args",n,t,e);return[Vd({a:v("a",n,t,e),b:v("b",n,t,e),transposeA:v("transposeA",n,t,e),transposeB:v("transposeB",n,t,e),bias:u,activation:r,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${n.op} is not implemented`)}},$b=D({sparseToDense_:function RE(n,t,e,s=0){const r=N(n,"sparseIndices","sparseToDense","int32"),o=N(t,"sparseValues","sparseToDense"),a=N(s,"defaultValue","sparseToDense",o.dtype);return function DE(n,t,e,s){if("int32"!==n.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${n.dtype}.`);if(n.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${n.shape}.`);const r=n.rank>0?n.shape[0]:1,o=n.rank>1?n.shape[1]:1;if(e.length!==o)throw new Error(`outputShape has incorrect number of elements:, ${e.length}, should be: ${o}.`);if(0!==t.rank&&(1!==t.rank||t.size!==r))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${r}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(r,o,e,a),A.runKernel(_h,{sparseIndices:r,sparseValues:o,defaultValue:a},{outputShape:e})}}),FE=(n,t,e)=>{switch(n.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[fo(v("x",n,t,e),v("mean",n,t,e),v("variance",n,t,e),v("offset",n,t,e),v("scale",n,t,e),v("epsilon",n,t,e))];case"LRN":return[Wy(v("x",n,t,e),v("radius",n,t,e),v("bias",n,t,e),v("alpha",n,t,e),v("beta",n,t,e))];case"Softmax":return[du(v("x",n,t,e))];case"LogSoftmax":return[Sd(v("x",n,t,e))];case"SparseToDense":return[$b(v("sparseIndices",n,t,e),v("outputShape",n,t,e),v("sparseValues",n,t,e),v("defaultValue",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},LE=D({denseBincount_:function OE(n,t,e,s=!1){const r=N(n,"x","denseBincount"),o=N(t,"weights","denseBincount");return C("int32"===r.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${r.dtype}`),C(r.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${r.rank}.`),C(e>=0,()=>`size must be non-negative, but got ${e}.`),C(o.size===r.size||0===o.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${r.shape}, weights shape: ${o.shape}.`),A.runKernel(Yc,{x:r,weights:o},{size:e,binaryOutput:s})}}),PE=(n,t,e)=>{switch(n.op){case"Max":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[hs(v("x",n,t,e),a,i)]}case"Mean":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[_t(v("x",n,t,e),a,i)]}case"Min":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[Iu(v("x",n,t,e),a,i)]}case"Sum":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[we(v("x",n,t,e),a,i)]}case"All":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[bd(v("x",n,t,e),a,i)]}case"Any":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[su(v("x",n,t,e),a,i)]}case"ArgMax":{const a=v("axis",n,t,e);return[Er(v("x",n,t,e),a)]}case"ArgMin":{const a=v("axis",n,t,e);return[_y(v("x",n,t,e),a)]}case"Prod":{const a=v("axis",n,t,e),i=v("keepDims",n,t,e);return[Op(v("x",n,t,e),a,i)]}case"Cumsum":{const a=v("axis",n,t,e),i=v("exclusive",n,t,e),l=v("reverse",n,t,e);return[Ep(v("x",n,t,e),a,i,l)]}case"Bincount":const s=v("x",n,t,e),r=v("weights",n,t,e),o=v("size",n,t,e);return[ty(s,r,o)];case"DenseBincount":{const a=v("x",n,t,e),i=v("weights",n,t,e),l=v("size",n,t,e),u=v("binaryOutput",n,t,e);return[LE(a,i,l,u)]}default:throw TypeError(`Node type ${n.op} is not implemented`)}},ME=D({scatterND_:function zE(n,t,e){const s=N(n,"indices","scatterND","int32"),r=N(t,"updates","scatterND");return ay(r,s,e),A.runKernel(kh,{indices:s,updates:r},{shape:e})}}),VE=D({gatherND_:function BE(n,t){const e=N(t,"indices","gatherND","int32"),r={params:N(n,"x","gatherND","string_or_numeric"),indices:e};return A.runKernel(ih,r)}}),WE=(n,t,e)=>{switch(n.op){case"ConcatV2":case"Concat":{const s=v("n",n,t,e),r=v("axis",n,t,e);let o=v("tensors",n,t,e);return o=o.slice(0,s),[Ut(o,r)]}case"Gather":{const s=v("x",n,t,e),r=v("indices",n,t,e);return[ei(s,ue(r,"int32"),0)]}case"GatherV2":{const s=v("axis",n,t,e),r=v("batchDims",n,t,e),o=v("x",n,t,e),a=v("indices",n,t,e);return[ei(o,ue(a,"int32"),s,r)]}case"Reverse":{const s=v("dims",n,t,e),r=[];for(let a=0;a<s.length;a++)s[a]&&r.push(a);const o=v("x",n,t,e);return[Ms(o,r)]}case"ReverseV2":{const s=v("axis",n,t,e),r=v("x",n,t,e);return[Ms(r,s)]}case"Slice":{const s=v("begin",n,t,e),r=v("size",n,t,e);return[nt(v("x",n,t,e),s,r)]}case"StridedSlice":{const s=v("begin",n,t,e),r=v("end",n,t,e),o=v("strides",n,t,e),a=v("beginMask",n,t,e),i=v("endMask",n,t,e),l=v("ellipsisMask",n,t,e),u=v("newAxisMask",n,t,e),c=v("shrinkAxisMask",n,t,e),h=v("x",n,t,e);return[Ky(h,s,r,o,a,i,l,u,c)]}case"Pack":return P(()=>{const s=v("axis",n,t,e),r=v("tensors",n,t,e),o=r[0].shape,a=ar(r[0]).shape,i=r.map(l=>{const u=je(l.shape,o);if(!u&&!je(ar(l).shape,a))throw new Error("the input tensors shape does not match");return u?l:F(l,o)});return[es(i,s)]});case"Unpack":{const s=v("axis",n,t,e),r=v("tensor",n,t,e);return ds(r,s)}case"Tile":{const s=v("reps",n,t,e);return[Qn(v("x",n,t,e),s)]}case"Split":case"SplitV":{const s=v("axis",n,t,e),r=v("numOrSizeSplits",n,t,e),o=v("x",n,t,e);return En(o,r,s)}case"ScatterNd":{const s=v("indices",n,t,e),r=v("values",n,t,e),o=v("shape",n,t,e);return[ME(s,r,o)]}case"GatherNd":{const s=v("x",n,t,e),r=v("indices",n,t,e);return[VE(s,r)]}case"SparseToDense":{const s=v("sparseIndices",n,t,e),r=v("outputShape",n,t,e),o=v("sparseValues",n,t,e),a=v("defaultValue",n,t,e);return[$b(s,o,r,o.dtype===a.dtype?a:ue(a,o.dtype))]}default:throw TypeError(`Node type ${n.op} is not implemented`)}},UE=(n,t,e)=>{switch(n.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:r,emptyRowIndicator:o,reverseIndexMap:a}=Cu.sparseFillEmptyRows(v("indices",n,t,e),v("values",n,t,e),v("denseShape",n,t,e),v("defaultValue",n,t,e));return[s,r,o,a]}case"SparseReshape":{const{outputIndices:s,outputShape:r}=Cu.sparseReshape(v("inputIndices",n,t,e),v("inputShape",n,t,e),v("newShape",n,t,e));return[s,r]}case"SparseSegmentMean":return[Cu.sparseSegmentMean(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];case"SparseSegmentSum":return[Cu.sparseSegmentSum(v("data",n,t,e),v("indices",n,t,e),v("segmentIds",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},GE=(n,t,e)=>{switch(n.op){case"FFT":return[mu(v("x",n,t,e))];case"IFFT":return[ri(v("x",n,t,e))];case"RFFT":return[gu(v("x",n,t,e))];case"IRFFT":return[zd(v("x",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},HE=(n,t,e)=>{switch(n.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:r}=Jd.stringNGrams(v("data",n,t,e),v("dataSplits",n,t,e),v("separator",n,t,e),v("nGramWidths",n,t,e),v("leftPad",n,t,e),v("rightPad",n,t,e),v("padWidth",n,t,e),v("preserveShortSequences",n,t,e));return[s,r]}case"StringSplit":{const{indices:s,values:r,shape:o}=Jd.stringSplit(v("input",n,t,e),v("delimiter",n,t,e),v("skipEmpty",n,t,e));return[s,r,o]}case"StringToHashBucketFast":return[Jd.stringToHashBucketFast(v("input",n,t,e),v("numBuckets",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}},KE=D({broadcastArgs_:function jE(n,t){const e=N(n,"s0","broadcastArgs","int32"),s=N(t,"s1","broadcastArgs","int32");if(1!==e.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${e.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);return A.runKernel(zm,{s0:e,s1:s})}}),qE=(n,t,e)=>{switch(n.op){case"Cast":return[ue(v("x",n,t,e),v("dtype",n,t,e))];case"ExpandDims":{const s=v("axis",n,t,e);return[zn(v("x",n,t,e),s)]}case"Squeeze":{const s=v("axis",n,t,e);return[ar(v("x",n,t,e),s)]}case"Reshape":return[F(v("x",n,t,e),v("shape",n,t,e))];case"MirrorPad":return[Uy(v("x",n,t,e),v("padding",n,t,e),v("mode",n,t,e))];case"PadV2":case"Pad":return[uu(v("x",n,t,e),v("padding",n,t,e),v("constantValue",n,t,e))];case"SpaceToBatchND":{const s=v("blockShape",n,t,e),r=v("paddings",n,t,e);return[$u(v("x",n,t,e),s,r)]}case"BatchToSpaceND":{const s=v("blockShape",n,t,e),r=v("crops",n,t,e);return[Au(v("x",n,t,e),s,r)]}case"DepthToSpace":{const s=v("blockSize",n,t,e),r=v("dataFormat",n,t,e).toUpperCase();return[Ly(v("x",n,t,e),s,r)]}case"BroadcastTo":return[si(v("x",n,t,e),v("shape",n,t,e))];case"BroadcastArgs":return[KE(v("s0",n,t,e),v("s1",n,t,e))];default:throw TypeError(`Node type ${n.op} is not implemented`)}};function _b(n,t,e,s){const r=((o,a,i)=>{switch(o.category){case"arithmetic":return P(()=>sE(o,a,i));case"basic_math":return P(()=>rE(o,a,i));case"control":return cE(o,a,i);case"convolution":return P(()=>pE(o,a,i));case"creation":return P(()=>yE(o,a,i));case"dynamic":return IE(o,a,i);case"evaluation":return P(()=>CE(o,a,i));case"image":return P(()=>TE(o,a,i));case"graph":return P(()=>kE(o,a,i));case"logical":return P(()=>$E(o,a,i));case"matrices":return P(()=>AE(o,a,i));case"normalization":return P(()=>FE(o,a,i));case"reduction":return P(()=>PE(o,a,i));case"slice_join":return P(()=>WE(o,a,i));case"sparse":return P(()=>UE(o,a,i));case"spectral":return P(()=>GE(o,a,i));case"string":return P(()=>HE(o,a,i));case"transformation":return P(()=>qE(o,a,i));case"hash_table":return SE(o,a,i,s);case"custom":const l=vb(o.op);if(l&&l.customExecutor)return l.customExecutor(new eE(o,a,i));throw TypeError(`Custom op ${o.op} is not registered.`);default:throw TypeError(`Unknown op '${o.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(n,t,e);return Ko(r)?r.then(o=>[].concat(o)):[].concat(r)}class Eb{constructor(t={},e={},s={},r={}){this.weightMap=t,this.tensorArrayMap=e,this.tensorListMap=s,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(t,e){return{id:t,frameName:e,iterationId:0}}set currentContext(t){this.contexts!==t&&(this.contexts=t,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const t=[];for(let e=0;e<this.contexts.length-1;e++){const s=this.contexts.slice(0,this.contexts.length-e);t.push(this.contextIdforContexts(s))}t.push(""),this._currentContextIds=t}contextIdforContexts(t){return t?t.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(t){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,t)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const t=Object.assign({},this.contexts[this.contexts.length-1]);t.iterationId+=1,t.id=this.lastId,this.contexts.splice(-1,1,t),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(t){return this.weightMap[t]}addTensorArray(t){this.tensorArrayMap[t.id]=t}getTensorArray(t){return this.tensorArrayMap[t]}addTensorList(t){this.tensorListMap[t.id]=t}getTensorList(t){return this.tensorListMap[t]}dispose(t){for(const e in this.tensorArrayMap)this.tensorArrayMap[e].clearAndClose(t);for(const e in this.tensorListMap)this.tensorListMap[e].clearAndClose(t)}}function Ab(n,t,e,s){const r=new Set,o=[];let a=null,i=null;const l=new Set,u=Object.keys(n).map(d=>An(d)[0]);let c=[];null!=s&&(c=s.map(d=>An(d.name)[0]));const h=[...t];for(;h.length>0;){const d=h.pop();if((Db(d)||QE(d)||eA(d))&&null==a&&(a=d,i=a.children.map(p=>p.name).filter(p=>r.has(p))),r.add(d.name),null==e[d.name]&&-1===u.indexOf(d.name)&&-1===c.indexOf(d.name)){if(0===d.inputs.length){o.push(d.name);continue}d.inputs.forEach(p=>{l.has(p.name)||(l.add(p.name),h.push(p))})}}return{inputs:n,outputs:t,usedNodes:r,missingInputs:o,dynamicNode:a,syncInputs:i}}const YE=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],ZE=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],JE=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Db(n){return YE.indexOf(n.op)>=0}function QE(n){return ZE.indexOf(n.op)>=0}function eA(n){return JE.indexOf(n.op)>=0}class sc{constructor(t,e){this.graph=t,this.parent=e,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this._outputs=t.outputs,this._inputs=t.inputs,this._initNodes=t.initNodes,this._signature=t.signature,this._functions=t.functions,null!=t.functions&&Object.keys(t.functions).forEach(s=>{this._functionExecutorMap[s]=new sc(t.functions[s],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(t){const e=Object.keys(t).map(s=>t[s].map(r=>r.id));this._weightIds=[].concat(...e),this._weightMap=t}set resourceManager(t){this._resourceManager=t}get inputs(){return this._inputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(t=>({name:t.name,shape:t.attrParams.shape?t.attrParams.shape.value:void 0,dtype:t.attrParams.dtype?t.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(t=>t.signatureKey||t.name)}get outputNodes(){return this._outputs.map(t=>{const e=t.signatureKey||t.name;return t.defaultOutput?`${e}:${t.defaultOutput}`:e})}get functions(){return Object.keys(this._functions).reduce((t,e)=>(t[e]=this._functions[e].signature,t),{})}getCompilationKey(t,e){const s=t.map(o=>o.name).sort(),r=e.map(o=>o.name).sort();return s.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(t,e){const s=Ab(t,e,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:o,syncInputs:a}=s;if(null!=o)throw new Error(`This execution contains the node '${o.name}', which has the dynamic op '${o.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const i=e.map(u=>u.name),l=Object.keys(t);throw new Error(`Cannot compute the outputs [${i}] from the provided inputs [${l}]. Missing the following inputs: [${r}]`)}return function XE(n,t,e){const{usedNodes:s,inputs:r}=e,o=[],a=Object.keys(r).map(c=>An(c)[0]).map(c=>n.nodes[c]),i=n.initNodes;a.forEach(c=>{s.has(c.name)&&o.push(c)}),n.weights.forEach(c=>{s.has(c.name)&&o.push(c)}),i?.forEach(c=>{s.has(c.name)&&o.push(c)});const l=new Set,u=[];for(;o.length>0;){const c=o.pop();l.add(c.name),t[c.name]||u.push(c),c.children.forEach(h=>{!l.has(h.name)&&s.has(h.name)&&h.inputs.every(d=>l.has(d.name))&&o.push(h)})}return u}(this.graph,this.weightMap,s)}execute(t,e){t=this.mapInputs(t);const s=Object.keys(t).sort();this.checkInputs(t),this.checkInputShapeAndType(t),e=this.mapOutputs(e),this.checkOutputs(e);const r=s.map(h=>this.graph.nodes[An(h)[0]]),o=e.map(h=>An(h)[0]);let a=o.map(h=>this.graph.nodes[h]);0===a.length&&(a=this._outputs);const i=this.getCompilationKey(r,a);let l=this.compiledMap.get(i);null==l&&(l=this.compile(t,a),this.compiledMap.set(i,l));const u={},c={};return P(()=>{const h=new Eb(this.weightMap,u,c,this.functionExecutorMap),d=Object.assign({},this.weightMap);Object.keys(t).forEach(m=>{const[g,y]=An(m),x=[];x[y]=t[m],d[g]=x});const p=this.getFrozenTensorIds(d),f={};for(let m=0;m<l.length;m++){const g=l[m];if(!d[g.name]){const y=_b(g,d,h,this._resourceManager);if(Ko(y))throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);d[g.name]=y,this.checkTensorForDisposal(g.name,g,d,h,p,o,f)}}return null==this.parent&&h.dispose(p),e.map(m=>xn(m,d,h))})}getFrozenTensorIds(t){const e=[].concat.apply([],Object.keys(t).map(s=>t[s]).map(s=>s.map(r=>r.id)));return new Set(e)}checkTensorForDisposal(t,e,s,r,o,a,i){"control"===e.category||-1!==a.indexOf(t)||(s[t].forEach(l=>{null!=l&&(i[l.id]=(i[l.id]||0)+e.children.length)}),e.inputs.forEach(l=>{if("control"!==l.category){const u=function R2(n,t,e){return t[tc(n,e.currentContextId)]}(l.name,s,r);u?.forEach(c=>{if(c&&!c.kept&&!o.has(c.id)){const h=i[c.id];1===h?(c.dispose(),delete i[c.id]):null!=h&&i[c.id]--}})}}))}executeAsync(t,e){var s=this;return L(function*(){return s._executeAsync(t,e)})()}_executeAsync(t,e,s=!1,r={},o={}){var a=this;return L(function*(){s||(t=a.mapInputs(t),a.checkInputs(t),a.checkInputShapeAndType(t),e=a.mapOutputs(e),a.checkOutputs(e));const i=new Eb(a.weightMap,r,o,a.functionExecutorMap),l=yield a.executeWithControlFlow(t,i,e,s),u=e.map(p=>xn(p,l,i)),c=u.map(p=>p.id),h=Object.keys(t).map(p=>t[p].id),d=new Set([...c,...h,...a.weightIds]);return Object.keys(l).forEach(p=>{l[p].forEach(m=>{m&&!m.kept&&!m.isDisposed&&!d.has(m.id)&&m.dispose()})}),null==a.parent&&i.dispose(d),u})()}executeFunctionAsync(t,e,s){var r=this;return L(function*(){const o=t.reduce((a,i,l)=>(a[r.inputs[l].name]=i,a),{});return r._executeAsync(o,r.outputNodes,!0,e,s)})()}executeWithControlFlow(t,e,s,r){var o=this;return L(function*(){const a=Object.keys(t),i=a.map(w=>o.graph.nodes[An(w)[0]]),l=s.map(w=>An(w)[0]);let u=l.map(w=>o.graph.nodes[w]);0===u.length&&(u=o._outputs);const{usedNodes:c,missingInputs:h,dynamicNode:d,syncInputs:p}=Ab(t,u,o.weightMap,o._initNodes),f=[...i,...o.graph.weights,...o._initNodes||[]].map(w=>({node:w,contexts:e.currentContext})),m=Object.assign({},o.weightMap);Object.keys(t).forEach(w=>{const[I,k]=An(w),S=[];S[k]=t[w],m[I]=S});const g={},y=o.getFrozenTensorIds(m),x={};for(;f.length>0;){const w=o.processStack(i,f,e,m,x,y,l,g,c);yield Promise.all(w)}null==d&&!r&&console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const b=u.filter(w=>!Db(w)&&!xn(w.name,m,e)).map(w=>w.name);if(b.length>0){let w="";throw null!=d&&(w=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${p}]`),new Error(`Cannot compute the outputs [${b}] from the provided inputs [${a}]. Consider providing the following inputs: [${h}]. ${w}`)}return m})()}processStack(t,e,s,r,o,a,i,l,u){const c=[];for(;e.length>0;){const h=e.pop();s.currentContext=h.contexts;let d="";if("Enter"===h.node.op&&v("isConstant",h.node,r,s)&&([d]=Gs(h.node.name,s)),null==r[h.node.name]){const p=_b(h.node,r,s,this._resourceManager);d||([d]=Gs(h.node.name,s));const f=s.currentContext;Ko(p)?c.push(p.then(m=>(r[d]=m,s.currentContext=f,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u),m))):(r[d]=p,this.checkTensorForDisposal(d,h.node,r,s,a,i,l),this.processChildNodes(h.node,e,s,r,o,u))}else this.processChildNodes(h.node,e,s,r,o,u)}return c}processChildNodes(t,e,s,r,o,a){t.children.forEach(i=>{const[l]=Gs(i.name,s);o[l]||!a.has(i.name)||("Merge"===i.op?i.inputNames.some(u=>!!xn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})):i.inputNames.every(u=>!!xn(u,r,s))&&(o[l]=!0,e.push({contexts:s.currentContext,node:i})))})}dispose(){Object.keys(this.weightMap).forEach(t=>this.weightMap[t].forEach(e=>e.dispose()))}checkInputShapeAndType(t){Object.keys(t).forEach(e=>{const s=t[e],[r]=An(e),o=this.graph.nodes[r];if(o.attrParams.shape&&o.attrParams.shape.value){const a=o.attrParams.shape.value;C(a.length===s.shape.length&&s.shape.every((l,u)=>-1===a[u]||a[u]===l),()=>`The shape of dict['${o.name}'] provided in model.execute(dict) must be [${a}], but was [${s.shape}]`)}o.attrParams.dtype&&o.attrParams.dtype.value&&C(s.dtype===o.attrParams.dtype.value,()=>`The dtype of dict['${o.name}'] provided in model.execute(dict) must be ${o.attrParams.dtype.value}, but was ${s.dtype}`)})}mapInputs(t){const e={};for(const s in t)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[s]?e[this._signature.inputs[s].name]=t[s]:e[s]=t[s];return e}checkInputs(t){const e=Object.keys(t).filter(s=>{const[r]=An(s);return null==this.graph.nodes[r]});if(e.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${e}] that are not part of graph`)}mapOutputs(t){return t.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(t){t.forEach(e=>{const[s]=An(e);if(!this.graph.nodes[s])throw new Error(`The output '${e}' is not found in the graph`)})}}class tA{constructor(t={},e={}){this.hashTableNameToHandle=t,this.hashTableMap=e}addHashTable(t,e){this.hashTableNameToHandle[t]=e.handle,this.hashTableMap[e.id]=e}getHashTableHandleByName(t){return this.hashTableNameToHandle[t]}getHashTableById(t){return this.hashTableMap[t]}dispose(){for(const t in this.hashTableMap)this.hashTableMap[t].clearAndClose(),delete this.hashTableMap[t];for(const t in this.hashTableNameToHandle)this.hashTableNameToHandle[t].dispose(),delete this.hashTableNameToHandle[t]}}const nA="?tfjs-format=file",sA="model.json";class rA{constructor(t,e={}){this.modelUrl=t,this.loadOptions=e,this.version="n/a",null==e&&(this.loadOptions={}),this.resourceManager=new tA}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const t=this.modelUrl;if(null!=t.load)this.handler=t;else if(null!=this.loadOptions.requestInit)this.handler=kg(t,this.loadOptions);else{const e=((n,t)=>It.getLoadHandlers(n,this.loadOptions))(t);if(0===e.length)e.push(kg(t,this.loadOptions));else if(e.length>1)throw new Error(`Found more than one (${e.length}) load handlers for URL '${[t]}'`);this.handler=e[0]}}load(){var t=this;return L(function*(){if(t.findIOHandler(),null==t.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=yield t.handler.load();return t.loadSync(e)})()}loadSync(t){this.artifacts=t;const e=this.artifacts.modelTopology;let s;s=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=s,this.version=`${e.versions.producer}.${e.versions.minConsumer}`;const r=function rg(n,t){const e={};let s,r=0;for(const o of t){const a=o.name,i=o.dtype,l=o.shape,u=q(l);let c;if("quantization"in o){const h=o.quantization;if("uint8"===h.dtype||"uint16"===h.dtype){if(!("min"in h)||!("scale"in h))throw new Error(`Weight ${o.name} with quantization ${h.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==h.dtype)throw new Error(`Weight ${o.name} has unknown quantization dtype ${h.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${o.name} is quantized with ${h.dtype} which only supports weights of type float32 not ${i}.`)}const d=qh[h.dtype],p=n.slice(r,r+u*d),f="uint8"===h.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===i)if("uint8"===h.dtype||"uint16"===h.dtype){c=new Float32Array(f.length);for(let m=0;m<f.length;m++)c[m]=f[m]*h.scale+h.min}else{if("float16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type float32.`);void 0===s&&(s=l1()),c=s(f)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${a}': ${i}`);if("uint8"!==h.dtype&&"uint16"!==h.dtype)throw new Error(`Unsupported quantization type ${h.dtype} for weight type int32.`);c=new Int32Array(f.length);for(let m=0;m<f.length;m++)c[m]=Math.round(f[m]*h.scale+h.min)}r+=u*d}else if("string"===i){const h=q(o.shape);c=[];for(let d=0;d<h;d++){const p=new Uint32Array(n.slice(r,r+Yl))[0];r+=Yl;const f=new Uint8Array(n.slice(r,r+p));c.push(f),r+=p}}else{const h=qh[i],d=n.slice(r,r+u*h);if("float32"===i)c=new Float32Array(d);else if("int32"===i)c=new Int32Array(d);else if("bool"===i)c=new Uint8Array(d);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${a}': ${i}`);{c=new Float32Array(d);const p=new Float32Array(c.length/2),f=new Float32Array(c.length/2);for(let y=0;y<p.length;y++)p[y]=c[2*y],f[y]=c[2*y+1];const m=Qs(p,l,"float32"),g=Qs(f,l,"float32");e[a]=Sr(m,g),m.dispose(),g.dispose()}}r+=u*h}"complex64"!==i&&(e[a]=Qs(c,l,i))}return e}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new sc(Ib.Instance.transformGraph(e,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=t.modelInitializer&&null!=t.modelInitializer.node){const o=Ib.Instance.transformGraph(t.modelInitializer);this.initializer=new sc(o),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}save(t,e){var s=this;return L(function*(){if("string"==typeof t){const r=ug(t);if(0===r.length)throw new Error(`Cannot find any save handlers for URL '${t}'`);if(r.length>1)throw new Error(`Found more than one (${r.length}) save handlers for URL '${t}'`);t=r[0]}if(null==t.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return t.save(s.artifacts)})()}predict(t,e){return this.execute(t,this.outputNodes)}normalizeInputs(t){if(!(t instanceof Tt||Array.isArray(t)))return t;if((t=Array.isArray(t)?t:[t]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${t.length} input tensors.`);return this.inputNodes.reduce((e,s,r)=>(e[s]=t[r],e),{})}normalizeOutputs(t){return t=t||this.outputNodes,Array.isArray(t)?t:[t]}execute(t,e){t=this.normalizeInputs(t),e=this.normalizeOutputs(e);const s=this.executor.execute(t,e);return s.length>1?s:s[0]}executeAsync(t,e){var s=this;return L(function*(){t=s.normalizeInputs(t),e=s.normalizeOutputs(e);const r=yield s.executor.executeAsync(t,e);return r.length>1?r:r[0]})()}convertTensorMapToTensorsMap(t){return Object.keys(t).reduce((e,s)=>(e[s]=[t[s]],e),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}function Rb(n){return jf.apply(this,arguments)}function jf(){return(jf=L(function*(n,t={}){if(null==n)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&null==n.load&&(n.endsWith("/")||(n+="/"),n=`${n}${sA}${nA}`);const e=new rA(n,t);return yield e.load(),e})).apply(this,arguments)}function ve(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const DA=Tp;let RA=(()=>{class n extends St{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new st(this,_r())}nextDataId(){return n.nextDataId++}write(e,s,r){this.firstUse&&(this.firstUse=!1,X().get("IS_NODE")&&Cn("\n============================\nHi there \u{1f44b}. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));const o={id:this.nextDataId()};return this.data.set(o,{values:e,dtype:r,refCount:1}),o}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Go(r[0])){const a=r.map(i=>Js(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return{dataId:o,shape:e,dtype:s}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,s,r,o,a){this.data.set(e,{values:s,dtype:o,refCount:a})}numDataIds(){return this.data.numDataIds()}read(e){var s=this;return L(function*(){return s.readSync(e)})()}readSync(e){const{dtype:s,complexTensorInfos:r}=this.data.get(e);return"complex64"===s?Vs(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(e).values}bufferSync(e){const s=this.readSync(e.dataId);let r=s;if("string"===e.dtype)try{r=s.map(o=>so(o))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return We(e.shape,e.dtype,r)}makeOutput(e,s,r){const o=this.write(e,s,r);return _r().makeTensorFromDataId(o,s,r,this)}disposeData(e,s=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!s&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:r}=this.data.get(e);null!=r&&(this.disposeData(r.real.dataId,!0),this.disposeData(r.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}time(e){return L(function*(){const s=kn();return e(),{kernelMs:kn()-s}})()}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){ve([e],"where");const s=this.readSync(e.dataId);return DA(e.shape,s)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}return n.nextDataId=0,n})();function it(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;if(ve(a,n),"string"===a.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=o,l=i.data.get(a.dataId).values,u=q(a.shape),c=e||a.dtype,h=In(c,u);for(let d=0;d<u;++d)h[d]=t(l[d],r);return i.makeTensorInfo(a.shape,c,h)}}function $o(n,t,e){return({inputs:s,attrs:r,backend:o})=>{const{x:a}=s;if(ve(a,n),"string"===a.dtype||"string"===e)throw new Error("unaryKernelFunc does not support string input/output");const i=o,l=i.data.get(a.dataId).values,u=e||a.dtype,c=t(l,u,r);return i.makeTensorInfo(a.shape,u,c)}}Pg("cpu",()=>new RA,1);const Gb=it(ia,n=>n>=0?n:Math.exp(n)-1),OA={kernelName:ia,backendName:"cpu",kernelFunc:Gb};function As(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const LA={kernelName:fa,backendName:"cpu",kernelFunc:As};function Hb(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s;ve([r],"leakyRelu");const a=q(r.shape),i=e.data.get(r.dataId).values,l=an("float32",a);for(let u=0;u<i.length;u++)l[u]=i[u]<0?o*i[u]:i[u];return e.makeTensorInfo(r.shape,"float32",l)}const PA={kernelName:ol,backendName:"cpu",kernelFunc:Hb};function Mt(n){return(t,e,s,r,o)=>{const a=Be(t,e),i=a.length,l=Se(a),c=an(o,q(a)),h=t.length,d=e.length,p=Se(t),f=Se(e),m=mo(t,a),g=mo(e,a);if(m.length+g.length===0)for(let y=0;y<c.length;++y)c[y]=n(s[y%s.length],r[y%r.length]);else for(let y=0;y<c.length;++y){const x=jo(y,i,l),b=x.slice(-h);m.forEach(S=>b[S]=0);const w=ws(b,h,p),I=x.slice(-d);g.forEach(S=>I[S]=0);const k=ws(I,d,f);c[y]=n(s[w],r[k])}return[c,a]}}const zA=Mt((n,t)=>n<0?t*n:n);function jb(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t;ve([s,r],"prelu");const o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,[i,l]=zA(s.shape,r.shape,o,a,s.dtype);return e.makeTensorInfo(l,s.dtype,i)}const MA={kernelName:kl,backendName:"cpu",kernelFunc:jb},Kb=it(Sa,n=>Math.max(0,n)),BA={kernelName:Sa,backendName:"cpu",kernelFunc:Kb},qb=it(Ta,n=>Math.min(Math.max(0,n),6)),VA={kernelName:Ta,backendName:"cpu",kernelFunc:qb};function mr(n){return(t,e,s)=>{const r=an(e,t.length);for(let o=0;o<t.length;++o)r[o]=n(t[o],s);return r}}const WA=mr(n=>1/(1+Math.exp(-n))),Xb=it(Fa,n=>1/(1+Math.exp(-n))),UA={kernelName:Fa,backendName:"cpu",kernelFunc:Xb};function Qf(n,t,e,s,r){if("linear"===e)return As({inputs:{x:t},backend:n});if("relu"===e)return Kb({inputs:{x:t},backend:n});if("elu"===e)return Gb({inputs:{x:t},backend:n});if("relu6"===e)return qb({inputs:{x:t},backend:n});if("prelu"===e)return jb({inputs:{x:t,alpha:s},backend:n});if("leakyrelu"===e)return Hb({inputs:{x:t},backend:n,attrs:{alpha:r}});if("sigmoid"===e)return Xb({inputs:{x:t},backend:n});throw new Error(`Activation ${e} has not been implemented for the CPU backend.`)}function Dn(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=e.makeTensorInfo(s.shape,"complex64");return e.data.get(i.dataId).complexTensorInfos={real:e.makeTensorInfo(s.shape,"float32",o),imag:e.makeTensorInfo(r.shape,"float32",a)},i}const GA={kernelName:Hc,backendName:"cpu",kernelFunc:Dn};function ic(n,t,e="float32"){if("complex64"===e)return Dn({inputs:{real:ic(n,t,"float32"),imag:ic(n,t,"float32")},backend:n});const s=pn(q(t),e);return n.makeTensorInfo(t,e,s)}function Hr(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.real,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const HA={kernelName:vh,backendName:"cpu",kernelFunc:Hr};function gr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return As({inputs:{x:r},backend:e});const a=ic(e,r.shape,r.dtype),i=gr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=Dn({inputs:{real:i,imag:a},backend:e});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=Hr({inputs:{input:r},backend:e}),i=gr({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!Em(r.dtype,o)){const a=As({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if("int32"===o){const a=e.data.get(r.dataId).values,i=Int32Array.from(a);return e.makeTensorInfo(r.shape,"int32",i)}if("bool"===o){const a=e.data.get(r.dataId).values,i=Nr([0],r.dtype),[l,u]=Mt((c,h)=>c!==h?1:0)(r.shape,[],a,i,"bool");return e.makeTensorInfo(u,"bool",l)}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}const jA={kernelName:ta,backendName:"cpu",kernelFunc:gr};function rn(n,t,e,s){return null==e?({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;ve([a,i],n);const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h="string"===a.dtype?Pr(u):u,d="string"===a.dtype?Pr(c):c,p=s||a.dtype,[f,m]=t(a.shape,i.shape,h,d,p);return l.makeTensorInfo(m,p,f)}:({inputs:r,backend:o})=>{const{a,b:i}=r,l=o;if("complex64"===a.dtype||"complex64"===i.dtype){const u=gr({inputs:{x:a},backend:l,attrs:{dtype:"complex64"}}),c=l.data.get(u.dataId),d=c.complexTensorInfos.imag,p=l.data.get(c.complexTensorInfos.real.dataId).values,f=l.data.get(d.dataId).values,m=gr({inputs:{x:i},backend:l,attrs:{dtype:"complex64"}}),g=l.data.get(m.dataId),x=g.complexTensorInfos.imag,b=l.data.get(g.complexTensorInfos.real.dataId).values,w=l.data.get(x.dataId).values,[I,k,S]=e(a.shape,i.shape,p,f,b,w),T=l.makeTensorInfo(S,"float32",I),_=l.makeTensorInfo(S,"float32",k),E=Dn({inputs:{real:T,imag:_},backend:l});return l.disposeIntermediateTensorInfo(u),l.disposeIntermediateTensorInfo(m),l.disposeIntermediateTensorInfo(T),l.disposeIntermediateTensorInfo(_),E}{const u=l.data.get(a.dataId).values,c=l.data.get(i.dataId).values,h=s||a.dtype,[d,p]=t(a.shape,i.shape,u,c,h);return l.makeTensorInfo(p,h,d)}}}function em(n){return(t,e,s,r,o,a)=>{const i=Be(t,e),l=q(i),u=i.length,c=Se(i),h=an("float32",l),d=an("float32",l),p=mo(t,i),f=mo(e,i),m=Vs(s,r),g=Vs(o,a),y=t.length,x=Se(t),b=e.length,w=Se(e);if(p.length+f.length===0)for(let I=0;I<h.length;I++){const k=I%m.length,S=I%g.length,T=n(m[2*k],m[2*k+1],g[2*S],g[2*S+1]);h[I]=T.real,d[I]=T.imag}else for(let I=0;I<h.length;I++){const k=jo(I,u,c),S=k.slice(-y);p.forEach(B=>S[B]=0);const T=ws(S,y,x),_=k.slice(-b);f.forEach(B=>_[B]=0);const E=ws(_,b,w),M=n(m[2*T],m[2*T+1],g[2*E],g[2*E+1]);h[I]=M.real,d[I]=M.imag}return[h,d,i]}}const Yb=Mt((n,t)=>n+t),KA=em((n,t,e,s)=>({real:n+e,imag:t+s})),Si=rn(to,Yb,KA),qA={kernelName:to,backendName:"cpu",kernelFunc:Si};function gt(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=q(r.shape),i=_m(o,a),l=q(i);C(a===l,()=>`The new shape (${i}) has ${l} elements and the old shape (${r.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`),e.incRef(r.dataId);const u=e.data.get(r.dataId);if(null!=u.complexTensorInfos){const h=u.complexTensorInfos.imag;u.complexTensorInfos.real.shape=i,h.shape=i}return{dataId:r.dataId,shape:i,dtype:r.dtype}}const XA={kernelName:Nl,backendName:"cpu",kernelFunc:gt};function Zb(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;ve([r,o],"matMul");const l=r.shape.length,u=o.shape.length,c=a?r.shape[l-2]:r.shape[l-1],h=i?o.shape[u-1]:o.shape[u-2],d=a?r.shape[l-1]:r.shape[l-2],p=i?o.shape[u-2]:o.shape[u-1],f=r.shape.slice(0,-2),m=o.shape.slice(0,-2),g=q(f),y=q(m);C(l>=2&&u>=2&&(g===y||1===g||1===y),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${f}) and (${m}).`);const w=(g>y?r.shape.slice(0,-2):o.shape.slice(0,-2)).concat([d,p]);C(c===h,()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${r.shape} and ${o.shape} and transposeA=${a} and transposeB=${i} must match.`);const k=i?[y,p,h]:[y,h,p],S=gt({inputs:{x:r},backend:e,attrs:{shape:a?[g,c,d]:[g,d,c]}}),T=gt({inputs:{x:o},backend:e,attrs:{shape:k}}),_=a?S.shape[1]:S.shape[2],E=a?S.shape[2]:S.shape[1],M=i?T.shape[1]:T.shape[2],B=Math.max(g,y),V=e.data.get(S.dataId).values,j=e.data.get(T.dataId).values,G=Se(S.shape),W=Se(T.shape),[Z,K,Q]=a?[G[0],1,G[1]]:[G[0],G[1],1],[te,oe,le]=i?[1,W[1],W[0]]:[W[1],1,W[0]],ie=E*M,ce=We([B,E,M],S.dtype),de=ce.values,me=e.blockSize;for(let Ie=0;Ie<B;Ie++)for(let $e=0;$e<E;$e+=me)for(let Ee=0;Ee<M;Ee+=me)for(let Fe=0;Fe<_;Fe+=me){const Ue=Math.min($e+me,E),lt=Math.min(Ee+me,M),Nt=Math.min(Fe+me,_);for(let yt=$e;yt<Ue;yt++)for(let ft=Ee;ft<lt;ft++){let mt=0;for(let xt=Fe;xt<Nt;xt++){const Ft=Math.min(Ie,g-1)*Z,Ks=Math.min(Ie,y-1)*le;mt+=V[Ft+yt*K+xt*Q]*j[xt*te+ft*oe+Ks]}de[Ie*ie+(yt*M+ft)]+=mt}}return e.disposeIntermediateTensorInfo(S),e.disposeIntermediateTensorInfo(T),e.makeTensorInfo(w,ce.dtype,ce.values)}const YA={kernelName:Gi,backendName:"cpu",kernelFunc:Zb},JA={kernelName:Ml,backendName:"cpu",kernelFunc:function ZA(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let d,p,f;const m=[];d=Zb({inputs:{a:r,b:o},attrs:{transposeA:l,transposeB:u},backend:e}),a&&(p=Si({inputs:{a:d,b:a},backend:e}),m.push(d),d=p),c&&(f=Qf(e,d,c,i,h),m.push(d),d=f);for(const y of m)e.disposeIntermediateTensorInfo(y);return d}};function Jb(n){const t=new Float32Array(n.length);for(let e=0;e<n.length;++e)t[e]=Math.abs(n[e]);return t}const QA={kernelName:zi,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend;ve(t,"abs");let s=new Float32Array(q(t.shape));return s=Jb(e.data.get(t.dataId).values),e.makeOutput(s,t.shape,"float32")}},eD=it(qo,n=>Math.acos(n)),tD={kernelName:qo,backendName:"cpu",kernelFunc:eD},nD=it(Xo,n=>Math.acosh(n)),sD={kernelName:Xo,backendName:"cpu",kernelFunc:nD},oD={kernelName:Mi,backendName:"cpu",kernelFunc:function rD(n){const{inputs:t,backend:e}=n,s=t;ve(t,"addN");const r=s.map(i=>e.data.get(i.dataId).values),o=We(s[0].shape,s[0].dtype),a=o.values;for(let i=0;i<s.length;i++){const l=r[i];for(let u=0;u<a.length;u++)a[u]+=l[u]}return e.makeTensorInfo(o.shape,o.dtype,o.values)}};function tm(n,t,e,s,r){const o=t.length,a=q(t),i=Se(t),l=Se(r),u=an(e,q(r));for(let c=0;c<a;++c){const h=jo(c,o,i),d=new Array(h.length);for(let f=0;f<d.length;f++)d[f]=h[s[f]];u[ws(d,o,l)]=n[c]}return u}function Hn(n){const{inputs:t,attrs:e,backend:s}=n,{x:r}=t,{perm:o}=e;ve(r,"transpose");const i=new Array(r.shape.length);for(let h=0;h<i.length;h++)i[h]=r.shape[o[h]];const u=tm(s.data.get(r.dataId).values,r.shape,r.dtype,o,i);return{dataId:s.write(u,i,r.dtype),shape:i,dtype:r.dtype}}const aD={kernelName:Ol,backendName:"cpu",kernelFunc:Hn},lD={kernelName:"All",backendName:"cpu",kernelFunc:function iD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ve(r,"all");const i=Me(o,r.shape);let l=i;const u=Dt(l,r.shape.length);let c=r;null!=u&&(c=Hn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),cn("all",l,c.shape.length);const[h,d]=nn(c.shape,l),p=q(d),f=pn(q(h),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=m[x];for(let w=0;w<p;++w)b=b&&m[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(h,c.dtype,f);if(a){const x=gt({inputs:{x:g},backend:e,attrs:{shape:At(h,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},cD={kernelName:"Any",backendName:"cpu",kernelFunc:function uD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ve(r,"any");const i=Me(o,r.shape);let l=i;const u=Dt(l,r.shape.length);let c=r;null!=u&&(c=Hn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),cn("any",l,c.shape.length);const[h,d]=nn(c.shape,l),p=q(d),f=pn(q(h),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=m[x];for(let w=0;w<p;++w)b=b||m[x+w];f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(h,c.dtype,f);if(a){const x=gt({inputs:{x:g},backend:e,attrs:{shape:At(h,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},dD={kernelName:Bi,backendName:"cpu",kernelFunc:function hD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;ve(r,"argMax");let a=Me(o,r.shape);const i=Dt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Hn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),a=[a[0]],cn("argMax",a,l.shape.length);const[c,h]=nn(l.shape,a),p=pn(q(c),"int32"),f=q(h),m=e.data.get(l.dataId).values;for(let g=0;g<p.length;++g){const y=g*f;let x=m[y],b=0;for(let w=0;w<f;++w){const I=m[y+w];I>x&&(x=I,b=w)}p[g]=b}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",p)}},fD={kernelName:Vi,backendName:"cpu",kernelFunc:function pD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;ve(r,"argMin");let a=Me(o,r.shape);const i=Dt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=Hn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),a=[a[0]],cn("argMin",a,l.shape.length);const[c,h]=nn(l.shape,a),p=pn(q(c),"int32"),f=q(h),m=e.data.get(l.dataId).values;for(let g=0;g<p.length;++g){const y=g*f;let x=m[y],b=0;for(let w=0;w<f;++w){const I=m[y+w];I<x&&(x=I,b=w)}p[g]=b}return u.forEach(g=>e.disposeIntermediateTensorInfo(g)),e.makeTensorInfo(c,"int32",p)}},mD=it(Yo,n=>Math.asin(n)),gD={kernelName:Yo,backendName:"cpu",kernelFunc:mD},yD=it(Zo,n=>Math.asinh(n)),xD={kernelName:Zo,backendName:"cpu",kernelFunc:yD},bD=it(Jo,n=>Math.atan(n)),wD={kernelName:Jo,backendName:"cpu",kernelFunc:bD},vD=Mt((n,t)=>Math.atan2(n,t)),ID=rn(ea,vD),CD={kernelName:ea,backendName:"cpu",kernelFunc:ID},kD=it(Qo,n=>Math.atanh(n)),ND={kernelName:Qo,backendName:"cpu",kernelFunc:kD};function nm(n,t,e,s,r,o){const a=r.strideHeight,i=r.strideWidth,l=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,h=r.effectiveFilterWidth,d=r.padInfo.top,p=r.padInfo.left,f="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=We(r.outShape,e),g=m.values,y=r.outShape[1]*r.outShape[2]*r.outShape[3],x=r.outShape[2]*r.outShape[3],b=r.outShape[3];for(let w=0;w<r.batchSize;++w){const I=w*y,k=w*s[0];for(let S=0;S<r.inChannels;++S)for(let T=0;T<r.outHeight;++T){const _=T*a-d,E=Math.max(0,_),M=Math.min(r.inHeight,c+_),B=I+T*x;for(let V=0;V<r.outWidth;++V){const j=V*i-p,G=Math.max(0,j),W=Math.min(r.inWidth,h+j);let Z=f,K=0,Q=0;for(let oe=E;oe<M;oe+=l){const le=k+oe*s[1];for(let ie=G;ie<W;ie+=u){const de=n[le+ie*s[2]+S];"max"===o&&de>Z?Z=de:"avg"===o&&(K+=de,Q++)}if(isNaN(Z))break}g[B+V*b+S]="avg"===o?K/Q:Z}}}return m}function Qb(n,t,e,s,r=!1,o=!1){const a=We(s.outShape,"int32"),i=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,d=s.effectiveFilterWidth,p=s.padInfo.top,f=s.padInfo.left,m=We(t,e,n);for(let g=0;g<s.batchSize;++g)for(let y=0;y<s.inChannels;++y)for(let x=0;x<s.outHeight;++x){const b=x*i-p;let w=b;for(;w<0;)w+=u;const I=Math.min(s.inHeight,h+b);for(let k=0;k<s.outWidth;++k){const S=k*l-f;let T=S;for(;T<0;)T+=c;const _=Math.min(s.inWidth,d+S);let E=Number.NEGATIVE_INFINITY,M=-1;for(let B=w;B<I;B+=u){const V=B-b;for(let j=T;j<_;j+=c){const G=j-S,W=m.get(g,B,j,y);W>E&&(E=W,M=r?o?((g*s.inHeight+B)*s.inWidth+j)*s.inChannels+y:(B*s.inWidth+j)*s.inChannels+y:V*d+G)}}a.set(M,g,x,k,y)}}return a}function e0(n,t,e,s,r,o){const a=r.strideDepth,i=r.strideHeight,l=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,h=r.dilationWidth,d=r.effectiveFilterDepth,p=r.effectiveFilterHeight,f=r.effectiveFilterWidth,m=r.padInfo.front,g=r.padInfo.top,y=r.padInfo.left,x="max"===o?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,b=We(r.outShape,e),w=b.values,I=r.outShape[1]*r.outShape[2]*r.outShape[3]*r.outShape[4],k=r.outShape[2]*r.outShape[3]*r.outShape[4],S=r.outShape[3]*r.outShape[4],T=r.outShape[4];for(let _=0;_<r.batchSize;++_){const E=_*I,M=_*s[0];for(let B=0;B<r.inChannels;++B)for(let V=0;V<r.outDepth;++V){const j=V*a-m;let G=j;for(;G<0;)G+=u;const W=Math.min(r.inDepth,d+j),Z=E+V*k;for(let K=0;K<r.outHeight;++K){const Q=K*i-g;let te=Q;for(;te<0;)te+=c;const oe=Math.min(r.inHeight,p+Q),le=Z+K*S;for(let ie=0;ie<r.outWidth;++ie){const ce=ie*l-y;let de=ce;for(;de<0;)de+=h;const me=Math.min(r.inWidth,f+ce),Ie=le+ie*T;let $e=x,Ee=0,Fe=0;for(let lt=G;lt<W;lt+=u){const Nt=M+lt*s[1];for(let yt=te;yt<oe;yt+=c){const ft=Nt+yt*s[2];for(let mt=de;mt<me;mt+=h){const Ft=n[ft+mt*s[3]+B];if("max"===o&&Ft>$e?$e=Ft:"avg"===o&&(Ee+=Ft,Fe++),isNaN($e))break}if(isNaN($e))break}if(isNaN($e))break}w[Ie+B]="avg"===o?Ee/Fe:$e}}}}return b}const $D={kernelName:Wi,backendName:"cpu",kernelFunc:function TD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ve(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(un(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=Jn(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&je(c.inShape,c.outShape))h=As({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Se(r.shape),f=nm(d,0,r.dtype,p,c,"avg");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},ED={kernelName:Ui,backendName:"cpu",kernelFunc:function _D(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;ve(r,"avgPool3d");const c=Os(r.shape,o,a,1,i,l,u),d=e0(e.data.get(r.dataId).values,0,r.dtype,Se(r.shape),c,"avg");return e.makeTensorInfo(d.shape,"float32",d.values)}},DD={kernelName:Uc,backendName:"cpu",kernelFunc:function AD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;ve([r,o],"avgPool3DGrad");const c=Os(o.shape,a,i,1,l,u),h=c.strideDepth,d=c.strideHeight,p=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,x=c.dilationHeight,b=c.dilationWidth,w=c.effectiveFilterDepth,I=c.effectiveFilterHeight,k=c.effectiveFilterWidth,S=w-1-c.padInfo.front,T=k-1-c.padInfo.left,_=I-1-c.padInfo.top,E=We(o.shape,"float32"),M=1/(f*m*g),B=e.bufferSync(r);for(let V=0;V<c.batchSize;++V)for(let j=0;j<c.inChannels;++j)for(let G=0;G<c.inDepth;++G)for(let W=0;W<c.inHeight;++W)for(let Z=0;Z<c.inWidth;++Z){const K=G-S,Q=W-_,te=Z-T;let oe=0;for(let le=0;le<w;le+=y){const ie=(K+le)/h;if(!(ie<0||ie>=c.outDepth||Math.floor(ie)!==ie))for(let ce=0;ce<I;ce+=x){const de=(Q+ce)/d;if(!(de<0||de>=c.outHeight||Math.floor(de)!==de))for(let me=0;me<k;me+=b){const Ie=(te+me)/p;Ie<0||Ie>=c.outWidth||Math.floor(Ie)!==Ie||(oe+=B.get(V,ie,de,Ie,j))}}}E.set(oe*M,V,G,W,Z,j)}return e.makeTensorInfo(E.shape,E.dtype,E.values)}},FD={kernelName:Wc,backendName:"cpu",kernelFunc:function RD(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;ve([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Jn(a.shape,i,l,1,u),h=c.strideHeight,d=c.strideWidth,p=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,x=c.effectiveFilterWidth,b=x-1-c.padInfo.left,w=y-1-c.padInfo.top,I=We(a.shape,"float32"),k=1/(p*f),S=e.data.get(r.dataId).values,T=We(r.shape,"float32",S);for(let _=0;_<c.batchSize;++_)for(let E=0;E<c.inChannels;++E)for(let M=0;M<c.inHeight;++M)for(let B=0;B<c.inWidth;++B){const V=M-w,j=B-b;let G=0;for(let W=0;W<y;W+=m){const Z=(V+W)/h;if(!(Z<0||Z>=c.outHeight||Math.floor(Z)!==Z))for(let K=0;K<x;K+=g){const Q=(j+K)/d;Q<0||Q>=c.outWidth||Math.floor(Q)!==Q||(G+=T.get(_,Z,Q,E))}}I.set(G*k,_,M,B,E)}return e.makeTensorInfo(I.shape,I.dtype,I.values)}},LD={kernelName:nl,backendName:"cpu",kernelFunc:function OD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,scale:o,offset:a,mean:i,variance:l}=t;C(i.shape.length===l.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||i.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),ve([r,i,l,o,a],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=e.data.get(r.dataId).values,h=e.data.get(i.dataId).values,d=e.data.get(l.dataId).values,p=o?e.data.get(o.dataId).values:new Float32Array([1]),f=a?e.data.get(a.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=p.length,x=d.length,b=h.length;let w=0,I=0,k=0,S=0;for(let T=0;T<c.length;++T)m[T]=f[w++]+(c[T]-h[I++])*p[k++]/Math.sqrt(d[S++]+u),w>=g&&(w=0),I>=b&&(I=0),k>=y&&(k=0),S>=x&&(S=0);return e.makeTensorInfo(r.shape,r.dtype,m)}};function t0(n,t,e,s,r){const o=md(s,t,e),a=q(e),i=Se(s);if(o){const h=gd(t,i);return"string"===r?n.slice(h,h+a):n.subarray(h,h+a)}const u=We(s,r,"string"===r?Pr(n):n),c=We(e,r);for(let h=0;h<c.size;++h){const d=c.indexToLoc(h),p=d.map((f,m)=>f+t[m]);c.set(u.get(...p),...d)}return"string"===r?yy(c.values):c.values}function jr(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s;ve(r,"slice");const[i,l]=tu(r,o,a);fd(r,i,l);const c=t0(e.data.get(r.dataId).values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,c)}const PD={kernelName:El,backendName:"cpu",kernelFunc:jr},MD={kernelName:Hi,backendName:"cpu",kernelFunc:function zD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;ve([r],"batchToSpaceND");const i=o.reduce((y,x)=>y*x),l=ii(r.shape,o,i),u=li(l.length,o.length),c=ui(r.shape,o,i),h=up(a,o.length),d=cp(c,a,o.length),p=gt({inputs:{x:r},backend:e,attrs:{shape:l}}),f=Hn({inputs:{x:p},backend:e,attrs:{perm:u}}),m=gt({inputs:{x:f},backend:e,attrs:{shape:c}}),g=jr({inputs:{x:m},backend:e,attrs:{begin:h,size:d}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),g}};function sm(n,t,e,s,r){const o=q(s),a=pn(r,e);for(let i=0;i<n.length;i++){const l=n[i];if(l<0)throw new Error("Input x must be non-negative!");l>=r||(a[l]+=o>0?t[i]:1)}return a}function n0(n,t,e,s=!1){const r=n.shape[0],o=n.shape[1],a=We([r,e],t.dtype);for(let i=0;i<r;i++)for(let l=0;l<o;l++){const u=n.get(i,l);if(u<0)throw new Error("Input x must be non-negative!");u>=e||a.set(s?1:t.size>0?a.get(i,u)+t.get(i,l):a.get(i,u)+1,i,u)}return a}const VD={kernelName:Gc,backendName:"cpu",kernelFunc:function BD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,u=sm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},UD={kernelName:zm,backendName:"cpu",kernelFunc:function WD(n){const{inputs:t,backend:e}=n,{s0:s,s1:r}=t,o=e.data.get(s.dataId).values,a=e.data.get(r.dataId).values,i=Be(Array.from(o),Array.from(a));return e.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},s0=mr(n=>Math.ceil(n)),GD=$o(na,s0),HD={kernelName:na,backendName:"cpu",kernelFunc:GD},jD=it(sa,(n,t)=>n>t.clipValueMax?t.clipValueMax:n<t.clipValueMin?t.clipValueMin:n),KD={kernelName:sa,backendName:"cpu",kernelFunc:jD},qD={kernelName:ji,backendName:"cpu",kernelFunc:n=>{const{x:t}=n.inputs,e=n.backend,s=new Float32Array(q(t.shape)),r=e.data.get(t.dataId),a=r.complexTensorInfos.imag,i=e.data.get(r.complexTensorInfos.real.dataId).values,l=e.data.get(a.dataId).values;for(let u=0;u<i.length;u++)s[u]=Math.hypot(i[u],l[u]);return e.makeOutput(s,t.shape,"float32")}};function r0(n,t,e,s){const r=In(e,q(t));if(s&&"string"!==e){let o=0;n.forEach(a=>{const i=q(a.shape);r.set(a.vals,o),o+=i})}else{let o=0;n.forEach(a=>{const i="string"===e?Pr(a.vals):a.vals;let l=0;for(let u=0;u<a.shape[0];++u){const c=u*t[1]+o;for(let h=0;h<a.shape[1];++h)r[c+h]=i[l++]}o+=a.shape[1]})}return r}function _o(n){const{inputs:t,backend:e}=n,{input:s}=t,r=e.data.get(s.dataId).complexTensorInfos.imag,o=e.data.get(r.dataId).values;return e.makeTensorInfo(r.shape,r.dtype,o)}const XD={kernelName:uh,backendName:"cpu",kernelFunc:_o};function Eo(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Me(r,t[0].shape)[0];let a=Ns(t.map(m=>m.shape),o);if(0===q(a))return e.makeTensorInfo(a,t[0].dtype,[]);const i=t.filter(m=>q(m.shape)>0);if(1===i.length)return As({inputs:{x:i[0]},backend:e});if(ap(i.map(m=>m.shape),o),"complex64"===i[0].dtype){const m=i.map(w=>Hr({inputs:{input:w},backend:e})),g=i.map(w=>_o({inputs:{input:w},backend:e})),y=Eo({inputs:m,backend:e,attrs:{axis:o}}),x=Eo({inputs:g,backend:e,attrs:{axis:o}}),b=Dn({inputs:{real:y,imag:x},backend:e});return m.forEach(w=>e.disposeIntermediateTensorInfo(w)),g.forEach(w=>e.disposeIntermediateTensorInfo(w)),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),b}const u=i.map(m=>{const y=[-1,q(m.shape.slice(o))];return gt({inputs:{x:m},backend:e,attrs:{shape:y}})}),c=u.map(m=>({vals:e.data.get(m.dataId).values,shape:m.shape}));a=Ns(u.map(m=>m.shape),1);const d=r0(c,a,t[0].dtype,1===u[0].shape[0]),p=Ns(i.map(m=>m.shape),o),f=e.makeTensorInfo(p,t[0].dtype,d);return u.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}const YD={kernelName:Ki,backendName:"cpu",kernelFunc:Eo};function o0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s;ve([r,o],"conv2d");const h=Ls(l),d=tn(r.shape,o.shape,a,u,i,c,!1,h),p=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,x=d.padInfo.top,b="channelsLast"===d.dataFormat,w=new en(d.outShape,r.dtype),I=Se(r.shape),k=Se(o.shape),S=I[0],T=b?I[1]:I[2],_=b?I[2]:1,E=b?1:I[1],M=w.strides[0],B=b?w.strides[1]:w.strides[2],V=b?w.strides[2]:1,j=b?1:w.strides[1],G=e.data.get(r.dataId).values,W=e.data.get(o.dataId).values,Z=w.values;for(let K=0;K<d.batchSize;++K){const Q=K*S,te=K*M;for(let oe=0;oe<d.outHeight;++oe){const le=te+oe*B,ie=oe*d.strideHeight-x;for(let ce=0;ce<p;++ce){const de=ie+ce*m;if(de<0||de>=d.inHeight)continue;const me=ce*k[0],Ie=Q+de*T;for(let $e=0;$e<d.outWidth;++$e){const Ee=le+$e*V,Fe=$e*d.strideWidth-y;for(let Ue=0;Ue<f;++Ue){const lt=Fe+Ue*g;if(lt<0||lt>=d.inWidth)continue;const yt=Ie+lt*_;let ft=me+Ue*k[1];for(let mt=0;mt<d.inChannels;++mt){const xt=G[yt+mt*E];for(let Ft=0;Ft<d.outChannels;++Ft)Z[Ee+Ft*j]+=xt*W[ft+Ft];ft+=d.outChannels}}}}}}return e.makeTensorInfo(w.shape,w.dtype,Z)}const ZD={kernelName:qi,backendName:"cpu",kernelFunc:o0},QD={kernelName:jc,backendName:"cpu",kernelFunc:function JD(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;ve([r,o],"conv2dBackpropFilter");const h=Ls(l),d=tn(r.shape,c,a,1,i,u,!1,h),{strideHeight:p,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,x=new en(d.filterShape,"float32"),b=d.padInfo.left,w=d.padInfo.top,I=e.data.get(r.dataId).values,k=e.data.get(o.dataId).values,S=new en(r.shape,r.dtype,I),T=new en(o.shape,o.dtype,k);for(let _=0;_<m;++_){const E=Math.max(0,Math.ceil((w-_)/p)),M=Math.min(d.outHeight,(d.inHeight+w-_)/p);for(let B=0;B<g;++B){const V=Math.max(0,Math.ceil((b-B)/f)),j=Math.min(d.outWidth,(d.inWidth+b-B)/f);for(let G=0;G<d.inChannels;++G)for(let W=0;W<d.outChannels;++W){let Z=0;for(let K=0;K<d.batchSize;++K)for(let Q=E;Q<M;++Q){const te=_+Q*p-w;for(let oe=V;oe<j;++oe){const le=B+oe*f-b;Z+=y?S.get(K,te,le,G)*T.get(K,Q,oe,W):S.get(K,G,te,le)*T.get(K,W,Q,oe)}}x.set(Z,_,B,G,W)}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},tR={kernelName:Xi,backendName:"cpu",kernelFunc:function eR(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s;ve([r,o],"conv2dBackpropInput");const h=Se(o.shape),d=Se(r.shape);let p=Ls(u);const f=tn(a,o.shape,i,1,l,c,!1,p),m=new en(f.inShape,"float32"),g=m.values,y=e.data.get(r.dataId).values,x=e.data.get(o.dataId).values,[b,w,I]=h,{batchSize:k,filterHeight:S,filterWidth:T,inChannels:_,inHeight:E,inWidth:M,outChannels:B,outHeight:V,outWidth:j,strideHeight:G,strideWidth:W}=f;p=f.dataFormat;const Z=S-1-f.padInfo.top,K=T-1-f.padInfo.left,Q="channelsLast"===p,te=m.strides[0],oe=Q?m.strides[1]:m.strides[2],le=Q?m.strides[2]:1,ie=Q?1:m.strides[1],ce=d[0],de=Q?d[1]:d[2],me=Q?d[2]:1,Ie=Q?1:d[1];for(let $e=0;$e<k;++$e)for(let Ee=0;Ee<_;++Ee)for(let Fe=0;Fe<E;++Fe){const Ue=Fe-Z,lt=Math.max(0,Math.ceil(Ue/G)),Nt=Math.min(V,(S+Ue)/G);for(let yt=0;yt<M;++yt){const ft=yt-K,mt=Math.max(0,Math.ceil(ft/W)),xt=Math.min(j,(T+ft)/W);let Ft=0;for(let dn=lt;dn<Nt;++dn){const Rs=dn*G-Ue;for(let Kn=mt;Kn<xt;++Kn){const xs=ce*$e+de*dn+me*Kn,qs=b*(S-1-Rs)+w*(T-1-(Kn*W-ft))+I*Ee;for(let wr=0;wr<B;++wr)Ft+=y[xs+Ie*wr]*x[qs+wr]}}g[te*$e+oe*Fe+le*yt+ie*Ee]=Ft}}return e.makeTensorInfo(m.shape,m.dtype,m.values)}},sR={kernelName:Yi,backendName:"cpu",kernelFunc:function nR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s;ve([r,o],"conv3d");const u=sr(r.shape,o.shape,a,l,i),{filterDepth:c,filterHeight:h,filterWidth:d,dilationDepth:p,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,x=g.left,b=g.top,w=new en(u.outShape,r.dtype),I=e.data.get(r.dataId).values,k=e.data.get(o.dataId).values,S=w.values,T=Se(r.shape),_=Se(o.shape);for(let E=0;E<u.batchSize;++E){const M=E*T[0],B=E*w.strides[0];for(let V=0;V<u.outDepth;++V){const j=B+V*w.strides[1],G=V*u.strideDepth-y;for(let W=0;W<c;++W){const Z=G+W*p;if(Z<0||Z>=u.inDepth)continue;const K=W*_[0],Q=M+Z*T[1];for(let te=0;te<u.outHeight;++te){const oe=j+te*w.strides[2],le=te*u.strideHeight-b;for(let ie=0;ie<h;++ie){const ce=le+ie*f;if(ce<0||ce>=u.inHeight)continue;const de=K+ie*_[1],me=Q+ce*T[2];for(let Ie=0;Ie<u.outWidth;++Ie){const $e=oe+Ie*u.outChannels,Ee=Ie*u.strideWidth-x;for(let Fe=0;Fe<d;++Fe){const Ue=Ee+Fe*m;if(Ue<0||Ue>=u.inWidth)continue;const Nt=me+Ue*u.inChannels;let yt=de+Fe*_[2];for(let ft=0;ft<u.inChannels;++ft){const mt=I[Nt+ft];for(let xt=0;xt<u.outChannels;++xt)S[$e+xt]+=mt*k[yt+xt];yt+=u.outChannels}}}}}}}}return e.makeTensorInfo(w.shape,w.dtype,w.values)}},oR={kernelName:Kc,backendName:"cpu",kernelFunc:function rR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s;ve([r,o],"conv3dBackpropFilterV2");const u=Se(r.shape),c=Se(o.shape),h=sr(r.shape,l,a,1,i),d=h.strideDepth,p=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,x=new en(h.filterShape,"float32"),b=x.values,[w,I,k,S]=x.strides,T=e.data.get(o.dataId).values,[_,E,M,B]=c,V=e.data.get(r.dataId).values,[j,G,W,Z]=u,K=h.padInfo.front,Q=h.padInfo.left,te=h.padInfo.top;for(let oe=0;oe<m;++oe){const le=Math.max(0,Math.ceil((K-oe)/d)),ie=Math.min(h.outDepth,(h.inDepth+K-oe)/d),ce=oe*w;for(let de=0;de<g;++de){const me=Math.max(0,Math.ceil((te-de)/p)),Ie=Math.min(h.outHeight,(h.inHeight+te-de)/p),$e=de*I+ce;for(let Ee=0;Ee<y;++Ee){const Fe=Math.max(0,Math.ceil((Q-Ee)/f)),Ue=Math.min(h.outWidth,(h.inWidth+Q-Ee)/f),lt=Ee*k+$e;for(let Nt=0;Nt<h.inChannels;++Nt){const yt=Nt*S+lt;for(let ft=0;ft<h.outChannels;++ft){let mt=0;for(let xt=0;xt<h.batchSize;++xt){const Ft=xt*j,Ks=xt*_;for(let dn=le;dn<ie;++dn){const Kn=(oe+dn*d-K)*G+Ft,Zr=dn*E+Ks;for(let xs=me;xs<Ie;++xs){const wr=(de+xs*p-te)*W+Kn,vr=xs*M+Zr;for(let Ir=Fe;Ir<Ue;++Ir)mt+=V[(Ee+Ir*f-Q)*Z+wr+Nt]*T[Ir*B+vr+ft]}}}b[yt+ft]=mt}}}}}return e.makeTensorInfo(x.shape,x.dtype,x.values)}},iR={kernelName:qc,backendName:"cpu",kernelFunc:function aR(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s;ve([r],"conv3dBackpropInputV2");const u=Se(r.shape),c=Se(o.shape),h=sr(l,o.shape,i,1,a),d=new en(h.inShape,"float32"),p=d.values,[f,m,g,y]=d.strides,x=e.data.get(r.dataId).values,[b,w,I,k]=u,S=e.data.get(o.dataId).values,[T,_,E,M]=c,{batchSize:B,filterDepth:V,filterHeight:j,filterWidth:G,inChannels:W,inDepth:Z,inHeight:K,inWidth:Q,outChannels:te,outDepth:oe,outHeight:le,outWidth:ie,strideDepth:ce,strideHeight:de,strideWidth:me}=h,Ie=V-1-h.padInfo.front,$e=j-1-h.padInfo.top,Ee=G-1-h.padInfo.left;for(let Fe=0;Fe<B;++Fe)for(let Ue=0;Ue<W;++Ue)for(let lt=0;lt<Z;++lt){const Nt=lt-Ie,yt=Math.max(0,Math.ceil(Nt/ce)),ft=Math.min(oe,(V+Nt)/ce);for(let mt=0;mt<K;++mt){const xt=mt-$e,Ft=Math.max(0,Math.ceil(xt/de)),Ks=Math.min(le,(j+xt)/de);for(let dn=0;dn<Q;++dn){const Rs=dn-Ee,Kn=Math.max(0,Math.ceil(Rs/me)),Zr=Math.min(ie,(G+Rs)/me);let xs=0;for(let qs=yt;qs<ft;++qs){const wr=qs*ce-Nt;for(let vr=Ft;vr<Ks;++vr){const Ir=vr*de-xt;for(let Pi=Kn;Pi<Zr;++Pi){const Tm=b*Fe+w*qs+I*vr+k*Pi,dj=T*(V-1-wr)+_*(j-1-Ir)+E*(G-1-(Pi*me-Rs))+M*Ue;for(let Ac=0;Ac<te;++Ac)xs+=x[Tm+Ac]*S[dj+Ac]}}}p[f*Fe+m*lt+g*mt+y*dn+Ue]=xs}}}return e.makeTensorInfo(d.shape,d.dtype,d.values)}},lR=it(ra,n=>Math.cos(n)),uR={kernelName:ra,backendName:"cpu",kernelFunc:lR},cR=it(oa,n=>Math.cosh(n)),hR={kernelName:oa,backendName:"cpu",kernelFunc:cR},pR={kernelName:Xc,backendName:"cpu",kernelFunc:function dR(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,[c,h,d,p]=r.shape,f=o.shape[0],[m,g]=i,y=We([f,m,g,p],"float32"),x=e.data.get(o.dataId).values,b=e.data.get(a.dataId).values,w=e.data.get(r.dataId).values,I=Se(r.shape),k=Se(y.shape);for(let S=0;S<f;S++){const T=4*S,_=x[T],E=x[T+1],M=x[T+2],B=x[T+3],V=b[S];if(V>=c)continue;const j=m>1?(M-_)*(h-1)/(m-1):0,G=g>1?(B-E)*(d-1)/(g-1):0;for(let W=0;W<m;W++){const Z=m>1?_*(h-1)+W*j:.5*(_+M)*(h-1);if(Z<0||Z>h-1)for(let K=0;K<g;K++)for(let Q=0;Q<p;Q++)y.values[Q+K*k[2]+W*k[1]+S*k[0]]=u;else if("bilinear"===l){const K=Math.floor(Z),Q=Math.ceil(Z),te=Z-K;for(let oe=0;oe<g;oe++){const le=g>1?E*(d-1)+oe*G:.5*(E+B)*(d-1);if(le<0||le>d-1){for(let me=0;me<p;me++)y.values[me+oe*k[2]+W*k[1]+S*k[0]]=u;continue}const ie=Math.floor(le),ce=Math.ceil(le),de=le-ie;for(let me=0;me<p;me++){let Ie=me+ie*I[2]+K*I[1]+V*I[0];const $e=w[Ie];Ie=me+ce*I[2]+K*I[1]+V*I[0];const Ee=w[Ie];Ie=me+ie*I[2]+Q*I[1]+V*I[0];const Fe=w[Ie];Ie=me+ce*I[2]+Q*I[1]+V*I[0];const Ue=w[Ie],lt=$e+(Ee-$e)*de;Ie=me+oe*k[2]+W*k[1]+S*k[0],y.values[Ie]=lt+(Fe+(Ue-Fe)*de-lt)*te}}}else for(let K=0;K<g;++K){const Q=g>1?E*(d-1)+K*G:.5*(E+B)*(d-1);if(Q<0||Q>d-1){for(let le=0;le<p;le++)y.values[le+K*k[2]+W*k[1]+S*k[0]]=u;continue}const te=Math.round(Q),oe=Math.round(Z);for(let le=0;le<p;le++)y.values[le+K*k[2]+W*k[1]+S*k[0]]=w[le+te*I[2]+oe*I[1]+V*I[0]]}}}return e.makeTensorInfo(y.shape,y.dtype,y.values)}},mR={kernelName:Zi,backendName:"cpu",kernelFunc:function fR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s;ve(r,"cumsum");const l=Dt([o],r.shape.length);let u=r;null!=l&&(u=Hn({inputs:{x:r},backend:e,attrs:{perm:l}}));const c=zt(1,r.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=Ln(u.dtype,"int32"),d=pn(q(u.shape),h),p=e.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=i?(y,x)=>y+f-x-1:(y,x)=>y+x;for(let y=0;y<p.length;y+=f)for(let x=0;x<f;x++){const b=m(y,x);if(0===x)d[b]=a?0:p[b];else{const w=m(y,x-1);d[b]=a?p[w]+d[w]:p[b]+d[w]}}const g=e.makeTensorInfo(u.shape,h,d);if(null!=l){const x=Hn({inputs:{x:g},backend:e,attrs:{perm:go(l)}});return e.disposeIntermediateTensorInfo(g),e.disposeIntermediateTensorInfo(u),x}return g}},yR={kernelName:Yc,backendName:"cpu",kernelFunc:function gR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const c=sm(e.data.get(r.dataId).values,e.data.get(o.dataId).values,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const c=n0(e.bufferSync(r),e.bufferSync(o),a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}},bR={kernelName:Zc,backendName:"cpu",kernelFunc:function xR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C("NHWC"===a,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`),C(o>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${o}`);const i=r.shape[0],l=r.shape[1],u=r.shape[2],c=r.shape[3],h=l*o,d=u*o,p=c/(o*o),f=e.data.get(r.dataId).values,m=new Float32Array(i*h*d*p);let g=0;for(let y=0;y<i;++y)for(let x=0;x<h;++x){const b=Math.floor(x/o),w=x%o;for(let I=0;I<d;++I){const k=Math.floor(I/o),T=(w*o+I%o)*p;for(let _=0;_<p;++_)m[g++]=f[_+T+c*(k+u*(b+l*y))]}}return e.makeTensorInfo([i,h,d,p],r.dtype,m)}};function a0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;ve([r,o],"depthwiseConv2DNative");const c=Se(r.shape),h=Se(o.shape);let d=l;null==d&&(d=[1,1]),C(un(a,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${d}'`);const p=tn(r.shape,o.shape,a,d,i,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:x}=p,b=x.left,w=x.top,I=p.outChannels/p.inChannels,k=new en(p.outShape,r.dtype),S=e.data.get(r.dataId).values,T=e.data.get(o.dataId).values,_=k.values;for(let E=0;E<p.batchSize;++E){const M=E*c[0],B=E*k.strides[0];for(let V=0;V<p.outHeight;++V){const j=B+V*k.strides[1],G=V*p.strideHeight-w;for(let W=0;W<f;++W){const Z=G+W*g;if(Z<0||Z>=p.inHeight)continue;const K=W*h[0],Q=M+Z*c[1];for(let te=0;te<p.outWidth;++te){const oe=j+te*k.strides[2],le=te*p.strideWidth-b;for(let ie=0;ie<m;++ie){const ce=le+ie*y;if(ce<0||ce>=p.inWidth)continue;const me=Q+ce*p.inChannels;let Ie=oe,$e=K+ie*h[1];for(let Ee=0;Ee<p.inChannels;++Ee){const Fe=S[me+Ee];for(let Ue=0;Ue<I;++Ue)_[Ie+Ue]+=Fe*T[$e+Ue];Ie+=I,$e+=I}}}}}}return e.makeTensorInfo(k.shape,k.dtype,k.values)}const wR={kernelName:Ji,backendName:"cpu",kernelFunc:a0},IR={kernelName:Jc,backendName:"cpu",kernelFunc:function vR(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s;ve([r,o],"depthwiseConv2dNativeBackpropFilter");const h=tn(r.shape,c,a,i,l,u,!0),{strideHeight:d,strideWidth:p,filterHeight:f,filterWidth:m}=h,g=new en(h.filterShape,"float32"),y=h.padInfo.left,x=h.padInfo.top,b=h.outChannels/h.inChannels,w=e.data.get(r.dataId).values,I=new en(r.shape,r.dtype,w),k=e.data.get(o.dataId).values,S=new en(o.shape,o.dtype,k);for(let T=0;T<f;++T){const _=Math.max(0,Math.ceil((x-T)/d)),E=Math.min(h.outHeight,(h.inHeight+x-T)/d);for(let M=0;M<m;++M){const B=Math.max(0,Math.ceil((y-M)/p)),V=Math.min(h.outWidth,(h.inWidth+y-M)/p);for(let j=0;j<h.outChannels;++j){const G=Math.trunc(j/b),W=j%b;let Z=0;for(let K=0;K<h.batchSize;++K)for(let Q=_;Q<E;++Q){const te=T+Q*d-x;for(let oe=B;oe<V;++oe)Z+=I.get(K,te,M+oe*p-y,G)*S.get(K,Q,oe,j)}g.set(Z,T,M,G,W)}}}return e.makeTensorInfo(g.shape,g.dtype,g.values)}},kR={kernelName:Qc,backendName:"cpu",kernelFunc:function CR(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s;ve([r,o],"depthwiseConv2DNativeBackpropInput");const h=Se(r.shape),d=Se(o.shape),p=tn(c,o.shape,a,i,l,u,!0),f=new en(p.inShape,"float32"),m=f.values,[g,y,x]=f.strides,b=e.data.get(r.dataId).values,[w,I,k]=h,S=e.data.get(o.dataId).values,[T,_,E]=d,{batchSize:M,filterHeight:B,filterWidth:V,inChannels:j,inHeight:G,inWidth:W,outChannels:Z,outHeight:K,outWidth:Q,strideHeight:te,strideWidth:oe}=p,le=B-1-p.padInfo.top,ie=V-1-p.padInfo.left,ce=Z/j;for(let de=0;de<M;++de)for(let me=0;me<j;++me)for(let Ie=0;Ie<G;++Ie){const $e=Ie-le,Ee=Math.max(0,Math.ceil($e/te)),Fe=Math.min(K,(B+$e)/te);for(let Ue=0;Ue<W;++Ue){const lt=Ue-ie,Nt=Math.max(0,Math.ceil(lt/oe)),yt=Math.min(Q,(V+lt)/oe);let ft=0;for(let mt=Ee;mt<Fe;++mt){const xt=mt*te-$e;for(let Ft=Nt;Ft<yt;++Ft){const dn=w*de+I*mt+k*Ft,Rs=T*(B-1-xt)+_*(V-1-(Ft*oe-lt))+E*me;for(let Kn=0;Kn<ce;++Kn)ft+=b[dn+(me*ce+Kn)]*S[Rs+Kn]}}m[g*de+y*Ie+x*Ue+me]=ft}}return e.makeTensorInfo(f.shape,f.dtype,f.values)}},SR={kernelName:"Diag",backendName:"cpu",kernelFunc:function NR(n){const{inputs:t,backend:e}=n,{x:s}=t,r=q(s.shape),o=e.data.get(s.dataId).values,a=We([r,r],s.dtype),i=a.values;for(let u=0;u<o.length;u++)i[u*r+u]=o[u];const l=[...s.shape,...s.shape];return e.makeTensorInfo(l,a.dtype,a.values)}},TR={kernelName:Qi,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r}=n,{strides:o,pad:a,dilations:i}=e,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(r.dataId).values,d=r.shape.length,{batchSize:p,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:x,padInfo:b,strideHeight:w,strideWidth:I,filterHeight:k,filterWidth:S,dilationHeight:T,dilationWidth:_,outShape:E}=Xa(s.shape,r.shape,o,a,"NHWC",i),M=q(E),B=E.length,V=In(s.dtype,M);for(let G=0;G<p;++G)for(let W=0;W<y;++W){const Z=W*w-b.top;for(let K=0;K<x;++K){const Q=K*I-b.left;for(let te=0;te<g;++te){let oe=Number.MIN_SAFE_INTEGER;for(let ie=0;ie<k;++ie){const ce=Z+ie*T;if(ce>=0&&ce<f)for(let de=0;de<S;++de){const me=Q+de*_;if(me>=0&&me<m){const Ie=ws([G,ce,me,te],c,Se(s.shape)),$e=ws([ie,de,te],d,Se(r.shape)),Ee=u[Ie]+h[$e];Ee>oe&&(oe=Ee)}}}V[ws([G,W,K,te],B,Se(E))]=oe}}}return{dataId:l.write(Nr(V,s.dtype),E,s.dtype),shape:E,dtype:s.dtype}}},$R={kernelName:th,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=Yn(s.shape,u.data.get(s.dataId).values),h=Yn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:I,filterWidth:k,dilationHeight:S,dilationWidth:T,outShape:_}=Xa(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${th}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const E=Yn(_,u.data.get(o.dataId).values),M=Rm(r.shape,r.dtype);for(let V=0;V<d;++V)for(let j=0;j<g;++j){const G=j*b-x.top;for(let W=0;W<y;++W){const Z=W*w-x.left;for(let K=0;K<m;++K){let Q=Number.MIN_SAFE_INTEGER,te=0,oe=0;for(let le=0;le<I;++le){const ie=G+le*S;if(ie>=0&&ie<p)for(let ce=0;ce<k;++ce){const de=Z+ce*T;if(de>=0&&de<f){const me=c[V][ie][de][K]+h[le][ce][K];me>Q&&(Q=me,te=le,oe=ce)}}}M[te][oe][K]+=E[V][j][W][K]}}}return{dataId:u.write(Nr(M,s.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},_R={kernelName:eh,backendName:"cpu",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,filter:r,dy:o}=n,{strides:a,pad:i,dilations:l}=e,u=t,c=Yn(s.shape,u.data.get(s.dataId).values),h=Yn(r.shape,u.data.get(r.dataId).values),{batchSize:d,inHeight:p,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:x,strideHeight:b,strideWidth:w,filterHeight:I,filterWidth:k,dilationHeight:S,dilationWidth:T,outShape:_}=Xa(s.shape,r.shape,a,i,"NHWC",l);C(o.rank===_.length,()=>`Error in ${eh}, dy must have the same rank as output ${_.length}, but got ${o.rank}`);const E=Yn(_,u.data.get(o.dataId).values),M=Rm(s.shape,s.dtype);for(let V=0;V<d;++V)for(let j=0;j<g;++j){const G=j*b-x.top;for(let W=0;W<y;++W){const Z=W*w-x.left;for(let K=0;K<m;++K){let Q=Number.MIN_SAFE_INTEGER,te=G<0?0:G,oe=Z<0?0:Z;for(let le=0;le<I;++le){const ie=G+le*S;if(ie>=0&&ie<p)for(let ce=0;ce<k;++ce){const de=Z+ce*T;if(de>=0&&de<f){const me=c[V][ie][de][K]+h[le][ce][K];me>Q&&(Q=me,te=ie,oe=de)}}}M[V][te][oe][K]+=E[V][j][W][K]}}}return{dataId:u.write(Nr(M,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},rm=Mt((n,t)=>n*t),ER=em((n,t,e,s)=>({real:n*e-t*s,imag:n*s+t*e})),lc=rn(Ca,rm,ER),AR={kernelName:Ca,backendName:"cpu",kernelFunc:lc};function Ti(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;let i;ve(r,"sum"),i="bool"===r.dtype?gr({inputs:{x:r},backend:e,attrs:{dtype:"int32"}}):As({inputs:{x:r},backend:e});const l=i.shape.length,u=Me(o,i.shape),c=Dt(u,l);let h=u,d=i;null!=c&&(d=Hn({inputs:{x:i},backend:e,attrs:{perm:c}}),h=zt(h.length,l)),cn("sum",h,d.shape.length);const[p,f]=nn(d.shape,h);let g=ic(e,p,Ln(d.dtype,"int32"));const y=q(f),x=e.data.get(g.dataId).values,b=e.data.get(d.dataId).values;for(let w=0;w<x.length;++w){const I=w*y;let k=0;for(let S=0;S<y;++S)k+=b[I+S];x[w]=k}if(a){const I=g;g=gt({inputs:{x:g},backend:e,attrs:{shape:At(g.shape,u)}}),e.disposeIntermediateTensorInfo(I)}return e.disposeIntermediateTensorInfo(i),null!=c&&e.disposeIntermediateTensorInfo(d),g}const DR={kernelName:Al,backendName:"cpu",kernelFunc:Ti},FR={kernelName:nh,backendName:"cpu",kernelFunc:function RR(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=wp(r,o.length);Ip(a.length,l,o);const{path:u,steps:c}=Cp(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let m=0;m<h;++m){for(const g of c[m]){const{permutationIndices:y,expandDims:x}=vp(p,l[g]);let b;kp(y)?b=o[g]:(b=Hn({inputs:{x:o[g]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let I=0;I<x.length;++I)w.splice(x[I],0,1);je(b.shape,w)||(b=gt({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=lc({inputs:{a:b,b:d},backend:e}),f.push(d))}m<h-1&&(u[m]>=0&&(d=Ti({inputs:{x:d},backend:e,attrs:{axis:u[m]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&e.disposeIntermediateTensorInfo(m);return d}},LR={kernelName:sh,backendName:"cpu",kernelFunc:function OR(n){const{inputs:t,backend:e}=n,{dy:s,y:r}=t;ve([s,r],"eluGrad");const o=new Float32Array(q(r.shape)),a=e.data.get(r.dataId).values,i=e.data.get(s.dataId).values;for(let l=0;l<a.length;++l){const u=a[l];o[l]=u>=1?i[l]:i[l]*(u+1)}return e.makeTensorInfo(r.shape,"float32",o)}},i0=Mt((n,t)=>n===t?1:0),l0=rn(el,i0,null,"bool"),PR={kernelName:el,backendName:"cpu",kernelFunc:l0},zR=dp,MR=pp,BR=fp,VR=mp,WR=gp,UR=yp,GR=it(la,n=>{const t=Math.sign(n),e=Math.abs(n),s=1/(1+zR*e);return t*(1-((((UR*s+WR)*s+VR)*s+BR)*s+MR)*s*Math.exp(-e*e))}),HR={kernelName:la,backendName:"cpu",kernelFunc:GR},u0=mr(n=>Math.exp(n)),c0=$o(ua,u0),jR={kernelName:ua,backendName:"cpu",kernelFunc:c0};function uc(n){const{inputs:t,backend:e,attrs:s}=n,{input:r}=t,{dim:o}=s,a=r.shape.length,i=r.shape.slice();let l=o;return o<0&&(C(-(a+1)<=o,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+o+1),i.splice(l,0,1),gt({inputs:{x:r},backend:e,attrs:{shape:i}})}const KR={kernelName:tl,backendName:"cpu",kernelFunc:uc},h0=mr(n=>Math.expm1(n)),qR=$o(ca,h0),XR={kernelName:ca,backendName:"cpu",kernelFunc:qR},YR=Mt((n,t)=>n/t),om=rn(aa,YR),am={kernelName:aa,backendName:"cpu",kernelFunc:om},d0=Mt((n,t)=>n-t),ZR=em((n,t,e,s)=>({real:n-e,imag:t-s})),im=rn(za,d0,ZR),JR={kernelName:za,backendName:"cpu",kernelFunc:im};function p0(n,t,e){const s=n.shape,r=s[0],o=s[1],a=e.data.get(n.dataId),i=a.complexTensorInfos.real,l=a.complexTensorInfos.imag,u=[r,o],c=q(u),h=an("float32",c),d=an("float32",c);for(let g=0;g<r;g++){const y=jr({inputs:{x:i},backend:e,attrs:{begin:[g,0],size:[1,o]}}),x=jr({inputs:{x:l},backend:e,attrs:{begin:[g,0],size:[1,o]}}),b=Dn({inputs:{real:y,imag:x},backend:e}),{real:w,imag:I}=QR(b,t,e),k=Vs(w,I);for(let S=0;S<o;S++){const T=xp(k,S);h[g*o+S]=T.real,d[g*o+S]=T.imag}e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(x),e.disposeIntermediateTensorInfo(b)}const p=e.makeTensorInfo(u,"float32",h),f=e.makeTensorInfo(u,"float32",d),m=Dn({inputs:{real:p,imag:f},backend:e});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),m}function QR(n,t,e){const s=q(n.shape),r=e.data.get(n.dataId),o=e.data.get(r.complexTensorInfos.real.dataId).values,a=e.data.get(r.complexTensorInfos.imag.dataId).values;if(function eF(n){return 0==(n&n-1)}(s)){const i=lm(o,a,s,t,e),l=[n.shape[0],n.shape[1]];if(t){const u=e.makeTensorInfo(l,"float32",i.real),c=e.makeTensorInfo(l,"float32",i.imag),h=e.makeTensorInfo([],"float32",Zs(s,"float32")),d=As({inputs:{x:h},backend:e}),p=am.kernelFunc({inputs:{a:u,b:h},backend:e}),f=am.kernelFunc({inputs:{a:c,b:d},backend:e}),m=e.data.get(p.dataId).values,g=e.data.get(f.dataId).values;return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),{real:m,imag:g}}return i}{const l=function tF(n,t,e){const s=new Float32Array(2*t);for(let r=0;r<t;r++){let o=0,a=0;for(let i=0;i<t;i++){const l=dy(r*i,t,e),u=xp(n,i);o+=u.real*l.real-u.imag*l.imag,a+=u.real*l.imag+u.imag*l.real}e&&(o/=t,a/=t),cy(s,o,a,r)}return s}(Vs(o,a),s,t);return iy(l)}}function lm(n,t,e,s,r){if(1===e)return{real:n,imag:t};const o=Vs(n,t),a=e/2,i=ly(o),l=i.real,u=i.imag,c=[l.length],h=r.makeTensorInfo(c,"float32",l),d=r.makeTensorInfo(c,"float32",u),p=Dn({inputs:{real:h,imag:d},backend:r}),f=uy(o),m=f.real,g=f.imag,y=[m.length],x=r.makeTensorInfo(y,"float32",m),b=r.makeTensorInfo(y,"float32",g),w=Dn({inputs:{real:x,imag:b},backend:r}),I=lm(l,u,a,s,r),k=I.real,S=I.imag,T=[k.length],_=r.makeTensorInfo(T,"float32",k),E=r.makeTensorInfo(T,"float32",S),M=Dn({inputs:{real:_,imag:E},backend:r}),B=lm(m,g,a,s,r),V=B.real,j=B.imag,G=[V.length],W=r.makeTensorInfo(G,"float32",V),Z=r.makeTensorInfo(G,"float32",j),K=Dn({inputs:{real:W,imag:Z},backend:r}),Q=hy(e,s),te=[Q.real.length],oe=r.makeTensorInfo(te,"float32",Q.real),le=r.makeTensorInfo(te,"float32",Q.imag),ie=Dn({inputs:{real:oe,imag:le},backend:r}),ce=lc({inputs:{a:ie,b:K},backend:r}),de=Si({inputs:{a:M,b:ce},backend:r}),me=im({inputs:{a:M,b:ce},backend:r}),Ie=Hr({inputs:{input:de},backend:r}),$e=Hr({inputs:{input:me},backend:r}),Ee=_o({inputs:{input:de},backend:r}),Fe=_o({inputs:{input:me},backend:r}),Ue=Eo({inputs:[Ie,$e],backend:r,attrs:{axis:0}}),lt=Eo({inputs:[Ee,Fe],backend:r,attrs:{axis:0}}),Nt=r.data.get(Ue.dataId).values,yt=r.data.get(lt.dataId).values;return r.disposeIntermediateTensorInfo(h),r.disposeIntermediateTensorInfo(d),r.disposeIntermediateTensorInfo(p),r.disposeIntermediateTensorInfo(x),r.disposeIntermediateTensorInfo(b),r.disposeIntermediateTensorInfo(w),r.disposeIntermediateTensorInfo(_),r.disposeIntermediateTensorInfo(E),r.disposeIntermediateTensorInfo(M),r.disposeIntermediateTensorInfo(W),r.disposeIntermediateTensorInfo(Z),r.disposeIntermediateTensorInfo(K),r.disposeIntermediateTensorInfo(oe),r.disposeIntermediateTensorInfo(le),r.disposeIntermediateTensorInfo(ie),r.disposeIntermediateTensorInfo(ce),r.disposeIntermediateTensorInfo(de),r.disposeIntermediateTensorInfo(me),r.disposeIntermediateTensorInfo(Ie),r.disposeIntermediateTensorInfo(Ee),r.disposeIntermediateTensorInfo($e),r.disposeIntermediateTensorInfo(Fe),r.disposeIntermediateTensorInfo(Ue),r.disposeIntermediateTensorInfo(lt),{real:Nt,imag:yt}}const sF={kernelName:"FFT",backendName:"cpu",kernelFunc:function nF(n){const{inputs:t,backend:e}=n,{input:s}=t,r=q(s.shape),o=s.shape[s.shape.length-1],i=gt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=p0(i,!1,e),u=gt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}};function um(n){const{backend:t,attrs:e}=n,{shape:s,value:r,dtype:o}=e,a=o||Ho(r),i=In(a,q(s));return function oF(n,t,e){n.fill(t)}(i,r),t.makeTensorInfo(s,a,i)}const rF={kernelName:oh,backendName:"cpu",kernelFunc:um},aF={kernelName:ah,backendName:"cpu",kernelFunc:({inputs:n,backend:e})=>{const{image:s}=n,r=e,o=an(s.dtype,q(s.shape)),[a,i,l,u]=s.shape,c=r.data.get(s.dataId).values;for(let d=0;d<a;d++){const p=d*l*i*u;for(let f=0;f<i;f++){const m=f*(l*u);for(let g=0;g<l;g++){const y=g*u;for(let x=0;x<u;x++){const b=Math.round(l-g-1),w=p+m+y+x;let I=c[w];b>=0&&b<l&&(I=c[p+m+b*u+x]),o[w]=I}}}}return{dataId:r.write(o,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},f0=mr(n=>Math.floor(n)),iF=$o(ha,f0),lF={kernelName:ha,backendName:"cpu",kernelFunc:iF},uF=Mt((n,t)=>Math.floor(n/t)),cF=rn(da,uF,null,"int32"),hF={kernelName:da,backendName:"cpu",kernelFunc:cF},pF={kernelName:Bl,backendName:"cpu",kernelFunc:function dF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=o0({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const g=m;m=Si({inputs:{a:m,b:a},backend:e}),e.disposeIntermediateTensorInfo(g)}if(p){const g=m;m=Qf(e,m,p,i,f),e.disposeIntermediateTensorInfo(g)}return m}},mF={kernelName:Vl,backendName:"cpu",kernelFunc:function fF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s;let m=a0({inputs:{x:r,filter:o},backend:e,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d}});if(a){const g=m;m=Si({inputs:{a:m,b:a},backend:e}),e.disposeIntermediateTensorInfo(g)}if(p){const g=m;m=Qf(e,m,p,i,f),e.disposeIntermediateTensorInfo(g)}return m}};function m0(n,t,e,s,r,o,a,i,l){const u=We([s,o],e);for(let c=0;c<s;c++){const h=[];let d=0;for(let p=0;p<r;p++){const f=n[c*r+p];d+=f*a[p],h.push(f)}if(d<0||d>=l/o)throw new Error(`Invalid indices: ${h} does not index into ${i}`);for(let p=0;p<o;p++)u.values[c*o+p]=t.get(...t.indexToLoc(d*o+p))}return u}const yF={kernelName:ih,backendName:"cpu",kernelFunc:function gF(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=q(s.shape),a=r.shape,i=a[a.length-1],[l,u,c,h]=hp(s,r);if(0===u)return e.makeTensorInfo(l,s.dtype,[]);const f=m0(e.data.get(r.dataId).values,e.bufferSync(s),s.dtype,u,i,c,h,s.shape,o);return e.makeTensorInfo(l,s.dtype,f.values)}};function g0(n,t,e){const s=We(e,n.dtype);for(let r=0;r<s.size;++r){const a=s.indexToLoc(r).slice(),u=t.locToIndex([a[0],a[2]]);a[2]=t.values[u];const c=n.locToIndex(a);s.values[r]=n.values[c]}return s}const bF={kernelName:sl,backendName:"cpu",kernelFunc:function xF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s;ve([r,o],"gatherV2");let l=i;null==i&&(l=0);const u=q(o.shape),h=Sp(r,o,Me(a,r.shape)[0],l),d=gt({inputs:{x:r},backend:e,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),p=gt({inputs:{x:o},backend:e,attrs:{shape:[h.batchSize,u/h.batchSize]}}),f=[h.batchSize,h.outerSize,u/h.batchSize,h.sliceSize],m=e.bufferSync(p),y=g0(e.bufferSync(d),m,f);return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.makeTensorInfo(h.outputShape,y.dtype,y.values)}},y0=Mt((n,t)=>n>t?1:0),wF=rn(rl,y0,null,"bool"),vF={kernelName:rl,backendName:"cpu",kernelFunc:wF},x0=Mt((n,t)=>n>=t?1:0),IF=rn(pa,x0,null,"bool"),CF={kernelName:pa,backendName:"cpu",kernelFunc:IF},NF={kernelName:lh,backendName:"cpu",kernelFunc:function kF(n){const{inputs:t,backend:e}=n,{input:s}=t,r=q(s.shape),o=s.shape[s.shape.length-1],i=gt({inputs:{x:s},backend:e,attrs:{shape:[r/o,o]}}),l=p0(i,!0,e),u=gt({inputs:{x:l},backend:e,attrs:{shape:s.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(l),u}},SF=it(ma,n=>Number.isFinite(n)?1:0,"bool"),TF={kernelName:ma,backendName:"cpu",kernelFunc:SF},$F=it(ga,n=>Math.abs(n)===1/0?1:0,"bool"),_F={kernelName:ga,backendName:"cpu",kernelFunc:$F},EF=it(ya,n=>Number.isNaN(n)?1:0,"bool"),AF={kernelName:ya,backendName:"cpu",kernelFunc:EF},b0=Mt((n,t)=>n<t?1:0),DF=rn(al,b0,null,"bool"),RF={kernelName:al,backendName:"cpu",kernelFunc:DF},w0=Mt((n,t)=>n<=t?1:0),FF=rn(il,w0,null,"bool"),OF={kernelName:il,backendName:"cpu",kernelFunc:FF};function v0(n,t,e){const s=(t-n)/(e-1),r=pn(e,"float32");r[0]=n;for(let o=1;o<r.length;o++)r[o]=r[o-1]+s;return r}const PF={kernelName:ch,backendName:"cpu",kernelFunc:function LF(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=v0(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},I0=mr(n=>Math.log(n)),zF=$o(xa,I0),MF={kernelName:xa,backendName:"cpu",kernelFunc:zF},BF=it(ba,n=>Math.log1p(n)),VF={kernelName:ba,backendName:"cpu",kernelFunc:BF},WF=Mt((n,t)=>n&&t),UF=rn(ll,WF,null,"bool"),GF={kernelName:ll,backendName:"cpu",kernelFunc:UF},HF=it(ul,n=>n?0:1,"bool"),jF={kernelName:ul,backendName:"cpu",kernelFunc:HF},KF=Mt((n,t)=>n||t),qF=rn(cl,KF,null,"bool"),XF={kernelName:cl,backendName:"cpu",kernelFunc:qF},ZF={kernelName:hl,backendName:"cpu",kernelFunc:function YF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s;ve(r,"LRN");const u=r.shape[3],c=u-1,h=e.data.get(r.dataId).values,d=q(r.shape),p=new Float32Array(d);function f(m){const g=m%u;let y=m-g+Math.max(0,g-o);const x=m-g+Math.min(g+o,c);let b=0;for(;y<=x;y++){const w=h[y];b+=w*w}return b}for(let m=0;m<d;m++){const g=f(m),y=h[m]*Math.pow(a+i*g,-l);p[m]=y}return e.makeTensorInfo(r.shape,r.dtype,p)}},QF={kernelName:hh,backendName:"cpu",kernelFunc:function JF(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s;ve(a,"LRNGrad");const h=q(a.shape),d=a.shape[3],p=e.data.get(a.dataId).values,f=e.data.get(r.dataId).values,m=e.data.get(o.dataId).values,g=new Float32Array(h),y=h;for(let x=0;x<y;x++){const b=x%d,w=x-b+Math.max(0,b-i),I=x-b+Math.min(d,b+i+1);let k=0;for(let S=w;S<I;S++)k+=Math.pow(f[S],2);k=u*k+l;for(let S=w;S<I;S++){let T=-2*u*c*f[S]*m[x]/k;x===S&&(T+=Math.pow(k,-c)),T*=p[x],g[S]+=T}}return e.makeTensorInfo(a.shape,r.dtype,g)}};function C0(n,t,e,s){const r=an(s,q(e));for(let o=0;o<r.length;++o){const a=o*t;let i=n[a];for(let l=0;l<t;++l){const u=n[a+l];(Number.isNaN(u)||u>i)&&(i=u)}r[o]=i}return r}function k0(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=e;let l=r.shape;const u=l.length,c=Me(o,l);let h=c;const d=Dt(h,u);let p=i.data.get(r.dataId).values;if(null!=d){const w=new Array(u);for(let I=0;I<w.length;I++)w[I]=l[d[I]];p=tm(p,l,r.dtype,d,w),h=zt(h.length,u),l=w}ve(r,"max"),cn("max",h,u);const[f,m]=nn(l,h),y=C0(p,q(m),f,r.dtype),x=i.write(y,f,r.dtype);let b=f;return a&&(b=At(f,c)),{dataId:x,shape:b,dtype:r.dtype}}const eO={kernelName:dl,backendName:"cpu",kernelFunc:k0},N0=Mt((n,t)=>Math.max(n,t)),tO=rn(wa,N0),nO={kernelName:wa,backendName:"cpu",kernelFunc:tO},rO={kernelName:pl,backendName:"cpu",kernelFunc:function sO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;ve(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(un(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=Jn(r.shape,o,a,1,i,l);let h;if(1===c.filterWidth&&1===c.filterHeight&&je(c.inShape,c.outShape))h=As({inputs:{x:r},backend:e});else{const d=e.data.get(r.dataId).values,p=Se(r.shape),f=nm(d,0,r.dtype,p,c,"max");h=e.makeTensorInfo(c.outShape,r.dtype,f.values)}return h}},aO={kernelName:fl,backendName:"cpu",kernelFunc:function oO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s;ve(r,"maxPool3d");const c=Os(r.shape,o,a,1,i,l,u),d=e0(e.data.get(r.dataId).values,0,r.dtype,Se(r.shape),c,"max");return e.makeTensorInfo(d.shape,"float32",d.values)}},lO={kernelName:ph,backendName:"cpu",kernelFunc:function iO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,{filterSize:a,strides:i,pad:l,dimRoundingMode:u}=s;ve([r,o],"maxPool3DGrad");const c=Os(o.shape,a,i,1,l,u),d=function SD(n,t){const e=We(t.outShape,"int32"),s=t.strideDepth,r=t.strideHeight,o=t.strideWidth,a=t.dilationDepth,i=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const x=y*s-d;let b=x;for(;b<0;)b+=a;const w=Math.min(t.inDepth,u+x);for(let I=0;I<t.outHeight;++I){const k=I*r-p;let S=k;for(;S<0;)S+=i;const T=Math.min(t.inHeight,c+k);for(let _=0;_<t.outWidth;++_){const E=_*o-f;let M=E;for(;M<0;)M+=l;const B=Math.min(t.inWidth,h+E);let V=Number.NEGATIVE_INFINITY,j=-1;for(let G=b;G<w;G+=a){const W=G-x;for(let Z=S;Z<T;Z+=i){const K=Z-k;for(let Q=M;Q<B;Q+=l){const te=Q-E,oe=n.get(m,G,Z,Q,g);oe>=V&&(V=oe,j=W*c*h+K*c+te)}}}e.set(j,m,y,I,_,g)}}}return e}(e.bufferSync(o),c),p=c.strideDepth,f=c.strideHeight,m=c.strideWidth,g=c.dilationDepth,y=c.dilationHeight,x=c.dilationWidth,b=c.effectiveFilterDepth,w=c.effectiveFilterHeight,I=c.effectiveFilterWidth,k=b-1-c.padInfo.front,S=I-1-c.padInfo.left,T=w-1-c.padInfo.top,_=We(o.shape,"float32"),E=e.bufferSync(r);for(let M=0;M<c.batchSize;++M)for(let B=0;B<c.inChannels;++B)for(let V=0;V<c.inDepth;++V)for(let j=0;j<c.inHeight;++j)for(let G=0;G<c.inWidth;++G){const W=V-k,Z=j-T,K=G-S;let Q=0;for(let te=0;te<b;te+=g){const oe=(W+te)/p;if(!(oe<0||oe>=c.outDepth||Math.floor(oe)!==oe))for(let le=0;le<w;le+=y){const ie=(Z+le)/f;if(!(ie<0||ie>=c.outHeight||Math.floor(ie)!==ie))for(let ce=0;ce<I;ce+=x){const de=(K+ce)/m;if(de<0||de>=c.outWidth||Math.floor(de)!==de)continue;const $e=b*w*I-1-d.get(M,oe,ie,de,B)===te*w*I+le*I+ce?1:0;0!==$e&&(Q+=E.get(M,oe,ie,de,B)*$e)}}}_.set(Q,M,V,j,G,B)}return e.makeTensorInfo(_.shape,_.dtype,_.values)}},cO={kernelName:dh,backendName:"cpu",kernelFunc:function uO(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;ve([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Jn(i.shape,l,u,1,c,h),p=e.data.get(i.dataId).values,f=We(d.outShape,i.dtype,Qb(p,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,y=d.dilationHeight,x=d.dilationWidth,b=d.effectiveFilterHeight,w=d.effectiveFilterWidth,I=w-1-d.padInfo.left,k=b-1-d.padInfo.top,S=We(i.shape,"float32"),T=e.data.get(r.dataId).values,_=We(r.shape,"float32",T);for(let E=0;E<d.batchSize;++E)for(let M=0;M<d.inChannels;++M)for(let B=0;B<d.inHeight;++B)for(let V=0;V<d.inWidth;++V){const j=B-k,G=V-I;let W=0;for(let Z=0;Z<b;Z+=y){const K=(j+Z)/m;if(!(K<0||K>=d.outHeight||Math.floor(K)!==K))for(let Q=0;Q<w;Q+=x){const te=(G+Q)/g;if(te<0||te>=d.outWidth||Math.floor(te)!==te)continue;const ie=b*w-1-f.get(E,K,te,M)===Z*w+Q?1:0;0!==ie&&(W+=_.get(E,K,te,M)*ie)}}S.set(W,E,B,V,M)}return e.makeTensorInfo(S.shape,S.dtype,S.values)}},dO={kernelName:fh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;ve(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=Jn(s.shape,r,o,[1,1],a),[h,d]=function hO(n,t,e,s,r){const a=nm(n,0,e,Se(t),r,"max"),i=Qb(n,t,e,r,!0,s);return[a.values,i.values]}(u,s.shape,s.dtype,i,c),p=l.write(h,c.outShape,s.dtype),f=l.write(d,c.outShape,s.dtype);return[{dataId:p,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},fO={kernelName:ml,backendName:"cpu",kernelFunc:function pO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=Me(o,r.shape),c=q(nn(r.shape,i)[1]),h=[],d=e.makeTensorInfo([],"float32",new Float32Array([c]));h.push(d);const p=gr({inputs:{x:r},backend:e,attrs:{dtype:"float32"}});h.push(p);const f=om({inputs:{a:p,b:d},backend:e});h.push(f);const m=Ti({inputs:{x:f},backend:e,attrs:{axis:o,keepDims:a}});return h.forEach(g=>e.disposeIntermediateTensorInfo(g)),m}},gO={kernelName:gl,backendName:"cpu",kernelFunc:function mO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ve(r,"min");const i=Me(o,r.shape);let l=i;const u=Dt(l,r.shape.length);let c=r;null!=u&&(c=Hn({inputs:{x:r},backend:e,attrs:{perm:u}}),l=zt(l.length,r.shape.length)),cn("min",l,c.shape.length);const[h,d]=nn(c.shape,l),p=q(d),f=pn(q(h),c.dtype),m=e.data.get(c.dataId).values;for(let y=0;y<f.length;++y){const x=y*p;let b=m[x];for(let w=0;w<p;++w){const I=m[x+w];(Number.isNaN(I)||I<b)&&(b=I)}f[y]=b}null!=u&&e.disposeIntermediateTensorInfo(c);const g=e.makeTensorInfo(h,c.dtype,f);if(a){const x=gt({inputs:{x:g},backend:e,attrs:{shape:At(h,i)}});return e.disposeIntermediateTensorInfo(g),x}return g}},S0=Mt((n,t)=>Math.min(n,t)),yO=rn(va,S0),xO={kernelName:va,backendName:"cpu",kernelFunc:yO},wO={kernelName:yl,backendName:"cpu",kernelFunc:function bO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,mode:a}=s;ve(r,"mirrorPad");const i=o.map((b,w)=>b[0]+r.shape[w]+b[1]),l=o.map(b=>b[0]),u=o.map((b,w)=>b[0]+r.shape[w]),c="reflect"===a?0:1,h=e.data.get(r.dataId).values,d=r.shape.length,p=Se(r.shape),f=q(i),m=i.length,g=Se(i),y=an(r.dtype,f);for(let b=0;b<f;b++){let w=jo(b,m,g);for(let k=0;k<m;k++)w[k]<l[k]?w[k]=2*l[k]-w[k]-c:w[k]>=u[k]&&(w[k]=2*(u[k]-1)-w[k]+c);w=w.map((k,S)=>k-l[S]);const I=ws(w,d,p);y[b]=h[I]}return{dataId:e.write(y,i,r.dtype),shape:i,dtype:r.dtype}}},vO=Mt((n,t)=>{const e=n%t;return n<0&&t<0||n>=0&&t>=0?e:(e+t)%t}),IO=rn(Ia,vO),CO={kernelName:Ia,backendName:"cpu",kernelFunc:IO};function T0(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=r.shape.length;let i=o;if(-1===i&&(i=a-1),i!==a-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);const l=Me([i],r.shape),u=k0({inputs:{x:r},backend:e,attrs:{reductionIndices:l,keepDims:!1}}),c=At(u.shape,l),h=gt({inputs:{x:u},backend:e,attrs:{shape:c}}),d=im({inputs:{a:r,b:h},backend:e}),p=c0({inputs:{x:d},backend:e}),f=Ti({inputs:{x:p},backend:e,attrs:{axis:l,keepDims:!1}}),m=gt({inputs:{x:f},backend:e,attrs:{shape:c}}),g=om({inputs:{a:p,b:m},backend:e});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(m),g}const kO={kernelName:Fl,backendName:"cpu",kernelFunc:T0},SO={kernelName:mh,backendName:"cpu",kernelFunc:function NO(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s;ve(r,"multinomial");const l=i?r:T0({inputs:{logits:r},backend:e,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=e.data.get(l.dataId).values,d=[u,o],p=pn(q(d),"int32");for(let f=0;f<u;++f){const m=f*c,g=new Float32Array(c-1);g[0]=h[m];for(let b=1;b<g.length;++b)g[b]=g[b-1]+h[m+b];const y=Ed.alea(a.toString()),x=f*o;for(let b=0;b<o;++b){const w=y();p[x+b]=g.length;for(let I=0;I<g.length;I++)if(w<g[I]){p[x+b]=I;break}}}return i||e.disposeIntermediateTensorInfo(l),e.makeTensorInfo(d,"int32",p)}};function $0(n,t,e){const s=Zs(-1,e);return rm([],t,s,n,e)}const $O={kernelName:xl,backendName:"cpu",kernelFunc:function TO(n){const{inputs:t,backend:e}=n,{x:s}=t;ve(s,"neg");const r=e.data.get(s.dataId).values,[o,a]=$0(r,s.shape,s.dtype);return e.makeTensorInfo(a,s.dtype,o)}},_O=Wd,AO={kernelName:gh,backendName:"cpu",kernelFunc:function EO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s;ve(r,"NonMaxSuppression");const u=e.data.get(r.dataId).values,c=e.data.get(o.dataId).values,{selectedIndices:h}=_O(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},DO=Ud,FO={kernelName:yh,backendName:"cpu",kernelFunc:function RO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s;ve(r,"NonMaxSuppressionPadded");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,{selectedIndices:d,validOutputs:p}=DO(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},OO=Gd,PO={kernelName:xh,backendName:"cpu",kernelFunc:function LO(n){const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s;ve(r,"NonMaxSuppressionWithScore");const c=e.data.get(r.dataId).values,h=e.data.get(o.dataId).values,d=a,p=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=OO(c,h,d,p,f,m);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},_0=Mt((n,t)=>n!==t?1:0),zO=rn(bl,_0,null,"bool"),MO={kernelName:bl,backendName:"cpu",kernelFunc:zO},VO={kernelName:vl,backendName:"cpu",kernelFunc:function BO(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{depth:o,onValue:a,offValue:i}=s;ve(r,"oneHot");const l=q(r.shape),u=new Float32Array(l*o);u.fill(i);const c=e.data.get(r.dataId).values;for(let h=0;h<l;++h)c[h]>=0&&c[h]<o&&(u[h*o+c[h]]=a);return e.makeTensorInfo([...r.shape,o],"int32",u)}};function cc(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const r=Hr({inputs:{input:s},backend:e}),o=cc({inputs:{x:r},backend:e}),a=_o({inputs:{input:s},backend:e}),i=cc({inputs:{x:a},backend:e}),l=Dn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return um({backend:e,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const WO={kernelName:zl,backendName:"cpu",kernelFunc:cc},UO={kernelName:wl,backendName:"cpu",kernelFunc:function E0(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===s.dtype){const r=Hr({inputs:{input:s},backend:e}),o=E0({inputs:{x:r},backend:e}),a=_o({inputs:{input:s},backend:e}),i=cc({inputs:{x:a},backend:e}),l=Dn({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return um({backend:e,attrs:{shape:s.shape,value:1,dtype:s.dtype}})}};function A0(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return uc({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Xn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=Eo({inputs:t.map(c=>{const h=uc({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}const GO={kernelName:Il,backendName:"cpu",kernelFunc:A0},D0={kernelName:Cl,backendName:"cpu",kernelFunc:function HO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;ve(r,"pad");const i=o.map((x,b)=>x[0]+r.shape[b]+x[1]),l=o.map(x=>x[0]),u=e.data.get(r.dataId).values,c=q(r.shape),h=r.shape.length,d=Se(r.shape),p=q(i),f=i.length,m=Se(i),g=an(r.dtype,p);0!==a&&g.fill(a);for(let x=0;x<c;x++)g[ws(jo(x,h,d).map((k,S)=>k+l[S]),f,m)]=u[x];return{dataId:e.write(g,i,r.dtype),shape:i,dtype:r.dtype}}},jO=Mt((n,t)=>Math.pow(n,t)),KO=rn(ka,jO),qO={kernelName:ka,backendName:"cpu",kernelFunc:KO};function R0(n,t,e,s){const[r,o]=nn(n,s),a=Ln(t,"int32"),i=pn(q(r),a),l=q(o);for(let u=0;u<i.length;++u){const c=u*l;let h=1;for(let d=0;d<l;++d)h*=e[c+d];i[u]=h}return{outVals:i,outShape:r,outDtype:a}}const YO={kernelName:bh,backendName:"cpu",kernelFunc:function XO(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;ve(r,"prod");const i=r.shape.length,l=Me(o,r.shape),u=Dt(l,i);let c=l,h=r;const d=[];null!=u&&(h=Hn({inputs:{x:r},backend:e,attrs:{perm:u}}),d.push(h),c=zt(c.length,i));const p=e.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=R0(h.shape,h.dtype,p,c);let y=m;return a&&(y=At(m,l)),d.forEach(x=>e.disposeIntermediateTensorInfo(x)),e.makeTensorInfo(y,g,f)}};function F0(n,t,e,s){if(n===t||n<t&&e<0||t<n&&e>1)return pn(0,s);const l=pn(Math.abs(Math.ceil((t-n)/e)),s);t<n&&1===e&&(e=-1),l[0]=n;for(let u=1;u<l.length;u++)l[u]=l[u-1]+e;return l}const JO={kernelName:wh,backendName:"cpu",kernelFunc:function ZO(n){const{backend:t,attrs:e}=n,{start:s,stop:r,dtype:o,step:a}=e,i=F0(s,r,a,o);return t.makeTensorInfo([i.length],o,i)}},QO=it(Na,n=>1/n),eL={kernelName:Na,backendName:"cpu",kernelFunc:QO},nL={kernelName:Tl,backendName:"cpu",kernelFunc:function tL(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;ve(r,"resizeBilinear");const l=Se(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=e.data.get(r.dataId).values,g=new Float32Array(q([h,u,c,f])),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c];let b=0;const w=y[0]/x[0],I=y[1]/x[1];for(let k=0;k<h;k++)for(let S=0;S<u;S++){let T;T=a?w*(S+.5)-.5:w*S;const _=Math.max(0,Math.floor(T)),E=T-_,M=Math.min(d-1,Math.ceil(T)),B=k*l[0]+_*l[1],V=k*l[0]+M*l[1];for(let j=0;j<c;j++){let G;G=a?I*(j+.5)-.5:I*j;const W=Math.max(0,Math.floor(G)),Z=G-W,K=Math.min(p-1,Math.ceil(G)),Q=B+W*l[2],te=V+W*l[2],oe=B+K*l[2],le=V+K*l[2];for(let ie=0;ie<f;ie++){const ce=m[Q+ie],de=m[te+ie],$e=ce+(m[oe+ie]-ce)*Z;g[b++]=$e+(de+(m[le+ie]-de)*Z-$e)*E}}}return e.makeTensorInfo([h,u,c,f],"float32",g)}},rL={kernelName:Ch,backendName:"cpu",kernelFunc:function sL(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;ve([o,r],"resizeBilinearGrad");const i=Se(r.shape),[l,u,c,h]=r.shape,[,d,p]=o.shape,f=new Float32Array(l*u*c*h),m=[a&&d>1?u-1:u,a&&p>1?c-1:c],g=[a&&d>1?d-1:d,a&&p>1?p-1:p],y=m[0]/g[0],x=m[1]/g[1],b=e.data.get(o.dataId).values;let w=0;for(let I=0;I<l;I++){const k=I*i[0];for(let S=0;S<d;S++){const T=S*y,_=Math.floor(T),E=Math.min(Math.ceil(T),u-1),M=k+_*i[1],B=k+E*i[1],V=T-_,j=1-V;for(let G=0;G<p;G++){const W=G*x,Z=Math.floor(W),K=Math.min(Math.ceil(W),c-1),Q=W-Z,te=1-Q,oe=M+Z*i[2],le=M+K*i[2],ie=B+Z*i[2],ce=B+K*i[2],de=j*te,me=j*Q,Ie=V*te,$e=V*Q;for(let Ee=0;Ee<h;Ee++){const Fe=b[w++];f[oe+Ee]+=Fe*de,f[le+Ee]+=Fe*me,f[ie+Ee]+=Fe*Ie,f[ce+Ee]+=Fe*$e}}}}return e.makeTensorInfo([l,c,u,h],"float32",f)}},aL={kernelName:Sl,backendName:"cpu",kernelFunc:function oL(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s;ve(r,"resizeNearestNeighbor");const l=Se(r.shape),[u,c]=i,[h,d,p,f]=r.shape,m=e.data.get(r.dataId).values,g=new Float32Array(h*u*c*f),y=[o&&u>1?d-1:d,o&&c>1?p-1:p],x=[o&&u>1?u-1:u,o&&c>1?c-1:c],b=y[0]/x[0],w=y[1]/x[1];let I=0;for(let k=0;k<h;k++){const S=k*l[0];for(let T=0;T<u;T++){const _=a?b*(T+.5):b*T;let E=Math.min(d-1,o?Math.round(_):Math.floor(_));a&&(E=Math.max(0,E));const M=S+E*l[1];for(let B=0;B<c;B++){const V=a?w*(B+.5):w*B;let j=Math.min(p-1,o?Math.round(V):Math.floor(V));a&&(j=Math.max(0,j));const G=M+j*l[2];for(let W=0;W<f;W++)g[I++]=m[G+W]}}}return e.makeTensorInfo([h,u,c,f],r.dtype,g)}},lL={kernelName:Ih,backendName:"cpu",kernelFunc:function iL(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s;ve([o,r],"resizeNearestNeighborGrad");const i=Se(r.shape),l=Se(o.shape),[u,c,h,d]=r.shape,[,p,f]=o.shape,m=new Float32Array(u*c*h*d),g=e.data.get(o.dataId).values,y=[a&&p>1?c-1:c,a&&f>1?h-1:h],x=[a&&p>1?p-1:p,a&&f>1?f-1:f],b=y[0]/x[0],w=y[1]/x[1],I=1/b,k=1/w,S=2*Math.ceil(I)+2,T=2*Math.ceil(k)+2;for(let _=0;_<u;_++){const E=_*i[0];for(let M=0;M<c;M++){const B=E+M*i[1],V=Math.floor(M*I),j=Math.floor(V-S/2);for(let G=0;G<h;G++){const W=B+G*i[2],Z=Math.floor(G*k),K=Math.floor(Z-T/2);for(let Q=0;Q<d;Q++){let te=0;for(let oe=0;oe<S;oe++){const le=oe+j;if(le<0||le>=p)continue;const ie=E+le*l[1],ce=le*b;if(M===Math.min(c-1,a?Math.round(ce):Math.floor(ce)))for(let me=0;me<T;me++){const Ie=me+K;if(Ie<0||Ie>=f)continue;const $e=ie+Ie*l[2],Ee=Ie*w;G===Math.min(h-1,a?Math.round(Ee):Math.floor(Ee))&&(te+=g[$e+Q])}}m[W+Q]=te}}}}return e.makeTensorInfo(r.shape,r.dtype,m)}},cL={kernelName:$l,backendName:"cpu",kernelFunc:function uL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s;ve(r,"reverse");const a=r.shape.length,i=Me(o,r.shape);if(0===a)return As({inputs:{x:r},backend:e});const l=new en(r.shape,r.dtype),u=e.bufferSync(r);for(let c=0;c<l.size;c++){const h=l.indexToLoc(c),d=h.slice();i.forEach(p=>d[p]=r.shape[p]-1-d[p]),l.set(u.get(...d),...h)}return e.makeTensorInfo(l.shape,l.dtype,l.values)}},hL={kernelName:Mh,backendName:"cpu",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=an(s.dtype,q(s.shape)),[u,c,h,d]=s.shape,[p,f]=lp(a,c,h),g=Math.sin(r),y=Math.cos(r),x=i.data.get(s.dataId).values;for(let w=0;w<u;w++){const I=w*h*c*d;for(let k=0;k<c;k++){const S=k*(h*d);for(let T=0;T<h;T++){const _=T*d;for(let E=0;E<d;E++){const M=[u,k,T,E],B=M[2],V=M[1];let j=(B-p)*y-(V-f)*g,G=(B-p)*g+(V-f)*y;j=Math.round(j+p),G=Math.round(G+f);let W=o;"number"!=typeof o&&(W=3===E?255:o[E]),j>=0&&j<h&&G>=0&&G<c&&(W=x[I+G*(h*d)+j*d+E]),l[I+S+_+E]=W}}}}return{dataId:i.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},dL=it($a,n=>{const t=Math.floor(n);return n-t<.5?Math.floor(n):n-t>.5?Math.ceil(n):t%2==0?t:t+1}),pL={kernelName:$a,backendName:"cpu",kernelFunc:dL},O0=mr(n=>1/Math.sqrt(n)),fL=$o(_a,O0),mL={kernelName:_a,backendName:"cpu",kernelFunc:fL};function L0(n,t,e,s,r,o,a,i,l,u){const c=[s/r,r],h=n.values,d=t.values;if(0===s)return We(e,t.dtype);const p=We(c,t.dtype);p.values.fill(l);for(let f=0;f<o;f++){const m=[];let g=0;for(let y=0;y<a;y++){const x=h[f*a+y];m.push(x),g+=x*i[y]}if(g<0||g>=s/r)throw new Error(`Invalid indices: ${m} does not index into ${e}`);for(let y=0;y<r;y++)u?p.values[g*r+y]+=d[f*r+y]:p.values[g*r+y]=0===t.rank?d[0]:d[f*r+y]}return p}const yL={kernelName:kh,backendName:"cpu",kernelFunc:function gL(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ci(0,r,a),m=L0(e.bufferSync(r),e.bufferSync(o),a,h,u,l,i,c,0,!0);return e.makeTensorInfo(a,m.dtype,m.values)}},bL={kernelName:_l,backendName:"cpu",kernelFunc:function xL(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t;ve([s,r,o],"select");const a=s.shape.length,i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=Ln(r.dtype,o.dtype),h=pn(q(r.shape),c);let d=0;const p=0===a||a>1||1===r.shape.length?1:q(r.shape.slice(1));for(let f=0;f<i.length;f++)for(let m=0;m<p;m++)h[d++]=1===i[f]?l[f]:u[f];return e.makeTensorInfo(r.shape,c,h)}},wL=Su,vL=Tu,IL=it(Ea,n=>n>=0?vL*n:wL*(Math.exp(n)-1)),CL={kernelName:Ea,backendName:"cpu",kernelFunc:IL},kL=it(Ra,n=>n<0?-1:n>0?1:0),NL={kernelName:Ra,backendName:"cpu",kernelFunc:kL},SL=it(Aa,n=>Math.sin(n)),TL={kernelName:Aa,backendName:"cpu",kernelFunc:SL},$L=it(Da,n=>Math.sinh(n)),_L={kernelName:Da,backendName:"cpu",kernelFunc:$L},P0=Math.log(1.1920928955078125e-7)+2,EL=it(Oa,n=>{const t=n>-P0,e=n<P0,s=Math.exp(n);let r;return r=e?s:t?n:Math.log(1+s),r}),AL={kernelName:Oa,backendName:"cpu",kernelFunc:EL},RL={kernelName:Dl,backendName:"cpu",kernelFunc:function DL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;ve([r],"spaceToBatchND");const i=q(o),l=[[0,0]];l.push(...a);for(let k=1+o.length;k<r.shape.length;++k)l.push([0,0]);const u=D0.kernelFunc({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),c=ii(u.shape,o,i,!1),h=li(c.length,o.length,!1),d=ui(u.shape,o,i,!1),m=gt({inputs:{x:u},backend:e,attrs:{shape:c}}),x=Hn({inputs:{x:m},backend:e,attrs:{perm:h}}),I=gt({inputs:{x},backend:e,attrs:{shape:d}});return e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(x),I}};function z0(n,t,e,s,r,o,a){const i=t[0],l=o[0],u=new Array(l),c=new Array(i),h=t[1];if(0===l){if(0!==i)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${i}`);return[In(e,0),[0,h],In(r,0),u,c]}let d=!0,p=0;const f=new Array(l).fill(0);for(let g=0;g<i;++g){const y=n[g*h];if(y<0)throw new Error(`indices(${g}, 0) is invalid: ${y} < 0`);if(y>=l)throw new Error(`indices(${g}, 0) is invalid: ${y} >= ${l}`);++f[y],d=d&&y>=p,p=y}let m=!0;for(let g=0;g<l;++g){const y=0===f[g];u[g]=y,m=m&&!y,f[g]=Math.max(f[g],1),g>0&&(f[g]+=f[g-1])}if(m&&d){const g=n,y=s;for(let x=0;x<i;++x)c[x]=x;return[g,[i,h],y,u,c]}{const g=f[l-1],y=In(e,g*h),x=In(r,g),b=new Array(l).fill(0);for(let w=0;w<i;++w){const I=n[w*h],S=(0===I?0:f[I-1])+b[I];b[I]++;for(let T=0;T<h;++T)y[S*h+T]=n[w*h+T];x[S]=s[w],c[w]=S}for(let w=0;w<l;++w)if(0===b[w]){const k=0===w?0:f[w-1];y[k*h+0]=w;for(let S=1;S<h;++S)y[k*h+S]=0;x[k]=a}return[y,[g,h],x,u,c]}}const OL={kernelName:Nh,backendName:"cpu",kernelFunc:function FL(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n        ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.data.get(s.dataId).values,l=e.data.get(r.dataId).values,u=e.data.get(o.dataId).values,c=e.data.get(a.dataId).values[0],[h,d,p,f,m]=z0(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),e.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function M0(n,t,e,s,r){const o=q(s),a=t[0],i=r.length,l=[];let u=1,c=-1;for(let g=0;g<i;++g){const y=r[g];if(-1===y){if(-1!==c)throw new Error(`only one output dimension may be -1, not both ${c} and ${g}`);c=g,l.push(1)}else{if(y<0)throw new Error(`size ${g} must be non-negative, not ${y}`);u*=y,l.push(y)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const g=Math.trunc(o/u);if(u*g!==o)throw new Error(`Input to reshape is a SparseTensor with ${o}\n          dense values, but the requested shape requires a multiple of ${u}. inputShape=${s} outputShape= ${l}`);l[c]=g}const h=q(l);if(h!==o)throw new Error(`Input to reshape is a tensor with ${o} dense values, but the requested shape has ${h}. inputShape=${s} outputShape=${l}`);const d=s.length,p=[];if(d>0){p[d-1]=1;for(let g=d-2;g>=0;--g)p[g]=p[g+1]*s[g+1]}const f=[];if(i>0){f[i-1]=1;for(let g=i-2;g>=0;--g)f[g]=f[g+1]*l[g+1]}const m=In(e,a*i);for(let g=0;g<a;++g){let y=0;for(let x=0;x<d;++x)y+=n[g*d+x]*p[x];for(let x=0;x<i;++x)m[g*i+x]=Math.trunc(y/f[x]),y%=f[x]}return[m,[a,i],l]}const PL={kernelName:Sh,backendName:"cpu",kernelFunc:function LL(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.data.get(r.dataId).values),i=e.data.get(s.dataId).values,l=Array.from(e.data.get(o.dataId).values),[u,c,h]=M0(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}};function cm(n,t,e,s,r,o=!1,a=0){const i=s.length;if(i!==r.length)throw new Error("segmentIds and indices should have same size.");const l=[t[0],n.length/t[0]],u=l[1],h=i>0?r[i-1]+1:0;if(h<0)throw new Error("segment ids must be >= 0");const d=t.slice();d[0]=h;const f=In(e,d.reduce((b,w)=>b*w,1));if(0===i)return h>0&&f.fill(a),[f,d];if(h<=0)throw new Error("segment ids must be >= 0");let m=0,g=1,y=0,x=r[m];for(;;){let b=0;if(g<i){if(b=r[g],x===b){++g;continue}if(x>=b)throw new Error("segment ids are not increasing")}if(x<0||x>=h)throw new Error(`Segment id ${x} out of range [0, ${h}), possibly because segmentIds input is not sorted.`);x>y&&f.fill(a,y*u,x*u);for(let w=m;w<g;++w){const I=s[w];if(I<0||I>=l[0])throw new Error(`Bad: indices[${w}] == ${s[w]} out of range [0, ${l[0]})`);for(let k=0;k<u;k++)f[x*u+k]+=n[I*u+k]}if(o)for(let w=0;w<u;w++)f[x*u+w]/=g-m;if(m=g,++g,y=x+1,x=b,g>i)break}return y<h&&f.fill(a,y*u,h*u),[f,d]}const ML={kernelName:Th,backendName:"cpu",kernelFunc:function zL(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${o.shape}`);const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=cm(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},VL={kernelName:$h,backendName:"cpu",kernelFunc:function BL(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${o.shape}`);const a=e.data.get(s.dataId).values,i=e.data.get(r.dataId).values,l=e.data.get(o.dataId).values,[u,c]=cm(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},UL={kernelName:_h,backendName:"cpu",kernelFunc:function WL(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:d}=ci(0,r,i),y=L0(e.bufferSync(r),e.bufferSync(o),i,d,c,u,l,h,e.data.get(a.dataId).values[0],!1);return e.makeTensorInfo(i,y.dtype,y.values)}},HL={kernelName:Rl,backendName:"cpu",kernelFunc:function GL(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Me(a,r.shape)[0],l=Np(r,o,i),u=new Array(r.shape.length).fill(0),c=r.shape.slice();return l.map(h=>{const d=[...c];d[i]=h;const p=jr({inputs:{x:r},backend:e,attrs:{begin:u,size:d}});return u[i]+=h,p})}},jL=mr(n=>Math.sqrt(n)),KL=it(La,n=>Math.sqrt(n)),qL={kernelName:La,backendName:"cpu",kernelFunc:KL},XL={kernelName:Eh,backendName:"cpu",kernelFunc:({inputs:n,backend:t})=>{const{x:e}=n,s=t;ve(e,"square");const r=s.data.get(e.dataId).values,o=new Float32Array(r.length);for(let i=0;i<r.length;++i){const l=r[i];o[i]=l*l}return{dataId:s.write(o,e.shape,e.dtype),shape:e.shape,dtype:e.dtype}}},B0=Mt((n,t)=>{const e=n-t;return e*e}),YL=rn(Pa,B0),ZL={kernelName:Pa,backendName:"cpu",kernelFunc:YL},JL=it(Wa,(n,t)=>{const e=t;return isNaN(n)?NaN:n>0?1:e.alpha}),QL={kernelName:Wa,backendName:"cpu",kernelFunc:JL};function V0(n,t,e,s){const r=We(n,t.dtype);for(let o=0;o<r.size;o++){const a=r.indexToLoc(o),i=new Array(a.length);for(let l=0;l<i.length;l++)i[l]=a[l]*e[l]+s[l];r.set(t.get(...i),...a)}return r}const tP={kernelName:Ah,backendName:"cpu",kernelFunc:function eP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s;ve(r,"stridedSlice");const{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=yd(r.shape,o,a,i,l,u,c,h,d),b=gt({inputs:{x:r},backend:e,attrs:{shape:y}});let w;if(p){const k=jr({inputs:{x:b},backend:e,attrs:{begin:f,size:g}});w=gt({inputs:{x:k},backend:e,attrs:{shape:x}}),e.disposeIntermediateTensorInfo(k)}else if(x.some(k=>0===k))w=e.makeTensorInfo(x,r.dtype,[]);else{const S=V0(x,e.bufferSync(b),m,f);w=e.makeTensorInfo(S.shape,S.dtype,S.values)}const I=gt({inputs:{x:w},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w),I}};class nP{constructor(t,e,s,r,o,a){this.separator=Js(t),this.nGramWidths=e,this.leftPad=Js(s),this.rightPad=Js(r),this.padWidth=o,this.preserveShort=a}getPadWidth(t){return Math.min(this.padWidth<0?t-1:this.padWidth,t-1)}getNumNGrams(t,e){const s=this.getPadWidth(e);return Math.max(0,t+2*s-e+1)}createNGrams(t,e,s,r,o,a){for(let i=0;i<o;++i){const l=this.getPadWidth(a),u=Math.max(0,l-i),c=Math.max(0,l-(o-(i+1))),h=a-(u+c),d=e+(u>0?0:i-l);let p=0;p+=u*this.leftPad.length;for(let x=0;x<h;++x)p+=t[d+x].length;p+=c*this.rightPad.length,p+=(u+c+h-1)*this.separator.length,s[r+i]=new Uint8Array(p);const m=s[r+i];let g=0;const y=x=>x.forEach(b=>m[g++]=b);for(let x=0;x<u;++x)y(this.leftPad),y(this.separator);for(let x=0;x<h-1;++x)y(t[d+x]),y(this.separator);if(h>0){y(t[d+h-1]);for(let x=0;x<c;++x)y(this.separator),y(this.rightPad)}else{for(let x=0;x<c-1;++x)y(this.rightPad),y(this.separator);y(this.rightPad)}}}compute(t,e){const s=t.length,r=e.length;if(r>0){let l=e[0];if(0!==l)throw new Error(`First split value must be 0, got ${l}`);for(let u=1;u<r;++u){let c=e[u]>=l;if(c=c&&e[u]<=s,!c)throw new Error(`Invalid split value ${e[u]}, must be in [${l}, ${s}]`);l=e[u]}if(l!==s)throw new Error(`Last split value must be data size. Expected ${s}, got ${l}`)}const o=r-1,a=In("int32",r);if(0===s||0===r){const l=new Array(s);for(let u=0;u<=o;++u)a[u]=0;return[l,a]}a[0]=0;for(let l=1;l<=o;++l){const u=e[l]-e[l-1];let c=0;this.nGramWidths.forEach(h=>{c+=this.getNumNGrams(u,h)}),this.preserveShort&&u>0&&0===c&&(c=1),a[l]=a[l-1]+c}const i=new Array(a[o]);for(let l=0;l<o;++l){const u=e[l];let c=a[l];if(this.nGramWidths.forEach(h=>{const p=this.getNumNGrams(e[l+1]-e[l],h);this.createNGrams(t,u,i,c,p,h),c+=p}),this.preserveShort&&c===a[l]){const h=e[l+1]-e[l];if(0===h)continue;this.createNGrams(t,u,i,c,1,h+2*this.padWidth)}}return[i,a]}}function W0(n,t,e,s,r,o,a,i){return new nP(e,s,r,o,a,i).compute(n,t)}const rP={kernelName:Dh,backendName:"cpu",kernelFunc:function sP(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.data.get(c.dataId).values,p=e.data.get(h.dataId).values,[f,m]=W0(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",m)]}};function oP(n,t,e,s){if(!n.length)return;if(0===t.length){for(let o=0;o<n.length;++o)s.push(n.subarray(o,o+1));return}if(1===t.length){const o=t[0];let a=n.indexOf(o);for(;-1!==a;){const i=n.subarray(0,a);(!e||0!==i.length)&&s.push(i),a=(n=n.subarray(a+1)).indexOf(o)}return void((!e||0!==n.length)&&s.push(n))}let r=0;for(let o=0;o<n.length+1;o++)if(o===n.length||-1!==t.indexOf(n[o])){const a=n.subarray(r,o);(!e||0!==a.length)&&s.push(a),r=o+1}}function U0(n,t,e){const s=n.length,r=[];let o=0,a=0;const i=new Array(s);for(let d=0;d<s;++d){const p=r.length;oP(n[d],t,e,r);const f=r.length-p;i[d]=f,o+=f,a=Math.max(a,f)}const l=In("int32",2*o),u=new Array(o),c=[s,a];let h=0;for(let d=0;d<s;++d)for(let p=0;p<i[d];++p)l[2*h]=d,l[2*h+1]=p,u[h]=r[h],++h;return[l,u,c]}const iP={kernelName:Rh,backendName:"cpu",kernelFunc:function aP(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.data.get(o.dataId).values,l=e.data.get(a.dataId).values[0],[u,c,h]=U0(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}};function G0(n,t){const e=In("int32",n.length);for(let s=0;s<n.length;++s)e[s]=Lv(n[s]).modulo(t).getLowBitsUnsigned();return e}const uP={kernelName:Fh,backendName:"cpu",kernelFunc:function lP(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const i=G0(e.data.get(o.dataId).values,r);return e.makeTensorInfo(o.shape,"int32",i)}},cP=it(Ma,n=>Math.tan(n)),hP={kernelName:Ma,backendName:"cpu",kernelFunc:cP},dP=it(Ba,n=>Math.tanh(n));function H0(n,t){const e=new Array(n.rank);for(let r=0;r<e.length;r++)e[r]=n.shape[r]*t[r];const s=We(e,n.dtype);for(let r=0;r<s.values.length;++r){const o=s.indexToLoc(r),a=new Array(n.rank);for(let l=0;l<a.length;l++)a[l]=o[l]%n.shape[l];const i=n.locToIndex(a);s.values[r]=n.values[i]}return s}const $i=(n,t)=>{const e=t.value-n.value;return 0===e?n.index-t.index:e};function j0(n,t,e=0,s=n.length-1){for(;s>e;){if(s-e>600){const i=s-e+1,l=t-e+1,u=Math.log(i),c=.5*Math.exp(2*u/3),h=.5*Math.sqrt(u*c*(i-c)/i)*Math.sign(l-i/2);j0(n,t,Math.max(e,Math.floor(t-l*c/i+h)),Math.min(s,Math.floor(t+(i-l)*c/i+h)))}const r=n[t];let o=e,a=s;for(Et(n,e,t),$i(n[s],r)>0&&Et(n,e,s);o<a;){for(Et(n,o,a),o++,a--;$i(n[o],r)<0;)o+=1;for(;$i(n[a],r)>0;)a-=1}0===$i(n[e],r)?Et(n,e,a):(a+=1,Et(n,a,s)),a<=t&&(e=a+1),t<=a&&(s=a-1)}}function K0(n,t,e,s,r){const o=t[t.length-1],[a,i]=[n.length/o,o],l=an(e,a*s),u=an("int32",a*s);for(let h=0;h<a;h++){const d=h*i,p=n.subarray(d,d+i);let f=new Array(p.length);p.forEach((x,b)=>f[b]={value:x,index:b}),s<f.length&&(j0(f,s),f=f.slice(0,s)),r&&f.sort($i);const m=h*s,g=l.subarray(m,m+s),y=u.subarray(m,m+s);for(let x=0;x<s;x++)g[x]=f[x].value,y[x]=f[x].index}const c=t.slice();return c[c.length-1]=s,[We(c,e,l),We(c,"int32",u)]}function q0(n,t,e){switch(e){case"reflect":return function wP(n,t){let e=n;if(e<0)if(t<=1)e=0;else{const s=2*t;e<s&&(e=s*Math.trunc(-e/s)+e),e=e<-t?e+s:-e-1}else if(e>t-1)if(t<=1)e=0;else{const s=2*t;e-=s*Math.trunc(e/s),e>=t&&(e=s-e-1)}return Vt(0,e,t-1)}(n,t);case"wrap":return function vP(n,t){let e=n;return e<0?t<=1?e=0:e+=t*(Math.trunc(-e/(t-1))+1):e>t-1&&(t<=1?e=0:e-=t*Math.trunc(e/(t-1))),Vt(0,e,t-1)}(n,t);case"nearest":return function CP(n,t){return Vt(0,n,t-1)}(n,t);default:return function IP(n,t){return n}(n)}}function _i(n,t,e,s,r,o,a,i,l,u,c){return 0<=i&&i<t&&0<=l&&l<e?n[a*s+i*r+l*o+u]:c}function kP(n,t,e,s,r,o,a,i,l,u,c){return _i(n,t,e,s,r,o,a,Math.round(i),Math.round(l),u,c)}function NP(n,t,e,s,r,o,a,i,l,u,c){const h=Math.floor(i),d=Math.floor(l),p=h+1,f=d+1;return(p-i)*((f-l)*_i(n,t,e,s,r,o,a,h,d,u,c)+(l-d)*_i(n,t,e,s,r,o,a,h,f,u,c))+(i-h)*((f-l)*_i(n,t,e,s,r,o,a,p,d,u,c)+(l-d)*_i(n,t,e,s,r,o,a,p,f,u,c))}function X0(n,t,e,s){const r=Me(t,e)[0],o=[1,e[0],1];for(let f=0;f<r;f++)o[0]*=e[f];o[1]=e[r];for(let f=r+1;f<e.length;f++)o[2]*=e[f];const a={},i=new Int32Array(e[r]),l=new en(o,s,n),u=[],c=1===o[0]&&1===o[2];for(let f=0;f<e[r];f++){let m;if(c)m=n[f].toString();else{const g=[];for(let y=0;y<o[0];y++)for(let x=0;x<o[2];x++)g.push(l.get(y,f,x));m=g.join(",")}if(void 0!==a[m])i[f]=a[m];else{const g=Object.keys(a).length;a[m]=g,i[f]=g,u.push(f)}}const h=o.slice();h[1]=Object.keys(a).length;const d=new en(h,s);u.forEach((f,m)=>{for(let g=0;g<o[0];g++)for(let y=0;y<o[2];y++)d.set(l.get(g,f,y),g,m,y)});const p=e.slice();return p[r]=h[1],{outputValues:d.values,outputShape:p,indices:i}}const DP=[JA,QA,tD,sD,qA,oD,lD,cD,dD,fD,gD,xD,wD,CD,ND,$D,ED,DD,FD,YA,LD,MD,VD,UD,jA,HD,KD,GA,qD,YD,QD,tR,ZD,oR,iR,sR,uR,hR,pR,mR,yR,bR,wR,IR,kR,SR,TR,_R,$R,am,FR,OA,LR,PR,HR,jR,KR,XR,sF,rF,aF,lF,hF,pF,mF,yF,bF,vF,CF,LA,NF,XD,TF,_F,AF,PA,RF,OF,PF,MF,VF,GF,jF,XF,ZF,QF,nO,rO,aO,lO,cO,dO,eO,fO,gO,xO,wO,CO,SO,AR,$O,AO,FO,PO,MO,VO,UO,GO,D0,qO,MA,YO,JO,HA,eL,BA,VA,XA,nL,rL,aL,lL,cL,hL,pL,mL,yL,bL,CL,UA,NL,TL,_L,PD,kO,AL,RL,OL,PL,ML,VL,UL,HL,qL,XL,ZL,QL,tP,rP,iP,uP,JR,DR,hP,{kernelName:Ba,backendName:"cpu",kernelFunc:dP},{kernelName:Va,backendName:"cpu",kernelFunc:function fP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;ve(r,"tile");const a=H0(e.bufferSync(r),o);return e.makeTensorInfo(a.shape,a.dtype,a.values)}},{kernelName:Oh,backendName:"cpu",kernelFunc:function gP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s;ve(r,"topk");const i=e.data.get(r.dataId).values,[l,u]=K0(i,r.shape,r.dtype,o,a);return[e.makeTensorInfo(l.shape,l.dtype,l.values),e.makeTensorInfo(u.shape,u.dtype,u.values)]}},aD,{kernelName:Lh,backendName:"cpu",kernelFunc:function xP(n){const{inputs:t,attrs:e,backend:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=e,[c,h,d,p]=r.shape,[f,m]=u??[h,d],g=[c,f,m,p],y=Se(r.shape),x=y[0],b=y[1],w=y[2],I=an(r.dtype,q(g));I.fill(l);const k=s.data.get(r.dataId).values,S=s.data.get(o.dataId).values;for(let _=0;_<c;++_){const E=1===o.shape[0]?S:S.subarray(8*_,8*_+8);for(let M=0;M<f;++M)for(let B=0;B<m;++B)for(let V=0;V<p;++V){let j;const G=E[6]*B+E[7]*M+1;if(0===G)continue;const Z=(E[3]*B+E[4]*M+E[5])/G,K=q0((E[0]*B+E[1]*M+E[2])/G,d,i),Q=q0(Z,h,i);switch(a){case"nearest":j=kP(k,h,d,x,b,w,_,Q,K,V,l);break;case"bilinear":j=NP(k,h,d,x,b,w,_,Q,K,V,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`)}I[_*x+M*b+B*w+V]=j}return s.makeTensorInfo(g,r.dtype,I)}return{dataId:s.write(I,g,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:Ph,backendName:"cpu",kernelFunc:function SP(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;ve(o,"unique");const a=s.data.get(o.dataId).values,{outputValues:i,outputShape:l,indices:u}=X0(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:Ll,backendName:"cpu",kernelFunc:function $P(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r.shape.length,i=r.shape[o],l=new Array(a-1);let u=0;for(let p=0;p<a;p++)p!==o&&(l[u++]=r.shape[p]);const c=new Array(a).fill(0),h=r.shape.slice();h[o]=1;const d=new Array(i);for(let p=0;p<d.length;p++){c[o]=p;const f=jr({inputs:{x:r},backend:e,attrs:{begin:c,size:h}});d[p]=gt({inputs:{x:f},backend:e,attrs:{shape:l}}),e.disposeIntermediateTensorInfo(f)}return d}},{kernelName:Pl,backendName:"cpu",kernelFunc:function EP(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s;ve(r,"unsortedSegmentSum");const u=[],c=[],h=r.shape.length-o.shape.length;let d=o;for(let f=0;f<h;++f){const m=uc({inputs:{input:d},backend:e,attrs:{dim:f+1}});d=m,c.push(m)}for(let f=0;f<a;++f){const m=Zs(f,"int32"),g=e.makeTensorInfo([],"int32",m),y=l0({inputs:{a:g,b:d},backend:e}),x=gr({inputs:{x:y},backend:e,attrs:{dtype:"float32"}}),b=lc({inputs:{a:x,b:r},backend:e}),w=Ti({inputs:{x:b},backend:e,attrs:{axis:0,keepDims:!1}});u.push(w),c.push(g),c.push(y),c.push(x),c.push(b),c.push(w)}const p=A0({inputs:u,backend:e,attrs:{axis:0}});return c.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},WO];for(const n of DP)Wh(n);const yr={},hm={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Ds(n){if(!(n in yr)){const e=function OP(n){if(1!==n&&2!==n)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const t=function FP(n){if(typeof OffscreenCanvas<"u"&&2===n)return new OffscreenCanvas(300,150);if(typeof document<"u")return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(n);return t.addEventListener("webglcontextlost",e=>{e.preventDefault(),delete yr[n]},!1),1===n?t.getContext("webgl",hm)||t.getContext("experimental-webgl",hm):t.getContext("webgl2",hm)}(n);if(null===e)return console.log("Could not get context for WebGL version",n),null;yr[n]=e}const t=yr[n];return t.isContextLost()?(delete yr[n],Ds(n)):(t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),t.disable(t.BLEND),t.disable(t.DITHER),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SAMPLE_COVERAGE),t.enable(t.SCISSOR_TEST),t.enable(t.CULL_FACE),t.cullFace(t.BACK),yr[n])}var Ao=(()=>{return(n=Ao||(Ao={}))[n.DENSE=0]="DENSE",n[n.SHARED_BATCH=1]="SHARED_BATCH",Ao;var n})(),Rn=(()=>{return(n=Rn||(Rn={}))[n.RENDER=0]="RENDER",n[n.UPLOAD=1]="UPLOAD",n[n.PIXELS=2]="PIXELS",n[n.DOWNLOAD=3]="DOWNLOAD",Rn;var n})(),on=(()=>{return(n=on||(on={}))[n.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",n[n.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",n[n.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",n[n.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",n[n.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16",on;var n})();function Ei(n,t){return[t,n]}function hc(n){const t=q(n);return Rc(Math.ceil(t/4))}function Do(n,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(n/2))]}function dm(n,t){const e=n;let s,r,o,a,i,l,u,c,h,d;return 2===X().getNumber("WEBGL_VERSION")?(s=e.R32F,r=e.R16F,o=e.RGBA16F,a=e.RGBA32F,i=e.RED,u=4,c=1,h=e.HALF_FLOAT,d=e.FLOAT):(s=n.RGBA,r=n.RGBA,o=n.RGBA,a=e.RGBA,i=n.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,d=n.FLOAT),l=n.RGBA,{internalFormatFloat:s,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:a,textureFormatFloat:i,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:d}}function xe(n,t){const e=t();return X().getBool("DEBUG")&&function zP(n){const t=n.getError();if(t!==n.NO_ERROR)throw new Error("WebGL Error: "+function WP(n,t){switch(t){case n.NO_ERROR:return"NO_ERROR";case n.INVALID_ENUM:return"INVALID_ENUM";case n.INVALID_VALUE:return"INVALID_VALUE";case n.INVALID_OPERATION:return"INVALID_OPERATION";case n.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case n.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case n.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(n,t))}(n),e}const MP=5.96e-8,BP=65504;function VP(n){return!!(X().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===n||MP<Math.abs(n)&&Math.abs(n)<BP)}function dc(n,t){return js(n,()=>n.getExtension(t),'Extension "'+t+'" not supported on this browser.')}const HP=/ERROR: [0-9]+:([0-9]+):/g;function pm(n,t){if(xe(n,()=>n.validateProgram(t)),!1===n.getProgramParameter(t,n.VALIDATE_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function Y0(n,t,e,s,r,o,a){const i=n.getAttribLocation(t,e);return-1!==i&&(xe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,s)),xe(n,()=>n.vertexAttribPointer(i,r,n.FLOAT,!1,o,a)),xe(n,()=>n.enableVertexAttribArray(i)),!0)}function s3(n,t,e,s){xe(n,()=>function e3(n,t,e){(function J0(n,t){const e=n.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+n.TEXTURE0;if(s<n.TEXTURE0||s>e)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${e}].`)})(n,e),xe(n,()=>n.activeTexture(n.TEXTURE0+e)),xe(n,()=>n.bindTexture(n.TEXTURE_2D,t))}(n,t,s)),xe(n,()=>n.uniform1i(e,s))}function fm(n,t,e){xe(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,e)),xe(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,t,0))}function Z0(n,t){xe(n,()=>n.bindFramebuffer(n.FRAMEBUFFER,t)),xe(n,()=>n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,null,0))}function pc(n){const t=n.checkFramebufferStatus(n.FRAMEBUFFER);if(t!==n.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function r3(n,t){switch(t){case n.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case n.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case n.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(n,t))}function js(n,t,e){const s=xe(n,()=>t());if(null==s)throw new Error(e);return s}function Ro(n,t=2){return q(n.slice(0,n.length-t))}function Fo(n){if(0===n.length)throw Error("Cannot get rows and columns of an empty shape array.");return[n.length>1?n[n.length-2]:1,n[n.length-1]]}function mm(n){let t=[1,1,1];return 0===n.length||1===n.length&&1===n[0]||(t=[Ro(n),...Fo(n)]),t}function fc(n){return n%2==0}function mc(n,t){if(je(n=n.slice(-2),t=t.slice(-2))||!n.length||!t.length||0===n[0]||0===n[1]||0===t[0]||0===t[1])return!0;if(n.length!==t.length){const e=n.slice(-1)[0],s=t.slice(-1)[0];if(e===s||fc(e)&&fc(s)&&(1===n[0]||1===t[0]))return!0}return n[1]===t[1]&&fc(n[0])&&fc(t[0])}let gc,yc;function is(n,t){return null!=n.getExtension(t)}function Q0(n){try{if(null!=Ds(n))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function gm(n){const t=dm(n),e=n.createTexture();n.bindTexture(n.TEXTURE_2D,e),n.texImage2D(n.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const o=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,o),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,e,0);const a=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(e),n.deleteFramebuffer(o),a}function Ai(n,t){Array.isArray(n)||(n=[n]),n.forEach(e=>{null!=e&&C("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the WebGL backend.`)})}const Te=X();function bn(){let n,t,e,s,r,o,a,i,l,u;return 2===X().getNumber("WEBGL_VERSION")?(n="#version 300 es",t="in",e="out",s="in",r="texture",o="outputColor",a="out vec4 outputColor;",i="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(n="",t="attribute",e="varying",s="varying",r="texture2D",o="gl_FragColor",a="",i="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:n,attribute:t,varyingVs:e,varyingFs:s,texture2D:r,output:o,defineOutput:a,defineSpecialNaN:i,defineSpecialInf:l,defineRound:u}}function Kr(n,t,e="index"){const s=Se(t);return s.map((r,o)=>`int ${n[o]} = ${e} / ${r}; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * ${r}`:`index -= ${n[o]} * ${r}`};`).join("")}function xc(n,t,e="index"){const s=Se(t);return s.map((r,o)=>`int ${n[o]} = ${e} / outShapeStrides[${o}]; ${o===s.length-1?`int ${n[o+1]} = ${e} - ${n[o]} * outShapeStrides[${o}]`:`index -= ${n[o]} * outShapeStrides[${o}]`};`).join("")}function ym(n){const t=Se(n).map(e=>e.toString());return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}Te.registerFlag("HAS_WEBGL",()=>Te.getNumber("WEBGL_VERSION")>0),Te.registerFlag("WEBGL_VERSION",()=>Q0(2)?2:Q0(1)?1:0),Te.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",()=>!1),Te.registerFlag("WEBGL_BUFFER_SUPPORTED",()=>2===Te.get("WEBGL_VERSION")),Te.registerFlag("WEBGL_CPU_FORWARD",()=>!0),Te.registerFlag("WEBGL_FORCE_F16_TEXTURES",()=>!1),Te.registerFlag("WEBGL_PACK",()=>Te.getBool("HAS_WEBGL")),Te.registerFlag("WEBGL_PACK_NORMALIZATION",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_CLIP",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_DEPTHWISECONV",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_PACK_REDUCE",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_LAZILY_UNPACK",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_CONV_IM2COL",()=>Te.getBool("WEBGL_PACK")),Te.registerFlag("WEBGL_MAX_TEXTURE_SIZE",()=>function a3(n){if(null==gc){const t=Ds(n);gc=t.getParameter(t.MAX_TEXTURE_SIZE)}return gc}(Te.getNumber("WEBGL_VERSION"))),Te.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",()=>function i3(n){if(null==yc){const t=Ds(n);yc=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,yc)}(Te.getNumber("WEBGL_VERSION"))),Te.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",()=>{const n=Te.getNumber("WEBGL_VERSION");return 0===n?0:function l3(n){if(0===n)return 0;let t;const e=Ds(n);return t=is(e,"EXT_disjoint_timer_query_webgl2")&&2===n?2:is(e,"EXT_disjoint_timer_query")?1:0,t}(n)}),Te.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",()=>Te.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Jm()),Te.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",()=>function u3(n){if(0===n)return!1;const t=Ds(n);if(1===n){if(!is(t,"OES_texture_float"))return!1}else if(!is(t,"EXT_color_buffer_float"))return!1;return gm(t)}(Te.getNumber("WEBGL_VERSION"))),Te.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",()=>!Te.getBool("WEBGL_FORCE_F16_TEXTURES")&&Te.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")),Te.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",()=>function c3(n){if(0===n)return!1;const t=Ds(n);if(1!==n){if(is(t,"EXT_color_buffer_float"))return gm(t);const s="EXT_color_buffer_half_float";if(is(t,s)){const r=t.getExtension(s);return function h3(n,t){const e=dm(n,t),s=n.createTexture();n.bindTexture(n.TEXTURE_2D,s),n.texImage2D(n.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);const a=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,a),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);const i=n.checkFramebufferStatus(n.FRAMEBUFFER)===n.FRAMEBUFFER_COMPLETE;return n.bindTexture(n.TEXTURE_2D,null),n.bindFramebuffer(n.FRAMEBUFFER,null),n.deleteTexture(s),n.deleteFramebuffer(a),i}(t,r)}return!1}return!(!is(t,"OES_texture_float")||!is(t,"WEBGL_color_buffer_float"))&&gm(t)}(Te.getNumber("WEBGL_VERSION"))),Te.registerFlag("WEBGL_FENCE_API_ENABLED",()=>function d3(n){return 2===n&&null!=Ds(n).fenceSync}(Te.getNumber("WEBGL_VERSION"))),Te.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",()=>Te.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0),Te.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",()=>-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${n}.`)}),Te.registerFlag("WEBGL_FLUSH_THRESHOLD",()=>Jm()&&Te.getBool("IS_CHROME")?1:-1,n=>{if(n<0&&-1!==n)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${n}.`)}),Te.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",()=>128),Te.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",()=>!1),Te.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",()=>1e5),Te.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",()=>128);const ew="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:tw}=Ae;function m3(n,t,e){const s=[];if(n.forEach(p=>{const f=q(p.shapeInfo.logicalShape);if(p.shapeInfo.isUniform?s.push(`uniform float ${p.name}${f>1?`[${f}]`:""};`):(s.push(`uniform sampler2D ${p.name};`),s.push(`uniform int offset${p.name};`)),e.enableShapeUniforms){const{uniformShape:m}=bm(e.packedInputs,p.shapeInfo.logicalShape,p.shapeInfo.texShape);switch(m.length){case 1:s.push(`uniform int ${p.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${p.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${p.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${p.name}Shape;`)}s.push(`uniform ivec2 ${p.name}TexShape;`)}}),e.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}e.customUniforms&&e.customUniforms.forEach(p=>{s.push(`uniform ${p.type} ${p.name}${p.arrayIndex?`[${p.arrayIndex}]`:""};`)});const r=s.join("\n"),o=n.map(p=>function g3(n,t,e=!1,s){let r="";r+=e?nw(n,s):Oo(n,s);return n.shapeInfo.logicalShape.length<=t.logicalShape.length&&(r+=e?function X3(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",o=n.shapeInfo.logicalShape.length,a=t.logicalShape.length,i=tw(n.shapeInfo.logicalShape,t.logicalShape),l=ht(a),u=a-o;let c;const h=["x","y","z","w","u","v"];c=0===o?"":a<2&&i.length>=1?"coords = 0;":i.map(x=>`coords.${h[x+u]} = 0;`).join("\n");let d="";d=a<2&&o>0?"coords":n.shapeInfo.logicalShape.map((x,b)=>`coords.${h[b+u]}`).join(", ");let p="return outputValue;";const m=1===q(n.shapeInfo.logicalShape),y=1===q(t.logicalShape);if(1!==o||m||y){if(m&&!y)p=1===a?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(i.length){const x=o-2,b=o-1;i.indexOf(x)>-1&&i.indexOf(b)>-1?p="return vec4(outputValue.x);":i.indexOf(x)>-1?p="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":i.indexOf(b)>-1&&(p="return vec4(outputValue.xx, outputValue.zz);")}}else p="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${r}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${d});\n      ${p}\n    }\n  `}(n,t):function Y3(n,t){const e=n.name,s=e.charAt(0).toUpperCase()+e.slice(1),r="get"+s+"AtOutCoords",i=n.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!n.shapeInfo.isUniform&&i===l&&null==n.shapeInfo.flatOffset&&je(n.shapeInfo.texShape,t.texShape))return`\n      float ${r}() {\n        return sampleTexture(${e}, resultUV);\n      }\n    `;const u=ht(l),c=tw(n.shapeInfo.logicalShape,t.logicalShape),h=l-i;let d;const p=["x","y","z","w","u","v"];d=0===i?"":l<2&&c.length>=1?"coords = 0;":c.map(m=>`coords.${p[m+h]} = 0;`).join("\n");let f="";return f=l<2&&i>0?"coords":n.shapeInfo.logicalShape.map((m,g)=>`coords.${p[g+h]}`).join(", "),`\n    float ${r}() {\n      ${u} coords = getOutputCoords();\n      ${d}\n      return get${s}(${f});\n    }\n  `}(n,t)),r}(p,t,e.packedInputs,e.enableShapeUniforms)).join("\n"),a=t.texShape,i=bn(),l=function b3(n){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${n.texture2D}(textureSampler, uv).r;\n    }\n  `}(i);let u,c,h=function I3(n){return`${n.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${n.varyingFs} vec2 resultUV;\n    ${n.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${n.defineSpecialNaN}\n    ${n.defineSpecialInf}\n    ${n.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${C3}\n    ${k3}\n    ${N3}\n  `}(i);return t.isPacked?(u=function y3(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function T3(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?e?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,e);case 2:return function O3(n,t,e){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(je(n,t))return e?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const r=Math.ceil(n[1]/2);return e?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function _3(n,t,e){if(e)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[2]/2),o=r*Math.ceil(n[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(n,t,e);default:return function A3(n,t,e){if(e)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],r=Math.ceil(n[n.length-1]/2),o=r*Math.ceil(n[n.length-2]/2);let a=o,i="",l="b, r, c";for(let u=2;u<n.length-1;u++)a*=n[n.length-u-1],i=`\n      int b${u} = index / ${a};\n      index -= b${u} * ${a};\n    `+i,l=`b${u}, `+l;return`\n    ivec${n.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${o};\n      index -= b * ${o};\n\n      int r = 2 * (index / ${r});\n      int c = imod(index, ${r}) * 2;\n\n      return ivec${n.length}(${l});\n    }\n  `}(n,t,e)}}(t.logicalShape,a,e.enableShapeUniforms),c=function v3(n){return`\n    void setOutput(vec4 val) {\n      ${n.output} = val;\n    }\n  `}(i)):(u=function x3(n,t,e){switch(n.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function $3(n,t,e){return 1===t[0]?e?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?e?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:e?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,e);case 2:return function L3(n,t,e){return je(n,t)?e?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===n[1]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===n[0]?e?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:e?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${n[1]};\n      int c = index - r * ${n[1]};\n      return ivec2(r, c);\n    }\n  `}(n,t,e);case 3:return function E3(n,t,e){if(e)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${xc(["r","c","d"],n)}\n    return ivec3(r, c, d);\n  }\n`;const s=Kr(["r","c","d"],n);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(n,t,e);case 4:return function D3(n,t,e){if(e)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${xc(["r","c","d","d2"],n)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=Kr(["r","c","d","d2"],n);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(n,t,e);case 5:return function R3(n,t){const e=Kr(["r","c","d","d2","d3"],n);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(n,t);case 6:return function F3(n,t){const e=Kr(["r","c","d","d2","d3","d4"],n);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${e}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(n,t);default:throw new Error(`${n.length}-D output sampling is not yet supported`)}}(t.logicalShape,a,e.enableShapeUniforms),c=function w3(n){return`\n    void setOutput(float val) {\n      ${n.output} = vec4(val, 0, 0, 0);\n    }\n  `}(i)),e.packedInputs&&(h+=S3),[h,l,c,r,u,o,e.userCode].join("\n")}function Oo(n,t=!1){const e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function z3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`float ${s}() {return ${e};}`;const[r,o]=n.shapeInfo.texShape;if(1===r&&1===o)return`\n      float ${s}() {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const a=qr(e);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `;const[i,l]=n.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${i}, ${l}, ${a});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 1:return function B3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1);if(n.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${Lo(n)}\n      }\n    `;const r=n.shapeInfo.texShape,o=r[0],a=r[1];if(1===a&&1===o)return`\n      float ${s}(int index) {\n        return sampleTexture(${e}, halfCR);\n      }\n    `;const i=qr(e);return 1===a?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${e}TexShape[0]));\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${o}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `:1===o?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${e}TexShape[1]), 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);\n        return sampleTexture(${e}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${e}TexShape[0], ${e}TexShape[1], index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${o}, ${a}, index + ${i});\n      return sampleTexture(${e}, uv);\n    }\n  `}(n,t);case 2:return function W3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape;if(null!=o&&je(e,o))return t?`\n      float ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${o[0]}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const{newShape:a,keptDims:i}=Xs(e);if(a.length<e.length){const p=["row","col"];return`\n      ${Oo(Po(n,a),t)}\n      float ${r}(int row, int col) {\n        return ${r}(${zo(p,i)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${e[1]}, 1)));\n        ${Lo(n)}\n      }\n    `;const u=o[0],c=o[1],h=qr(s);return 1===c?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${r}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${e[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${r}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${r}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${e[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(n,t);case 3:return function G3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[1]*e[2],a=e[2],{newShape:i,keptDims:l}=Xs(e);if(i.length<e.length){const g=["row","col","depth"];return`\n        ${Oo(Po(n,i),t)}\n        float ${r}(int row, int col, int depth) {\n          return ${r}(${zo(g,l)});\n        }\n      `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${a}, 1)));\n        ${Lo(n)}\n      }\n    `;const c=n.shapeInfo.texShape,h=c[0],d=c[1],p=n.shapeInfo.flatOffset;if(d===o&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${r}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${a}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${d}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(d===a&&null==p)return t?`\n      float ${r}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${r}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${e[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${d}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=qr(s);return t?`\n    float ${r}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${o} + col * ${a} + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${r}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${a} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${d}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(n,t);case 4:return function j3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=e[3],a=e[2]*o,i=e[1]*a,{newShape:l,keptDims:u}=Xs(e);if(l.length<e.length){const b=["row","col","depth","depth2"];return`\n      ${Oo(Po(n,l),t)}\n      float ${r}(int row, int col, int depth, int depth2) {\n        return ${r}(${zo(b,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${i}, ${a}, ${o}, 1)));\n        ${Lo(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(p===i&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${a}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(p===o&&null==c)return t?`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${r}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${e[1]*e[2]}, ${e[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=qr(s);return t?`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${r}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${d}, ${p}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(n,t);case 5:return function K3(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t[4],o=t[3]*r,a=t[2]*o,i=t[1]*a,{newShape:l,keptDims:u}=Xs(t);if(l.length<t.length){const g=["row","col","depth","depth2","depth3"];return`\n      ${Oo(Po(n,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${zo(g,u)});\n      }\n    `}if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${i}, ${a}, ${o}, ${r})) +\n          depth3;\n        ${Lo(n)}\n      }\n    `;const c=n.shapeInfo.flatOffset,h=n.shapeInfo.texShape,d=h[0],p=h[1];if(p===i&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${a}, ${o}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(p===r&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${p}.0, ${d}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${i} + col * ${a} + depth * ${o} +\n          depth2 * ${r} + depth3 + ${qr(e)};\n      vec2 uv = uvFromFlat(${d}, ${p}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);case 6:return function q3(n){const t=n.shapeInfo.logicalShape,e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),{newShape:r,keptDims:o}=Xs(t);if(r.length<t.length){const y=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Oo(Po(n,r))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${zo(y,o)});\n      }\n    `}const a=t[5],i=t[4]*a,l=t[3]*i,u=t[2]*l,c=t[1]*u;if(n.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${i})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${a}, 1)));\n        ${Lo(n)}\n      }\n    `;const h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],f=d[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${i}, ${a})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;if(f===a&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${p}.0);\n        return sampleTexture(${e}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${i} + depth3 * ${a} + depth4 + ${qr(e)};\n      vec2 uv = uvFromFlat(${p}, ${f}, index);\n      return sampleTexture(${e}, uv);\n    }\n  `}(n);default:throw new Error(`${e.length}-D input sampling is not yet supported`)}}function nw(n,t){switch(n.shapeInfo.logicalShape.length){case 0:return function P3(n){const t=n.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${bn().texture2D}(${t}, halfCR);\n    }\n  `}(n);case 1:return function M3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=n.shapeInfo.texShape,o=bn();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `;const a=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${a[0]}, ${a[1]}, index);\n      return ${o.texture2D}(${e}, uv);\n    }\n  `}(n,t);case 2:return function V3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=o[0],i=o[1],l=bn();if(null!=o&&je(e,o))return t?`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${r}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${r}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return`\n    vec4 ${r}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(e[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(n,t);case 3:return function U3(n,t){const e=n.shapeInfo.logicalShape,s=n.name,r="get"+s.charAt(0).toUpperCase()+s.slice(1),o=n.shapeInfo.texShape,a=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];if(1===e[0]){const p=[1,2],m=["b","row","col"];return`\n        ${nw(Po(n,e.slice(1)),t)}\n        vec4 ${r}(int b, int row, int col) {\n          return ${r}(${zo(m,p)});\n        }\n      `}const i=bn();if(t)return`\n    vec4 ${r}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `;const l=a[0],u=a[1],c=Math.ceil(e[2]/2);return`\n    vec4 ${r}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(e[1]/2)}, ${c}, b, row, col);\n      return ${i.texture2D}(${s}, uv);\n    }\n  `}(n,t);default:return function H3(n,t){const e=n.name,s="get"+e.charAt(0).toUpperCase()+e.slice(1),r=bn();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${e}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${e}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${e}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${e}TexShape[0]) / 2.0), ceil(float(${e}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${r.texture2D}(${e}, uv);\n    }\n  `;const o=n.shapeInfo.logicalShape,a=o.length,i=n.shapeInfo.texShape,l=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=l[0],c=l[1],h=Math.ceil(o[a-1]/2);let d=h*Math.ceil(o[a-2]/2),p="int b, int row, int col",f=`b * ${d} + (row / 2) * ${h} + (col / 2)`;for(let m=2;m<a-1;m++)p=`int b${m}, `+p,d*=o[a-m-1],f=`b${m} * ${d} + `+f;return`\n    vec4 ${s}(${p}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${r.texture2D}(${e}, uv);\n    }\n  `}(n,t)}}const C3="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",k3="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",N3="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",S3="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function qr(n){return`offset${n}`}function Lo(n){const t=n.name,e=q(n.shapeInfo.logicalShape);return e<2?`return ${t};`:`\n    for (int i = 0; i < ${e}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function ht(n){if(n<=1)return"int";if(2===n)return"ivec2";if(3===n)return"ivec3";if(4===n)return"ivec4";if(5===n)return"ivec5";if(6===n)return"ivec6";throw Error(`GPU for rank ${n} is not yet supported`)}function bm(n,t,e){const{newShape:s,keptDims:r}=Xs(t),o=t.length,a=n&&3===o&&1===t[0],i=a?t.slice(1):s,l=!n&&o>1&&!je(t,e)&&s.length<o||a;return{useSqueezeShape:l,uniformShape:l?i:t,keptDims:r}}function Po(n,t){const e=JSON.parse(JSON.stringify(n));return e.shapeInfo.logicalShape=t,e}function zo(n,t){return t.map(e=>n[e]).join(", ")}function rw(n,t){if(n.length!==t.length)throw Error(`Binary was compiled with ${n.length} inputs, but was executed with ${t.length} inputs`);n.forEach((e,s)=>{const r=e.logicalShape,o=t[s],a=o.shape;if(!je(r,a))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${a} must match`);if(e.isUniform&&o.isUniform)return;const i=e.texShape,l=o.isUniform?null:o.texData.texShape;if(!je(i,l))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${l} must match`)})}function jn(n){return X().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&n<=4}class ez{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Ao.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=bn();this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?xc(["r","c","d"],t):Kr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${e.output} = result;\n      }\n    `}}class tz{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Ao.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const e=bn();this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?xc(["r","c","d"],t):Kr(["r","c","d"],t)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${e.output} = result;\n      }\n    `}}class nz{constructor(t){this.variableNames=["A"],this.outTexUsage=Rn.DOWNLOAD;const e=bn();this.outputShape=t,this.userCode=`\n      ${ew}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${e.output} = encode_float(x);\n      }\n    `}}class sz{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Rn.DOWNLOAD;const e=bn();this.outputShape=t,this.userCode=`\n      ${ew}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${e.output} = encode_float(x);\n      }\n    `}}class rz{constructor(t,e=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=bn();this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length);let r="result";e&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ym(t)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${s.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${s.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class oz{constructor(t,e=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const s=bn();this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length);let r="",o="result";e&&(o="floor(result * 255. + 0.5)");for(let a=0;a<=1;a++)for(let i=0;i<=1;i++){const l=2*a+i;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${i} < ${this.enableShapeUniforms?"outShape[2]":`${t[2]}`}) {\n          localCoords[2] += ${i};\n          if (localCoords[1] + ${a} < ${this.enableShapeUniforms?"outShape[1]":`${t[1]}`}) {\n            localCoords[1] += ${a};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${s.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${l}] = values[0];\n            } else if (offset == 1) {\n              result[${l}] = values[1];\n            } else if (offset == 2) {\n              result[${l}] = values[2];\n            } else {\n              result[${l}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ym(t)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${s.output} = ${o};\n        }\n    `}}function Di(n,t,e,s,r,o){!function JP(n,t){const e=X().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n<=0||t<=0)throw new Error(`Requested texture size [${n}x${t}] is invalid.`);if(n>e||t>e)throw new Error(`Requested texture size [${n}x${t}] greater than WebGL maximum on this browser / GPU [${e}x${e}].`)}(t,e);const a=function ZP(n){return js(n,()=>n.createTexture(),"Unable to create WebGLTexture.")}(n),i=n.TEXTURE_2D;return xe(n,()=>n.bindTexture(i,a)),xe(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE)),xe(n,()=>n.texParameteri(i,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE)),xe(n,()=>n.texParameteri(i,n.TEXTURE_MIN_FILTER,n.NEAREST)),xe(n,()=>n.texParameteri(i,n.TEXTURE_MAG_FILTER,n.NEAREST)),xe(n,()=>n.texImage2D(i,0,s,t,e,0,r,o,null)),xe(n,()=>n.bindTexture(n.TEXTURE_2D,null)),a}function ow(n){return n.internalFormatFloat}function aw(n){return n.internalFormatHalfFloat}function iw(n){return n.downloadTextureFormat}function lw(n){return n.internalFormatPackedFloat}function uw(n){return n.internalFormatPackedHalfFloat}class Iz{constructor(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const e=X().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,function RP(n,t){yr[n]=t}(e,t)):this.gl=Ds(e);let s="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(1===X().getNumber("WEBGL_VERSION")){const a="OES_texture_half_float";if(this.textureFloatExtension=dc(this.gl,"OES_texture_float"),is(this.gl,a))this.textureHalfFloatExtension=dc(this.gl,a);else if(X().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(s),is(this.gl,r))this.colorBufferHalfFloatExtension=dc(this.gl,r);else if(X().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(s="EXT_color_buffer_float",is(this.gl,s))this.colorBufferFloatExtension=this.gl.getExtension(s);else{if(!is(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=function iz(n){return function XP(n,t){const e=js(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return xe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),xe(n,()=>n.bufferData(n.ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function lz(n){return function YP(n,t){const e=js(n,()=>n.createBuffer(),"Unable to create WebGLBuffer");return xe(n,()=>n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,e)),xe(n,()=>n.bufferData(n.ELEMENT_ARRAY_BUFFER,t,n.STATIC_DRAW)),e}(n,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function QP(n){return js(n,()=>n.createFramebuffer(),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=dm(this.gl,this.textureHalfFloatExtension)}get debug(){return X().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const t=this.gl;xe(t,()=>t.finish()),xe(t,()=>t.bindFramebuffer(t.FRAMEBUFFER,null)),xe(t,()=>t.deleteFramebuffer(this.framebuffer)),xe(t,()=>t.bindBuffer(t.ARRAY_BUFFER,null)),xe(t,()=>t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)),xe(t,()=>t.deleteBuffer(this.indexBuffer)),this.disposed=!0}createFloat32MatrixTexture(t,e){return this.throwIfDisposed(),function uz(n,t,e,s){const[r,o]=Ei(t,e);return Di(n,r,o,ow(s),s.textureFormatFloat,n.FLOAT)}(this.gl,t,e,this.textureConfig)}createFloat16MatrixTexture(t,e){return this.throwIfDisposed(),function cz(n,t,e,s){const[r,o]=Ei(t,e);return Di(n,r,o,aw(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createUnsignedBytesMatrixTexture(t,e){return this.throwIfDisposed(),function hz(n,t,e,s){const[r,o]=Ei(t,e);return Di(n,r,o,iw(s),n.RGBA,n.UNSIGNED_BYTE)}(this.gl,t,e,this.textureConfig)}uploadPixelDataToTexture(t,e){this.throwIfDisposed(),function gz(n,t,e){xe(n,()=>n.bindTexture(n.TEXTURE_2D,t)),e.data instanceof Uint8Array?xe(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,e.width,e.height,0,n.RGBA,n.UNSIGNED_BYTE,e.data)):xe(n,()=>n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e)),xe(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e)}uploadDenseMatrixToTexture(t,e,s,r){this.throwIfDisposed(),function mz(n,t,e,s,r,o){let a,i,l;xe(n,()=>n.bindTexture(n.TEXTURE_2D,t)),r instanceof Uint8Array?(a=new Uint8Array(e*s*4),i=n.UNSIGNED_BYTE,l=n.RGBA):(a=new Float32Array(e*s*4),i=n.FLOAT,l=o.internalFormatPackedFloat),a.set(r),xe(n,()=>n.texImage2D(n.TEXTURE_2D,0,l,e,s,0,n.RGBA,i,a)),xe(n,()=>n.bindTexture(n.TEXTURE_2D,null))}(this.gl,t,e,s,r,this.textureConfig)}createFloat16PackedMatrixTexture(t,e){return this.throwIfDisposed(),function pz(n,t,e,s){const[r,o]=Do(t,e);return Di(n,r,o,uw(s),n.RGBA,s.textureTypeHalfFloat)}(this.gl,t,e,this.textureConfig)}createPackedMatrixTexture(t,e){return this.throwIfDisposed(),function dz(n,t,e,s){const[r,o]=Do(t,e);return Di(n,r,o,lw(s),n.RGBA,n.FLOAT)}(this.gl,t,e,this.textureConfig)}deleteMatrixTexture(t){this.throwIfDisposed(),this.outputTexture===t&&(Z0(this.gl,this.framebuffer),this.outputTexture=null),xe(this.gl,()=>this.gl.deleteTexture(t))}downloadByteEncodedFloatMatrixFromOutputTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function bz(n,t,e,s){const[r,o]=Ei(t,e),i=new Uint8Array(function LP(n,t){return n*t}(t*e,4));return xe(n,()=>n.readPixels(0,0,r,o,s.downloadTextureFormat,n.UNSIGNED_BYTE,i)),new Float32Array(i.buffer)}(this.gl,e,s,this.textureConfig))}downloadPackedMatrixFromBuffer(t,e,s,r,o,a){return function wz(n,t,e,s,r,o,a,i){const l=n,u=new Float32Array(function PP(n,t){const[e,s]=Do(n,t);return e*s*4}(o,a));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,t,0,0,0,o,a)}downloadFloat32MatrixFromBuffer(t,e){return function xz(n,t,e){const s=n,r=new Float32Array(e);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,r),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),r}(this.gl,t,e)}createBufferFromTexture(t,e,s){this.bindTextureToFrameBuffer(t);const r=function yz(n,t,e,s){const r=n.createBuffer();xe(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,r));const i=16*t*e;return xe(n,()=>n.bufferData(n.PIXEL_PACK_BUFFER,i,n.STREAM_READ)),xe(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,0)),xe(n,()=>n.bindBuffer(n.PIXEL_PACK_BUFFER,null)),r}(this.gl,e,s);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const t=this.createFence(this.gl);return this.pollFence(t)}createFence(t){let e,s;if(X().getBool("WEBGL_FENCE_API_ENABLED")){const r=t,o=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),s=()=>{const a=r.clientWaitSync(o,0,0);return a===r.ALREADY_SIGNALED||a===r.CONDITION_SATISFIED},e=o}else X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),s=()=>this.isQueryAvailable(e,X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):s=()=>!0;return{query:e,isFencePassed:s}}downloadMatrixFromPackedTexture(t,e,s){return this.downloadMatrixDriver(t,()=>function vz(n,t,e){const s=new Float32Array(t*e*4);return xe(n,()=>n.readPixels(0,0,e,t,n.RGBA,n.FLOAT,s)),s}(this.gl,e,s))}createProgram(t){this.throwIfDisposed();const e=this.gl,s=function GP(n,t){const e=js(n,()=>n.createShader(n.FRAGMENT_SHADER),"Unable to create fragment WebGLShader.");if(xe(n,()=>n.shaderSource(e,t)),xe(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw function jP(n,t){const e=HP.exec(t);if(null==e)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(n);const s=+e[1],r=n.split("\n"),o=r.length.toString().length+2,a=r.map((h,d)=>eo((d+1).toString(),o)+h);let i=0;for(let h=0;h<a.length;h++)i=Math.max(a[h].length,i);const l=a.slice(0,s-1),u=a.slice(s-1,s),c=a.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${eo(u[0],i)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}(t,n.getShaderInfoLog(e)),new Error("Failed to compile fragment shader.");return e}(e,t);null==this.vertexShader&&(this.vertexShader=function az(n){const t=bn();return function UP(n,t){const e=js(n,()=>n.createShader(n.VERTEX_SHADER),"Unable to create vertex WebGLShader.");if(xe(n,()=>n.shaderSource(e,t)),xe(n,()=>n.compileShader(e)),!1===n.getShaderParameter(e,n.COMPILE_STATUS))throw console.log(n.getShaderInfoLog(e)),new Error("Failed to compile vertex shader.");return e}(n,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(e));const r=function KP(n){return js(n,()=>n.createProgram(),"Unable to create WebGLProgram.")}(e);return xe(e,()=>e.attachShader(r,this.vertexShader)),xe(e,()=>e.attachShader(r,s)),function qP(n,t){if(xe(n,()=>n.linkProgram(t)),!1===n.getProgramParameter(t,n.LINK_STATUS))throw console.log(n.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(e,r),this.debug&&pm(e,r),this.vertexAttrsAreBound||(this.setProgram(r),this.vertexAttrsAreBound=function fz(n,t,e){return xe(n,()=>n.bindBuffer(n.ARRAY_BUFFER,e)),Y0(n,t,"clipSpacePos",e,3,20,0)&&Y0(n,t,"uv",e,2,20,12)}(e,this.program,this.vertexBuffer)),r}deleteProgram(t){this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&xe(this.gl,()=>this.gl.deleteProgram(t))}setProgram(t){this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&pm(this.gl,this.program),xe(this.gl,()=>this.gl.useProgram(t))}getUniformLocation(t,e,s=!0){return this.throwIfDisposed(),s?function t3(n,t,e){return js(n,()=>n.getUniformLocation(t,e),'uniform "'+e+'" not present in program.')}(this.gl,t,e):function n3(n,t,e){return n.getUniformLocation(t,e)}(this.gl,t,e)}getAttributeLocation(t,e){return this.throwIfDisposed(),xe(this.gl,()=>this.gl.getAttribLocation(t,e))}getUniformLocationNoThrow(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)}setInputMatrixTexture(t,e,s){this.throwIfDisposed(),this.throwIfNoProgram(),s3(this.gl,t,e,s)}setOutputMatrixTexture(t,e,s){this.setOutputMatrixTextureDriver(t,s,e)}setOutputPackedMatrixTexture(t,e,s){this.throwIfDisposed();const[r,o]=Do(e,s);this.setOutputMatrixTextureDriver(t,r,o)}setOutputMatrixWriteRegion(t,e,s,r){this.setOutputMatrixWriteRegionDriver(s,t,r,e)}setOutputPackedMatrixWriteRegion(t,e,s,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&pm(this.gl,this.program),pc(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const t=this.gl;this.debug&&this.debugValidate(),xe(t,()=>t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),xe(this.gl,()=>this.gl.finish())}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=dc(this.gl,2===X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.createQuery();return s.beginQuery(r.TIME_ELAPSED_EXT,o),o}const t=this.getQueryTimerExtensionWebGL1(),e=t.createQueryEXT();return t.beginQueryEXT(t.TIME_ELAPSED_EXT,e),e}endQuery(){if(2===X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,s=this.getQueryTimerExtensionWebGL2();return void e.endQuery(s.TIME_ELAPSED_EXT)}const t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}waitForQueryAndGetTime(t){var e=this;return L(function*(){return yield $m(()=>e.disposed||e.isQueryAvailable(t,X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))),e.getQueryTime(t,X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))})()}getQueryTime(t,e){if(0===e)return null;if(2===e){const s=this.gl;return s.getQueryParameter(t,s.QUERY_RESULT)/1e6}{const s=this.getQueryTimerExtensionWebGL1();return s.getQueryObjectEXT(t,s.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(t,e){if(0===e)return!0;if(2===e){const s=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=s.getQueryParameter(t,s.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}{const s=this.getQueryTimerExtensionWebGL1(),r=s.getQueryObjectEXT(t,s.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(s.GPU_DISJOINT_EXT)),r&&!this.disjoint}}pollFence(t){return new Promise(e=>{this.addItemToPoll(()=>t.isFencePassed(),()=>e())})}pollItems(){const t=function Cz(n){let t=0;for(;t<n.length&&n[t]();++t);return t-1}(this.itemsToPoll.map(e=>e.isDoneFn));for(let e=0;e<=t;++e){const{resolveFn:s}=this.itemsToPoll[e];s()}this.itemsToPoll=this.itemsToPoll.slice(t+1)}addItemToPoll(t,e){this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),!(this.itemsToPoll.length>1)&&$m(()=>(this.pollItems(),0===this.itemsToPoll.length))}bindTextureToFrameBuffer(t){this.throwIfDisposed(),fm(this.gl,t,this.framebuffer),this.debug&&pc(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(fm(this.gl,this.outputTexture,this.framebuffer),this.debug&&pc(this.gl)):Z0(this.gl,this.framebuffer)}downloadMatrixDriver(t,e){this.bindTextureToFrameBuffer(t);const s=e();return this.unbindTextureToFrameBuffer(),s}setOutputMatrixTextureDriver(t,e,s){this.throwIfDisposed();const r=this.gl;fm(r,t,this.framebuffer),this.debug&&pc(r),this.outputTexture=t,xe(r,()=>r.viewport(0,0,e,s)),xe(r,()=>r.scissor(0,0,e,s))}setOutputMatrixWriteRegionDriver(t,e,s,r){this.throwIfDisposed(),xe(this.gl,()=>this.gl.scissor(t,e,s,r))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:kz,bincountImpl:cw,bincountReduceImpl:Nz,ceilImpl:Sz,concatImpl:Tz,equalImpl:$z,expImpl:_z,expm1Impl:Ez,floorImpl:Az,gatherNdImpl:Dz,gatherV2Impl:Rz,greaterImpl:Fz,greaterEqualImpl:Oz,lessImpl:Lz,lessEqualImpl:Pz,linSpaceImpl:zz,logImpl:Mz,maxImpl:Bz,maximumImpl:Vz,minimumImpl:Wz,multiplyImpl:Uz,negImpl:Gz,notEqualImpl:Hz,prodImpl:jz,rangeImpl:Kz,rsqrtImpl:qz,sigmoidImpl:Xz,simpleAbsImpl:hw,sliceImpl:Yz,sparseFillEmptyRowsImpl:Zz,sparseReshapeImpl:Jz,sparseSegmentReductionImpl:dw,sqrtImpl:Qz,stridedSliceImpl:eM,stringNGramsImpl:tM,stringSplitImpl:nM,stringToHashBucketFastImpl:sM,subImpl:rM,tileImpl:oM,topKImpl:aM,transposeImpl:wm,uniqueImpl:iM}=et;function pw(n,t){return["x","y","z","w","u","v"].slice(0,t).map(e=>`${n}.${e}`)}function wn(n,t){return 1===t?[n]:pw(n,t)}class uM{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;const e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const s=wn("rc",e),r=ht(e),o=function hM(n,t,e){if(1===n)return`rc > ${t[0]}`;let s="";for(let r=n-2;r<n;r++)s+=`${e[r]} >= ${t[r]}`,r<n-1&&(s+="||");return s}(e,t,s),a=function dM(n,t,e,s){if(1===n)return"";const r=s.slice(-2);return`\n    int r = ${r[0]};\n    int c = ${r[1]};\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= ${t};\n    bool rEdge = rp1 >= ${e};\n  `}(e,t[t.length-1],t[t.length-2],s),i=function pM(n,t){const e=n.length,s=function cM(n,t){const e=[];for(let s=0;s<=1;s++)for(let r=0;r<=1;r++){let o=`${0===s?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let a=2;a<n;a++)o=`${t[t.length-1-a]},`+o;e.push(o)}return e}(e,t);return 1===e?`getA(rc),\n            rc + 1 >= ${n[0]} ? 0. : getA(rc + 1),\n            0, 0`:`getA(${s[0]}),\n          cEdge ? 0. : getA(${s[1]}),\n          rEdge ? 0. : getA(${s[2]}),\n          rEdge || cEdge ? 0. : getA(${s[3]})`}(t,s);this.userCode=`\n        void main() {\n          ${r} rc = getOutputCoords();\n\n          if(${o}) {\n            setOutput(vec4(0));\n          } else {\n            ${a}\n\n            setOutput(vec4(${i}));\n          }\n        }\n      `}}}class fw{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length);let s="";for(let r=0;r<4;r++){let o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),s+=`\n        ${o}\n        ${r>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${r}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${r>0?"}":""}\n      `}this.userCode=`\n      ${function fM(n,t){return`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${t?function f3(n,t,e="index"){const r=function p3(n,t){const e=n.length,s=n.map(o=>`${t}[${o}]`),r=new Array(e-1);r[e-2]=s[e-1];for(let o=e-3;o>=0;--o)r[o]=`(${r[o+1]} * ${s[o+1]})`;return r}(n.map((o,a)=>a),t);return r.map((o,a)=>`int ${n[a]} = ${e} / ${r[a]}; ${a===r.length-1?`int ${n[a+1]} = ${e} - ${n[a]} * ${r[a]}`:`index -= ${n[a]} * ${r[a]}`};`).join("")}(["r","c","d"],"inputShape"):Kr(["r","c","d"],n)}\n      return ivec3(r, c, d);\n    }\n  `}(e,this.enableShapeUniforms)}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":ym(t)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":t[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":t[2]};\n\n        ${s}\n\n        setOutput(result);\n      }\n    `}}class mM{constructor(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(t,e,s){const r=gw(e,s),o=yw(t,r,s);o in this.freeTextures||(this.freeTextures[o]=[]),o in this.usedTextures||(this.usedTextures[o]=[]);const a=mw(t,r,this.gpgpu.gl,this.gpgpu.textureConfig,s);if(this.freeTextures[o].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=a,this.log();const l=this.freeTextures[o].shift();return this.usedTextures[o].push(l),l}let i;return r===on.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):r===on.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):r===on.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):r===on.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):r===on.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[o].push(i),this.numUsedTextures++,this._numBytesAllocated+=a,this.log(),i}releaseTexture(t,e,s,r){if(null==this.freeTextures)return;const o=gw(s,r),a=yw(e,o,r);a in this.freeTextures||(this.freeTextures[a]=[]);const i=mw(e,o,this.gpgpu.gl,this.gpgpu.textureConfig,r),l=X().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==l&&this._numBytesAllocated>l?(this.gpgpu.deleteMatrixTexture(t),this._numBytesAllocated-=i):(this.freeTextures[a].push(t),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const u=this.usedTextures[a],c=u.indexOf(t);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");u.splice(c,1),this.log()}log(){if(!this.logEnabled)return;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${this.numFreeTextures+this.numUsedTextures})`);const e=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*e)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const t in this.freeTextures)this.freeTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});for(const t in this.usedTextures)this.usedTextures[t].forEach(e=>{this.gpgpu.deleteMatrixTexture(e)});this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function mw(n,t,e,s,r){const o=function yM(n,t){switch(n){case on.PACKED_2X2_FLOAT32:return lw(t);case on.PACKED_2X2_FLOAT16:return uw(t);case on.UNPACKED_FLOAT32:return ow(t);case on.UNPACKED_FLOAT16:return aw(t);case on.PACKED_4X1_UNSIGNED_BYTE:return iw(t);default:throw new Error(`Unknown physical texture type ${n}`)}}(t,s);let a;if(r){const[l,u]=Do(n[0],n[1]);a=l*u}else{const[l,u]=Ei(n[0],n[1]);a=l*u}const i=function gM(n,t){if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===n.RGBA)return 16;if(t===n.RGBA16F)return 8;throw new Error(`Unknown internal format ${t}`)}(e,o);return a*i}function gw(n,t){if(n===Rn.UPLOAD)return on.PACKED_2X2_FLOAT32;if(n===Rn.RENDER||null==n)return function xM(n){return X().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?n?on.PACKED_2X2_FLOAT32:on.UNPACKED_FLOAT32:n?on.PACKED_2X2_FLOAT16:on.UNPACKED_FLOAT16}(t);if(n===Rn.DOWNLOAD||n===Rn.PIXELS)return on.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${n}`)}function yw(n,t,e){return`${n[0]}_${n[1]}_${t}_${e}`}class xr{constructor(t,e){this.variableNames=["A"],this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${e}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const ls="if (isnan(x)) return x;",bM="return x;",xw="return abs(x);",wM="return (x >= 0.0) ? x : (exp(x) - 1.0);",vM=ls+"\n  return (x < 0.0) ? 0.0 : x;\n",IM=ls+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",wc="return x;",CM="return 1.0 / (1.0 + exp(-1.0 * x));",kM="return x;",NM="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",SM="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",TM="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",$M="return 1.0 / (1.0 + exp(-1.0 * x));";class Mo{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${e}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class _M{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;const e=t.length,s=wn("rc",e),r=ht(e),o=function lM(n,t){if(1===n)return"rc";let e="";for(let s=0;s<n;s++)e+=t[s],s<n-1&&(e+=",");return e}(e,s),a=s.slice(-2),i=e<=1?"rc":`vec2(${a.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${o});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const EM=Tp,vc={},FM=X().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");let PM=(()=>{class n extends St{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!X().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){const s=Ds(X().getNumber("WEBGL_VERSION"));this.binaryCache=function RM(n){return n in vc||(vc[n]={}),vc[n]}(X().getNumber("WEBGL_VERSION")),this.gpgpu=new Iz(s),this.canvas=s.canvas,this.gpgpuCreatedLocally=!0}else this.gpgpu=e,this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=e.gl.canvas;this.textureManager=new mM(this.gpgpu),this.numMBBeforeWarning=function LM(){return null==X().global.screen?1024:X().global.screen.height*X().global.screen.width*window.devicePixelRatio*600/1024/1024}(),this.texData=new st(this,_r())}nextDataId(){return n.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,s,r){if((X().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||X().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===r&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const o={id:this.nextDataId()};return this.texData.set(o,{shape:s,dtype:r,values:e,usage:Rn.UPLOAD,refCount:1}),o}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,s,r,o,a){if(X().getBool("DEBUG")&&this.checkNumericalProblems(s),"complex64"===o)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:r,dtype:o,values:s,usage:Rn.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const s=this.texData.get(e),{values:r,dtype:o,complexTensorInfos:a,slice:i,shape:l,isPacked:u}=s;if(null!=i){let p;p=u?new Mo(l,wc):new xr(l,wc);const f=this.runWebGLProgram(p,[{dataId:e,shape:l,dtype:o}],o),m=this.readSync(f.dataId);return this.disposeIntermediateTensorInfo(f),m}if(null!=r)return this.convertAndCacheOnCPU(e);if("string"===o)return r;const c=null!=this.activeTimers;let h,d;return c&&(h=kn()),d="complex64"===o?Vs(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),c&&(this.downloadWaitMs+=kn()-h),this.convertAndCacheOnCPU(e,d)}read(e){var s=this;return L(function*(){if(s.pendingRead.has(e)){const g=s.pendingRead.get(e);return new Promise(y=>g.push(y))}const r=s.texData.get(e),{values:o,shape:a,slice:i,dtype:l,complexTensorInfos:u,isPacked:c}=r;if(null!=i){let g;g=c?new Mo(a,wc):new xr(a,wc);const y=s.runWebGLProgram(g,[{dataId:e,shape:a,dtype:l}],l),x=s.read(y.dataId);return s.disposeIntermediateTensorInfo(y),x}if(null!=o)return s.convertAndCacheOnCPU(e);if(!X().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===X().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let d,p,h=null;if("complex64"!==l&&X().get("WEBGL_BUFFER_SUPPORTED")){d=s.decode(e);const g=s.texData.get(d.dataId);h=s.gpgpu.createBufferFromTexture(g.texture,...hc(a))}if(s.pendingRead.set(e,[]),"complex64"!==l&&(yield s.gpgpu.createAndWaitForFence()),"complex64"===l){const g=yield Promise.all([s.read(u.real.dataId),s.read(u.imag.dataId)]);p=Vs(g[0],g[1])}else if(null==h)p=s.getValuesFromTexture(e);else{const g=q(a);p=s.gpgpu.downloadFloat32MatrixFromBuffer(h,g)}if(null!=d&&s.disposeIntermediateTensorInfo(d),null!=h){const g=s.gpgpu.gl;xe(g,()=>g.deleteBuffer(h))}const f=s.convertAndCacheOnCPU(e,p),m=s.pendingRead.get(e);return s.pendingRead.delete(e),m.forEach(g=>g(f)),s.pendingDisposal.has(e)&&(s.pendingDisposal.delete(e),s.disposeData(e)&&_r().removeDataId(e,s),s.pendingDeletes--),f})()}bufferSync(e){const s=this.readSync(e.dataId);let r=s;if("string"===e.dtype)try{r=s.map(o=>so(o))}catch{throw new Error("Failed to decode encoded string bytes into utf-8")}return We(e.shape,e.dtype,r)}checkNumericalProblems(e){if(null!=e)for(let s=0;s<e.length;s++){const r=e[s];if(!VP(r))throw X().getBool("WEBGL_RENDER_FLOAT32_CAPABLE")?Error(`The value ${r} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`):Error(`The value ${r} cannot be represented on this device.`)}}getValuesFromTexture(e){const{shape:s,dtype:r,isPacked:o}=this.texData.get(e),a=q(s);if(X().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const p=this.decode(e),f=this.texData.get(p.dataId),m=this.gpgpu.downloadMatrixFromPackedTexture(f.texture,...hc(s)).subarray(0,a);return this.disposeIntermediateTensorInfo(p),m}const i=X().getBool("WEBGL_PACK")&&!0===o,l=i?mm(s):s,u=i?new sz(l):new nz(l),c=this.runWebGLProgram(u,[{shape:l,dtype:r,dataId:e}],"float32"),h=this.texData.get(c.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(h.texture,h.texShape[0],h.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(c),d}timerAvailable(){return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){var s=this;return L(function*(){const r=s.activeTimers,o=[];let a=!1;null==s.programTimersStack?(s.programTimersStack=o,a=!0):s.activeTimers.push(o),s.activeTimers=o,e();const i=Qr(s.activeTimers.map(c=>c.query)).filter(c=>null!=c),l=Qr(s.activeTimers.map(c=>c.name)).filter(c=>null!=c);s.activeTimers=r,a&&(s.programTimersStack=null);const u={uploadWaitMs:s.uploadWaitMs,downloadWaitMs:s.downloadWaitMs,kernelMs:null,wallMs:null};if(X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const c=yield Promise.all(i);u.kernelMs=function Jr(n){let t=0;for(let e=0;e<n.length;e++)t+=n[e];return t}(c),u.getExtraProfileInfo=()=>c.map((h,d)=>({name:l[d],ms:h})).map(h=>`${h.name}: ${h.ms}`).join(", ")}else u.kernelMs={error:"WebGL query timers are not supported in this environment."};return s.uploadWaitMs=0,s.downloadWaitMs=0,u})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:kn(),endMs:null}}endTimer(e){return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=kn(),e)}getQueryTime(e){var s=this;return L(function*(){return X().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?s.gpgpu.waitForQueryAndGetTime(e):e.endMs-e.startMs})()}disposeData(e,s=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(s?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!s&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:r}=this.texData.get(e);return null!=r&&(this.disposeData(r.real.dataId,s),this.disposeData(r.imag.dataId,s)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:s,dtype:r,texShape:o,usage:a,isPacked:i,slice:l}=this.texData.get(e),u=l&&l.origDataId||e,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=s&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(s,o,a,i)));const h=this.texData.get(e);h.texture=null,h.texShape=null,h.isPacked=!1,h.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,s=FM){return X().getBool("WEBGL_CPU_FORWARD")&&e.every(r=>null==this.texData.get(r.dataId).texture&&q(r.shape)<s)}getGPGPUContext(){return this.gpgpu}where(e){Cn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const s=e.dataSync();return EM(e.shape,s)}packedUnaryOp(e,s,r){const o=new Mo(e.shape,s),a=this.compileAndRun(o,[e],r);return _r().makeTensorFromDataId(a.dataId,a.shape,a.dtype)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const o=hw(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,o)}if(X().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,xw,e.dtype);const s=new xr(e.shape,xw),r=this.compileAndRun(s,[e]);return _r().makeTensorFromDataId(r.dataId,r.shape,r.dtype)}makeTensorInfo(e,s,r){let o;if("string"===s&&null!=r&&r.length>0&&Go(r[0])){const a=r.map(i=>Js(i));o=this.write(a,e,s)}else o=this.write(r,e,s);return this.texData.get(o).usage=null,{dataId:o,shape:e,dtype:s}}makeOutput(e,s,r){const{dataId:o}=this.makeTensorInfo(e,s,r);return _r().makeTensorFromDataId(o,e,s,this)}unpackTensor(e){const s=new _M(e.shape);return this.runWebGLProgram(s,[e],e.dtype)}packTensor(e){const s=new uM(e.shape);return this.runWebGLProgram(s,[e],e.dtype,null,!0)}packedReshape(e,s){const r=[Ro(e.shape),...Fo(e.shape)],o={dtype:e.dtype,shape:r,dataId:e.dataId},a=[Ro(s),...Fo(s)],i=new fw(a,r),c=this.runWebGLProgram(i,[o],e.dtype,[r],!0);return{dataId:c.dataId,shape:s,dtype:c.dtype}}decode(e){const s=this.texData.get(e),{isPacked:r,shape:o,dtype:a}=s,i=mm(o);let l;const u=hc(i);return l=r?new tz(i):new ez(i),{dtype:a,shape:o,dataId:this.runWebGLProgram(l,[{shape:i,dtype:a,dataId:e}],a,[u],!0).dataId}}runWebGLProgram(e,s,r,o,a=!1){const i=this.makeTensorInfo(e.outputShape,r),l=this.texData.get(i.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===Ao.DENSE){const y=hc(e.outputShape);l.texShape=y.map(x=>2*x)}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===q(i.shape))return l.values=an(i.dtype,0),i;const u=[],c=s.map(y=>{if("complex64"===y.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let x=this.texData.get(y.dataId);if(null==x.texture){if(!e.packedInputs&&q(y.shape)<=X().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:y.shape,texData:null,isUniform:!0,uniformValues:x.values};e.packedInputs&&(x.isPacked=!0,x.shape=y.shape)}else if(!!x.isPacked!=!!e.packedInputs)y=x.isPacked?this.unpackTensor(y):this.packTensor(y),u.push(y),x=this.texData.get(y.dataId);else if(x.isPacked&&!mc(x.shape,y.shape)){const b=y,w=y.shape;y.shape=x.shape,y=this.packedReshape(y,w),u.push(y),x=this.texData.get(y.dataId),b.shape=w}return this.uploadToGPU(y.dataId),{shape:y.shape,texData:x,isUniform:!1}});this.uploadToGPU(i.dataId);const h={shape:i.shape,texData:l,isUniform:!1},d=function Q3(n,t,e){let s="";t.concat(e).forEach(a=>{const i=null!=a.texData&&null!=a.texData.slice&&a.texData.slice.flatOffset>0;if(n.enableShapeUniforms&&!a.isUniform){const l=a.texData.texShape,{useSqueezeShape:u,uniformShape:c,keptDims:h}=bm(n.packedInputs,a.shape,l);let d="",p="",f="";if(1===c.length&&n.packedInputs){const I=[Math.ceil(l[0]/2),Math.ceil(l[1]/2)];d=`${I[0]>1}_${I[1]>1}`}else if(2!==c.length||n.packedInputs){if(c.length>2&&!n.packedInputs){const I=Se(c);f=`${I[0]===l[1]}_${I[I.length-1]===l[1]}`}}else p=`${c[0]>1}_${c[1]>1}`;const m=a.shape.length,g=2===c.length&&je(a.shape,l),y=1===q(a.shape),x=mo(a.shape,e.shape),b=!n.packedInputs&&m===e.shape.length&&je(l,e.texData.texShape);s+=`${m}_${b}_${u?h:""}_${c.length}_${y}_${x}_${g}_${d}_${p}_${f}_${n.packedInputs||c.length>2?"":`${l[0]>1}_${l[1]>1}`}_${i}`}else s+=`${a.shape}_${a.isUniform?"uniform":a.texData.texShape}_${i}`});let o=n.constructor.name;return o+="_"+s+"_"+n.userCode+`${X().getNumber("WEBGL_VERSION")}`,o}(e,c,h),p=this.getAndSaveBinary(d,()=>function Z3(n,t,e,s){const r=e.map((b,w)=>{const I={logicalShape:b.shape,texShape:b.isUniform?null:b.texData.texShape,isUniform:b.isUniform,isPacked:!b.isUniform&&b.texData.isPacked,flatOffset:null};return null!=b.texData&&null!=b.texData.slice&&b.texData.slice.flatOffset>0&&(I.flatOffset=b.texData.slice.flatOffset),{name:t.variableNames[w],shapeInfo:I}}),o=r.map(b=>b.shapeInfo),a={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},i=m3(r,a,t),l=n.createProgram(i);let u=null;const c=n.getUniformLocation(l,"NAN",!1);1===X().getNumber("WEBGL_VERSION")&&(u=n.getUniformLocation(l,"INFINITY",!1));const h=!1,d={},p={},f={};for(let b=0;b<t.variableNames.length;b++){const w=t.variableNames[b];d[w]=n.getUniformLocation(l,w,h),d[`offset${w}`]=n.getUniformLocation(l,`offset${w}`,h),t.enableShapeUniforms&&(p[`${w}Shape`]=n.getUniformLocation(l,`${w}Shape`,h),f[`${w}TexShape`]=n.getUniformLocation(l,`${w}TexShape`,h))}let m,g,y;t.enableShapeUniforms&&(m=n.getUniformLocation(l,"outShape",h),y=n.getUniformLocation(l,"outShapeStrides",h),g=n.getUniformLocation(l,"outTexShape",h));const x=[];return t.customUniforms&&t.customUniforms.forEach((b,w)=>{x[w]=n.getUniformLocation(l,b.name,h)}),{program:t,source:i,webGLProgram:l,uniformLocations:d,customUniformLocations:x,inShapeInfos:o,outShapeInfo:a,infLoc:u,nanLoc:c,inShapesLocations:p,inTexShapesLocations:f,outShapeLocation:m,outShapeStridesLocation:y,outTexShapeLocation:g}}(this.gpgpu,e,c,h)),f=null!=this.activeTimers;let m;f&&(m=this.startTimer()),function J3(n,t,e,s,r){t.program.enableShapeUniforms||(rw(t.inShapeInfos,e),rw([t.outShapeInfo],[s]));const o=s.texData.texture,a=s.texData.texShape;s.texData.isPacked?n.setOutputPackedMatrixTexture(o,a[0],a[1]):n.setOutputMatrixTexture(o,a[0],a[1]),n.setProgram(t.webGLProgram),1===X().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&n.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&n.gl.uniform1f(t.nanLoc,NaN),e.forEach((l,u)=>{const c=t.program.variableNames[u],h=t.uniformLocations[c],d=t.uniformLocations[`offset${c}`],p=t.inShapesLocations[`${c}Shape`],f=t.inTexShapesLocations[`${c}TexShape`];if(p){const{uniformShape:m}=bm(t.program.packedInputs,l.shape,l.texData.texShape);switch(m.length){case 1:n.gl.uniform1iv(p,new Int32Array(m));break;case 2:n.gl.uniform2iv(p,new Int32Array(m));break;case 3:n.gl.uniform3iv(p,new Int32Array(m));break;case 4:n.gl.uniform4iv(p,new Int32Array(m))}}if(f&&n.gl.uniform2i(f,l.texData.texShape[0],l.texData.texShape[1]),null!=h){if(l.isUniform){if(q(l.shape)<2)n.gl.uniform1f(h,l.uniformValues[0]);else{let m=l.uniformValues;m instanceof Float32Array||(m=new Float32Array(m)),n.gl.uniform1fv(h,m)}return}null!=l.texData.slice&&null!=d&&n.gl.uniform1i(d,l.texData.slice.flatOffset),n.setInputMatrixTexture(l.texData.texture,h,u)}});const i=t.outShapeLocation;if(i)switch(s.shape.length){case 1:n.gl.uniform1iv(i,new Int32Array(s.shape));break;case 2:n.gl.uniform2iv(i,new Int32Array(s.shape));break;case 3:n.gl.uniform3iv(i,new Int32Array(s.shape));break;case 4:n.gl.uniform4iv(i,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const l=Se(s.shape);switch(s.shape.length){case 2:n.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(l));break;case 3:n.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(l));break;case 4:n.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(l))}}t.outTexShapeLocation&&n.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&r&&t.program.customUniforms.forEach((l,u)=>{const c=t.customUniformLocations[u],h=r[u];if("float"===l.type)n.gl.uniform1fv(c,h);else if("vec2"===l.type)n.gl.uniform2fv(c,h);else if("vec3"===l.type)n.gl.uniform3fv(c,h);else if("vec4"===l.type)n.gl.uniform4fv(c,h);else if("int"===l.type)n.gl.uniform1iv(c,h);else if("ivec2"===l.type)n.gl.uniform2iv(c,h);else if("ivec3"===l.type)n.gl.uniform3iv(c,h);else{if("ivec4"!==l.type)throw Error(`uniform type ${l.type} is not supported yet.`);n.gl.uniform4iv(c,h)}}),n.executeProgram()}(this.gpgpu,p,c,h,o),u.forEach(y=>this.disposeIntermediateTensorInfo(y)),f&&(m=this.endTimer(m),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(m)}));const g=X().get("WEBGL_FLUSH_THRESHOLD");if(g>0){const y=kn();y-this.lastGlFlushTime>g&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=y)}if(!X().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===a){const y=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),y}return i}compileAndRun(e,s,r,o,a=!1){return this.runWebGLProgram(e,s,r=r||s[0].dtype,o,a)}getAndSaveBinary(e,s){return e in this.binaryCache||(this.binaryCache[e]=s()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(X().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach(s=>{this.gpgpu.deleteProgram(this.binaryCache[s].webGLProgram),delete this.binaryCache[s]}),this.textureManager.dispose(),null!=this.canvas&&typeof HTMLCanvasElement<"u"&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=P(()=>{if(!X().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=X().getBool("DEBUG");X().set("DEBUG",!1);const s=this.abs(Ne(1e-8)).dataSync()[0];if(X().set("DEBUG",e),s>0)return 32}return 16})),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const s=this.texData.get(e),{shape:r,dtype:o,values:a,texture:i,usage:l,isPacked:u}=s;if(null!=i)return;const c=null!=this.activeTimers;let h;c&&(h=kn());let d=s.texShape;if(null==d&&(d=function o3(n,t=!1){let e=X().getNumber("WEBGL_MAX_TEXTURE_SIZE");t&&(e*=2,1===(n=n.map((r,o)=>o>=n.length-2?Pt(n[o]):n[o])).length&&(n=[2,n[0]])),2!==n.length&&(n=Xs(n).newShape);let s=q(n);if(n.length<=1&&s<=e)return[1,s];if(2===n.length&&n[0]<=e&&n[1]<=e)return n;if(3===n.length&&n[0]*n[1]<=e&&n[2]<=e)return[n[0]*n[1],n[2]];if(3===n.length&&n[0]<=e&&n[1]*n[2]<=e)return[n[0],n[1]*n[2]];if(4===n.length&&n[0]*n[1]*n[2]<=e&&n[3]<=e)return[n[0]*n[1]*n[2],n[3]];if(4===n.length&&n[0]<=e&&n[1]*n[2]*n[3]<=e)return[n[0],n[1]*n[2]*n[3]];if(t){const r=Ro(n);let o=2,a=2;return n.length&&([o,a]=Fo(n)),s=r*(o/2)*(a/2),Rc(s).map(i=>2*i)}return Rc(s)}(r,u),s.texShape=d),null!=a){const p=mm(r);let f,m=d[1],g=d[0];const y=a instanceof Uint8Array;u?([m,g]=Do(d[0],d[1]),f=new oz(p,y)):f=new rz(p,y);const x=this.makeTensorInfo([g,m],o);this.texData.get(x.dataId).usage=y?Rn.PIXELS:Rn.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(x.dataId),m,g,a);const I=this.runWebGLProgram(f,[x],o,[[g,m]],!0),k=this.texData.get(I.dataId);s.texture=k.texture,s.texShape=k.texShape,s.isPacked=k.isPacked,s.usage=k.usage,this.disposeIntermediateTensorInfo(x),this.texData.delete(I.dataId),s.values=null,c&&(this.uploadWaitMs+=kn()-h)}else{const p=this.acquireTexture(d,l,o,u);s.texture=p}}convertAndCacheOnCPU(e,s){const r=this.texData.get(e),{dtype:o}=r;return this.releaseGPUData(e),null!=s&&(r.values=function zM(n,t){if("float32"===t||"complex64"===t)return n;if("int32"===t||"bool"===t){const e="int32"===t?new Int32Array(n.length):new Uint8Array(n.length);for(let s=0;s<e.length;++s)e[s]=Math.round(n[s]);return e}throw new Error(`Unknown dtype ${t}`)}(s,o)),r.values}acquireTexture(e,s,r,o){if(this.numBytesInGPU+=this.computeBytes(e,r),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const a=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${a} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,s,o)}computeBytes(e,s){return e[0]*e[1]*Fc(s)}}return n.nextDataId=0,n})();Qm()&&Pg("webgl",()=>new PM,2);const bw="\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n";class Bo{constructor(t,e,s){this.variableNames=["A","B"],this.outputShape=Be(e,s),this.enableShapeUniforms=jn(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${t}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}const Ic="\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n";class Ri{constructor(t,e,s,r=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Be(e,s);const o=this.outputShape.length;this.enableShapeUniforms=jn(o);let a="";if(r)if(0===o||1===q(this.outputShape))a="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(a=`\n          ${ht(o)} coords = getOutputCoords();\n        `,1===o)a+=this.enableShapeUniforms?"\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const l=wn("coords",o);a+=this.enableShapeUniforms?`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= outShape[${o} - 2];\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= outShape[${o} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:`\n            bool nextRowOutOfBounds =\n              (${l[o-2]} + 1) >= ${this.outputShape[o-2]};\n            bool nextColOutOfBounds =\n              (${l[o-1]} + 1) >= ${this.outputShape[o-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${t}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${a}\n\n        setOutput(result);\n      }\n    `}}function Fn(n){const{inputs:t,backend:e}=n,{x:s}=t;return e.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const VM={kernelName:fa,backendName:"webgl",kernelFunc:Fn};function br(n){const{inputs:t,backend:e}=n,{real:s,imag:r}=t,o=e.makeTensorInfo(s.shape,"complex64"),a=e.texData.get(o.dataId),i=Fn({inputs:{x:s},backend:e}),l=Fn({inputs:{x:r},backend:e});return a.complexTensorInfos={real:i,imag:l},o}const WM={kernelName:Hc,backendName:"webgl",kernelFunc:br},ww="return (a < 0.) ? b * a : a;",vw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",GM={kernelName:ol,backendName:"webgl",kernelFunc:function UM(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{alpha:o}=s,a=e.makeTensorInfo([],"float32",Zs(o,"float32")),i=X().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ri(vw,r.shape,a.shape):new Bo(ww,r.shape,a.shape),l=e.runWebGLProgram(i,[r,a],r.dtype);return e.disposeIntermediateTensorInfo(a),l}},Iw="return (a < 0.) ? b * a : a;",Cw="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",jM={kernelName:kl,backendName:"webgl",kernelFunc:function HM(n){const{inputs:t,backend:e}=n,{x:s,alpha:r}=t,o=X().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ri(Cw,s.shape,r.shape):new Bo(Iw,s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},kw="if (isnan(x)) return x;";function Ye({opSnippet:n,packedOpSnippet:t,cpuKernelImpl:e,dtype:s}){return({inputs:r,backend:o})=>{const{x:a}=r,i=o,l=s||a.dtype;if(i.shouldExecuteOnCPU([a])&&null!=e){const h=i.texData.get(a.dataId),d=e(h.values,l);return i.makeTensorInfo(a.shape,l,d)}let c;return c=X().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new Mo(a.shape,t):new xr(a.shape,n),i.runWebGLProgram(c,[a],l)}}function hn({opSnippet:n,packedOpSnippet:t,checkOutOfBounds:e=!1,supportsComplex:s=!1,cpuKernelImpl:r,dtype:o}){return({inputs:a,backend:i})=>{const{a:l,b:u}=a,c=i;if(s&&"complex64"===l.dtype){const f=c.texData.get(l.dataId),m=c.texData.get(u.dataId),[g,y]=[[f.complexTensorInfos.real,m.complexTensorInfos.real],[f.complexTensorInfos.imag,m.complexTensorInfos.imag]].map(b=>{const[w,I]=b,k={dataId:w.dataId,dtype:w.dtype,shape:l.shape},S={dataId:I.dataId,dtype:I.dtype,shape:u.shape},T=new Bo(n,l.shape,u.shape);return c.runWebGLProgram(T,[k,S],Ln(w.dtype,I.dtype))}),x=br({inputs:{real:g,imag:y},backend:c});return c.disposeIntermediateTensorInfo(g),c.disposeIntermediateTensorInfo(y),x}const h=o||Ln(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=r){const f=c.texData.get(l.dataId).values,m=c.texData.get(u.dataId).values,g="string"===l.dtype?Pr(f):f,y="string"===l.dtype?Pr(m):m,[x,b]=r(l.shape,u.shape,g,y,h),w=c.makeTensorInfo(b,h);return c.texData.get(w.dataId).values=x,w}let p;return p=X().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new Ri(t,l.shape,u.shape,e):new Bo(n,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function Cc(n,t=!1){if("linear"===n)return t?kM:bM;if("relu"===n)return t?SM:vM;if("elu"===n)return t?NM:wM;if("relu6"===n)return t?TM:IM;if("prelu"===n)return t?Cw:Iw;if("leakyrelu"===n)return t?vw:ww;if("sigmoid"===n)return t?$M:CM;throw new Error(`Activation ${n} has not been implemented for the WebGL backend.`)}class Nw{constructor(t,e,s,r=!1,o=!1,a=!1,i=null,l=!1,u=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=s,this.enableShapeUniforms=jn(this.outputShape.length);const h=Math.ceil((r?t[1]:t[2])/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=o?"rc.z, i * 2":"i * 2, rc.z",f=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],m=o?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let g="",y="";i&&(g=l?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,y="result = activation(result);");const x=a?"result += getBiasAtOutCoords();":"";a&&this.variableNames.push("bias"),l&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let b="rc.x",w="rc.x";t[0]<e[0]?b=`int(min(float(rc.x), ${t[0]-1}.))`:e[0]<t[0]&&(w=`int(min(float(rc.x), ${e[0]-1}.))`),this.userCode=`\n      ${g}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${h}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${h}; i++) {\n          int batchA = ${b};\n          int batchB = ${w};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${f[0]} * ${m[0]});\n          result += (${f[1]} * ${m[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${x}\n\n        ${y}\n\n        setOutput(result);\n      }\n    `}}const Sw={REAL:"return areal * breal - aimag * bimag;",IMAG:"return areal * bimag + aimag * breal;"};class Tw{constructor(t,e,s){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Be(e,s),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${t}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const $w="return a * b;";function vm(n){const{inputs:t,backend:e}=n,{a:s,b:r}=t,o=Ln(s.dtype,r.dtype);if("complex64"===s.dtype){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),u=new Tw(Sw.REAL,s.shape,r.shape),c=new Tw(Sw.IMAG,s.shape,r.shape),h=[{dataId:i.complexTensorInfos.real.dataId,dtype:i.complexTensorInfos.real.dtype,shape:s.shape},{dataId:i.complexTensorInfos.imag.dataId,dtype:i.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:l.complexTensorInfos.real.dataId,dtype:l.complexTensorInfos.real.dtype,shape:r.shape},{dataId:l.complexTensorInfos.imag.dataId,dtype:l.complexTensorInfos.imag.dtype,shape:r.shape}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=br({inputs:{real:d,imag:p},backend:e});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}if(e.shouldExecuteOnCPU([s,r])){const i=e.texData.get(s.dataId),l=e.texData.get(r.dataId),[u,c]=Uz(s.shape,r.shape,i.values,l.values,o),h=e.makeTensorInfo(c,o);return e.texData.get(h.dataId).values=u,h}let a;return a=X().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ri($w,s.shape,r.shape):new Bo($w,s.shape,r.shape),e.runWebGLProgram(a,[s,r],o)}const XM={kernelName:Ca,backendName:"webgl",kernelFunc:vm};function fe(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{shape:o}=s,a=e,i=q(r.shape),l=_m(o,i),u=q(l);C(i===u,()=>`The new shape (${l}) has ${u} elements and the old shape (${r.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);const c=a.texData.get(r.dataId);return!c.isPacked||mc(r.shape,l)||null!==c.texture&&mc(c.shape,l)?(a.incRef(r.dataId),{dataId:r.dataId,shape:l,dtype:r.dtype}):function YM(n,t,e){const s=[Ro(n.shape),...Fo(n.shape)],r={dtype:n.dtype,shape:s,dataId:n.dataId},o=[Ro(t),...Fo(t)],a=new fw(o,s),u=e.runWebGLProgram(a,[r],n.dtype,[s],!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(r,l,a)}const ZM={kernelName:Nl,backendName:"webgl",kernelFunc:fe};class _w{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];const i=4*Math.floor(s/4),l=s%4;let u="sumValue += dot(values, ones);";if(null!=e){const h=1/e;u=`sumValue += dot(values * ${Jt(h)?h.toPrecision(2):h}, ones);`}let c="";o%s>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===l}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}class JM{constructor(t,e){this.variableNames=["x"];const{windowSize:s,batchSize:r,inSize:o,outSize:a}=t;this.outputShape=[r,a];let i="0.0",l="";"prod"===e?i="1.0":"min"===e?(i="1.0 / 1e-20",l="min"):"max"===e&&(i="-1.0 / 1e-20",l="max");let u=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");const c=4*Math.floor(s/4),h=s%4;let d=`\n      if (${"sum"===e}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===e}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${l}(values, minMaxValue);\n        if (${"min"===e} || ${"max"===e}) {\n          minMaxValue = ${l}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===e?(i="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===e&&(i="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${f}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Xr(n,t,e,s){const r=function QM(n){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const e=t.length?t[t.length-1].outSize:n[1],s=Nu(e);t.push({inSize:e,windowSize:s,outSize:Math.ceil(e/s)})}return t}(n.shape);let o=n;for(let a=0;a<r.length;a++){const{inSize:i,windowSize:l,outSize:u}=r[a];let c,h;c="mean"===e?0===a?new _w({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},i):new _w({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u}):new JM({windowSize:l,inSize:i,batchSize:n.shape[0],outSize:u},e),h=o,o=s.runWebGLProgram(c,[o],t),h.dataId!==n.dataId&&s.disposeIntermediateTensorInfo(h)}return o}class eB{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[e[a]];this.outputShape=s,this.rank=s.length;const r=ht(this.rank),o=function tB(n){const t=n.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let r=0;r<n.length;r++)s[n[r]]=e[r];return s.join()}(e);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${o}));\n    }\n    `}}class nB{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const s=new Array(t.length);for(let c=0;c<s.length;c++)s[c]=t[e[c]];if(this.outputShape=s,this.rank=s.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=ht(this.rank),o=pw("rc",this.rank),a=new Array(this.rank);for(let c=0;c<e.length;c++)a[e[c]]=o[c];const i=`vec2(${a.slice(-2).join()})`,l=`++${o[this.rank-1]} < ${s[this.rank-1]}`,u=`getChannel(getA(${a.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${l}) {\n        result[1] = ${u};\n      }\n      --${o[this.rank-1]};\n      if(++${o[this.rank-2]} < ${s[this.rank-2]}) {\n        result[2] = ${u};\n        if(${l}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function kc(n,t,e){const s=X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nB(n.shape,t):new eB(n.shape,t);return e.runWebGLProgram(s,[n],n.dtype)}function Nc(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s;return function sB(n,t,e,s){const o=n.shape.length,a=Me(t,n.shape);let i=a;const l=Dt(i,o),u=null!=l;let c=n;u&&(c=kc(n,l,s),i=zt(i.length,o)),cn("sum",i,o);const[h,d]=nn(c.shape,i);let p=h;e&&(p=At(h,a));const f=q(d),y=fe({inputs:{x:c},attrs:{shape:[q(n.shape)/f,f]},backend:s}),b=Xr(y,jh(n.dtype),"sum",s),w=fe({inputs:{x:b},attrs:{shape:p},backend:s});return s.disposeIntermediateTensorInfo(y),s.disposeIntermediateTensorInfo(b),u&&s.disposeIntermediateTensorInfo(c),w}(r,o,a,e)}const rB={kernelName:Al,backendName:"webgl",kernelFunc:Nc};function vn(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{perm:o}=s,a=e,l=new Array(r.shape.length);for(let c=0;c<l.length;c++)l[c]=r.shape[o[c]];let u;if(a.shouldExecuteOnCPU([r])){const h=a.texData.get(r.dataId).values,d=wm(h,r.shape,r.dtype,o,l);u=a.makeTensorInfo(l,r.dtype),a.texData.get(u.dataId).values=d}else u=kc(r,o,a);return u}const oB={kernelName:Ol,backendName:"webgl",kernelFunc:vn},Ew=1e3;function Sc({a:n,b:t,transposeA:e,transposeB:s,backend:r,bias:o=null,preluActivationWeights:a=null,leakyreluAlpha:i=0,activation:l=null}){const u=n.shape.length,c=t.shape.length,h=e?n.shape[u-2]:n.shape[u-1],d=s?t.shape[c-1]:t.shape[c-2],p=e?n.shape[u-1]:n.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=n.shape.slice(0,-2),g=t.shape.slice(0,-2),y=q(m),x=q(g);C(u>=2&&c>=2&&(y===x||1===y||1===x),()=>`Error in matMul: the input batch dimensions must either be the same or at least one input batch dimension must be 1. Got input batch dimensions of (${m}) and (${g}).`);const I=(y>x?n.shape.slice(0,-2):t.shape.slice(0,-2)).concat([p,f]);C(h===d,()=>`Error in matMul: inner shapes (${h}) and (${d}) of Tensors with shapes ${n.shape} and ${t.shape} and transposeA=${e} and transposeB=${s} must match.`);const k=e?[y,h,p]:[y,p,h],S=s?[x,f,d]:[x,d,f],T=fe({inputs:{x:n},backend:r,attrs:{shape:k}}),_=fe({inputs:{x:t},backend:r,attrs:{shape:S}}),E=[T,_],M=Math.max(y,x),B=e?T.shape[1]:T.shape[2],V=null!=o,j=null!=a,G="leakyrelu"===l,W=null!=l?Cc(l,!0):null;let K;if((1===p||1===f)&&B>Ew&&!1===(V||j||G||null!=W)){let te=T,oe=_;e&&(te=vn({inputs:{x:T},backend:r,attrs:{perm:[0,2,1]}}),E.push(te)),s&&(oe=vn({inputs:{x:_},backend:r,attrs:{perm:[0,2,1]}}),E.push(oe));const ie=1===f;let ce=te;1!==f&&(ce=fe({inputs:{x:te},backend:r,attrs:{shape:[M,B,1]}}),E.push(ce));const de=1===f?2:1;let me=oe;ie&&(me=fe({inputs:{x:oe},backend:r,attrs:{shape:[M,1,B]}}),E.push(me));const Ie=vm({inputs:{a:ce,b:me},backend:r});K=Nc({inputs:{x:Ie},backend:r,attrs:{axis:de,keepDims:!0}}),E.push(Ie)}else{const te=Ln(n.dtype,t.dtype),oe=new Nw(k,S,[M,p,f],e,s,V,W,j,G),le=[T,_];if(null!=o&&le.push(o),j&&le.push(a),G){const ie=r.makeTensorInfo([],"float32",Zs(i,"float32"));le.push(ie),E.push(ie)}K=r.runWebGLProgram(oe,le,te)}const Q=fe({inputs:{x:K},backend:r,attrs:{shape:I}});E.push(K);for(const te of E)r.disposeIntermediateTensorInfo(te);return Q}const iB={kernelName:Ml,backendName:"webgl",kernelFunc:function aB(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o,bias:a,preluActivationWeights:i}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return Sc({a:r,b:o,transposeA:l,transposeB:u,backend:e,bias:a,preluActivationWeights:i,leakyreluAlpha:h,activation:c})}},Aw="return abs(x);",uB={kernelName:zi,backendName:"webgl",kernelFunc:function lB(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const o=e.texData.get(s.dataId),a=hw(o.values);return e.makeTensorInfo(s.shape,s.dtype,a)}let r;return r=X().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Mo(s.shape,Aw):new xr(s.shape,Aw),e.runWebGLProgram(r,[s],s.dtype)}},hB=Ye({opSnippet:ls+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),dB={kernelName:qo,backendName:"webgl",kernelFunc:hB},fB=Ye({opSnippet:ls+"\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),mB={kernelName:Xo,backendName:"webgl",kernelFunc:fB},Dw="return a + b;",gB=hn({opSnippet:Dw,packedOpSnippet:Dw,supportsComplex:!0,cpuKernelImpl:kz}),yB={kernelName:to,backendName:"webgl",kernelFunc:gB};class xB{constructor(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`float v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class bB{constructor(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((o,a)=>`T${a}`);const s=[];this.variableNames.forEach(o=>{s.push(`vec4 v${o} = get${o}AtOutCoords();`)});const r=this.variableNames.map(o=>`v${o}`).join(" + ");this.userCode=`\n      void main() {\n        ${s.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const wB={kernelName:Mi,backendName:"webgl",kernelFunc:function Tc(n){const{inputs:t,backend:e}=n,s=t;if(1===s.length)return Fn({inputs:{x:s[0]},backend:e});if(s.length>X().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const l=Math.floor(s.length/2),u=Tc({inputs:s.slice(0,l),backend:e}),c=Tc({inputs:s.slice(l),backend:e});return Tc({inputs:[u,c],backend:e})}const r=s.map(l=>l.dtype).reduce((l,u)=>Ln(l,u)),o=s.map(l=>l.shape),i=X().getBool("WEBGL_PACK")?new bB(s[0].shape,o):new xB(s[0].shape,o);return e.runWebGLProgram(i,s,r)}},IB={kernelName:"All",backendName:"webgl",kernelFunc:function vB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Me(o,r.shape);let u=l;const c=Dt(u,i);let h=r;null!=c&&(h=vn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,i)),cn("all",u,i);const[d,p]=nn(h.shape,u),m=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),g=Xr(m,m.dtype,"all",e);let y;return y=fe(a?{inputs:{x:g},backend:e,attrs:{shape:At(d,l)}}:{inputs:{x:g},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(h),y}},kB={kernelName:"Any",backendName:"webgl",kernelFunc:function CB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Me(o,r.shape);let u=l;const c=Dt(u,i);let h=r;null!=c&&(h=vn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,i)),cn("any",u,i);const[d,p]=nn(h.shape,u),m=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),g=Xr(m,m.dtype,"any",e);let y;return y=fe(a?{inputs:{x:g},backend:e,attrs:{shape:At(d,l)}}:{inputs:{x:g},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(h),y}};class NB{constructor(t,e,s){this.variableNames=["A"];const{windowSize:r,batchSize:o,outSize:a}=t;s||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${s?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));"};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${"max"===e?">":"<"} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class SB{constructor(t,e,s,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,C(t.length>2,()=>`Packed arg${s.charAt(0).toUpperCase()+s.slice(1)} supports only inputs with rank above 2.`);const a=Math.ceil(t[t.length-1]/e);this.outputShape=t.slice(0,-1),a>1&&this.outputShape.push(a),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,l=i.length,u=ht(l),c=wn("coords",l);let h,d;if(1===a){d=l+1;const T=ht(d);h=`\n        ${T} sourceLocR = ${T}(${c.join()}, 0);\n        ++${c[l-1]};\n        ${T} sourceLocG = ${T}(${c.join()}, 0);\n        ++${c[l-2]};\n        ${T} sourceLocA = ${T}(${c.join()}, 0);\n        --${c[l-1]};\n        ${T} sourceLocB = ${T}(${c.join()}, 0);\n        --${c[l-2]};`}else d=l,h=`\n        ${u} sourceLocR = coords;\n        ++${c[l-1]};\n        ${u} sourceLocG = coords;\n        ++${c[l-2]};\n        ${u} sourceLocA = coords;\n        --${c[l-1]};\n        ${u} sourceLocB = coords;\n        --${c[l-2]};`;const p=["x","y","z","w","u","v"].slice(0,d),f="."+p[d-1],m=p.map(T=>"int "+T),g=wn("sourceLocR",d-1).concat("inIdx.r"),y=wn("sourceLocG",d-1).concat("inIdx.g"),x=wn("sourceLocB",d-1).concat("inIdx.b"),b=wn("sourceLocA",d-1).concat("inIdx.a"),w="max"===s?"greaterThan":"lessThan",I=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,S=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${S}\n      void main() {\n        ${u} coords = getOutputCoords();\n        bool hasNextCol = ${c[l-1]} < ${i[l-1]-1};\n        bool hasNextRow = ${c[l-2]} < ${i[l-2]-1};\n        ${h}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${e};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${e}; i++) {\n          inIdx = srcIdx;\n          ${I}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function Rw(n,t,e,s=null){let r=t.shape[0],o=t.shape[1];null!=s&&(r=s.shape[0],o=s.shape[1]);const a=Nu(o),i={windowSize:a,inSize:o,batchSize:r,outSize:Math.ceil(o/a)},l=new NB(i,e,null==s),u=[t];null!=s&&u.push(s);const c=n.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=Rw(n,t,e,c);return n.disposeIntermediateTensorInfo(c),h}function Fw(n,t,e,s=null){const r=null!=s?s.shape:t.shape,a=Nu(r[r.length-1]),i=new SB(r,a,e,null==s),u=n.runWebGLProgram(i,null==s?[t]:[t,s],"int32");if(u.shape.length===t.shape.length){const c=Fw(n,t,e,u);return n.disposeIntermediateTensorInfo(u),c}return u}function Ow(n,t,e,s){const r=[e];if(cn("arg"+s.charAt(0).toUpperCase()+s.slice(1),r,t.shape.length),!X().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const o=[],a=n.texData.get(t.dataId);let l=t;null!==a&&a.isPacked&&(l=n.unpackTensor(t),o.push(l));const[u,c]=nn(l.shape,r),h=q(c),d=fe({inputs:{x:l},backend:n,attrs:{shape:[-1,h]}});o.push(d);const p=Rw(n,d,s);o.push(p);const f=fe({inputs:{x:p},backend:n,attrs:{shape:u}});return o.forEach(m=>n.disposeIntermediateTensorInfo(m)),f}return Fw(n,t,s)}const $B={kernelName:Bi,backendName:"webgl",kernelFunc:function TB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Me(o,r.shape);const i=Dt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=vn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),cn("argMax",[a[0]],l.shape.length);const c=Ow(e,l,a[0],"max");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},EB={kernelName:Vi,backendName:"webgl",kernelFunc:function _B(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o}=s;let a=Me(o,r.shape);const i=Dt(a,r.shape.length);let l=r;const u=[];null!=i&&(l=vn({inputs:{x:r},backend:e,attrs:{perm:i}}),u.push(l),a=zt(a.length,l.shape.length)),cn("argMin",[a[0]],l.shape.length);const c=Ow(e,l,a[0],"min");return u.forEach(h=>e.disposeIntermediateTensorInfo(h)),c}},DB=Ye({opSnippet:ls+"\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),RB={kernelName:Yo,backendName:"webgl",kernelFunc:DB},OB=Ye({opSnippet:ls+"return log(x + sqrt(x * x + 1.0));"}),LB={kernelName:Zo,backendName:"webgl",kernelFunc:OB},zB=Ye({opSnippet:ls+"\n  return atan(x);\n"}),MB={kernelName:Jo,backendName:"webgl",kernelFunc:zB},WB=hn({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),UB={kernelName:ea,backendName:"webgl",kernelFunc:WB},HB=Ye({opSnippet:ls+"\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),jB={kernelName:Qo,backendName:"webgl",kernelFunc:HB};class Fi{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideHeight,l=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,h=t.effectiveFilterHeight,d=t.effectiveFilterWidth,p=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;const m="avg"===e;let x="0.0";if(m||(x="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${l});\n        const ivec2 pads = ivec2(${p}, ${f});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${h};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${c}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?o?`((batch  * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + d`:`(xR * ${t.inWidth} + xC) * ${t.inChannels} + d`:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let w=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(w="avgValue / count");const I=4*Math.floor(a/4),k=a%4,S=`\n      if (${m}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${l});\n      const ivec2 pads = ivec2(${p}, ${f});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${h};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${I}; wC += 4) {\n            int xC = xCCorner + wC * ${c};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              getValue(batch, xR, xC + 3 * ${c}, d)\n            );\n\n            ${S}\n          }\n\n          int xC = xCCorner + ${I};\n          if (${1===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${S}\n          } else if (${2===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${S}\n          } else if (${3===k}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${c}, d),\n              getValue(batch, xR, xC + 2 * ${c}, d),\n              initializationValue\n            );\n\n            ${S}\n          }\n        }\n        setOutput(${w});\n      }\n    `}}class Im{constructor(t,e,s,r=!1,o=!1){if(this.variableNames=["x"],"avg"===e&&s)throw new Error("Cannot compute positions for average pool.");const a=t.filterWidth,i=t.strideDepth,l=t.strideHeight,u=t.strideWidth,c=t.dilationDepth,h=t.dilationHeight,d=t.dilationWidth,p=t.effectiveFilterDepth,f=t.effectiveFilterHeight,m=t.effectiveFilterWidth,g=t.padInfo.front,y=t.padInfo.top,x=t.padInfo.left;this.outputShape=t.outShape;const b="avg"===e;let w="0.0";if(b||(w="-1.0 / 1e-20"),s)return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${l}, ${u});\n        const ivec3 pads = ivec3(${g}, ${y}, ${x});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${c}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${f};\n                wR += ${h}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${m};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?o?`(((batch * ${t.inDepth} + xD) * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`((xD * ${t.inHeight} + xR) * ${t.inWidth} + xC) * ${t.inChannels} + ch`:`wD * ${f} * ${m} +\n                      wR * ${m} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `);let k=`${e}(${e}(${e}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===e&&(k="avgValue / count");const S=4*Math.floor(a/4),T=a%4,_=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${l}, ${u});\n      const ivec3 pads = ivec3(${g}, ${y}, ${x});\n      const float initializationValue = ${w};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${t.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${w});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${c}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${f};\n            wR += ${h}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${S}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${_}\n            }\n\n            int xC = xCCorner + ${S};\n            if (${1===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${2===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${_}\n            } else if (${3===T}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${_}\n            }\n          }\n          setOutput(${k});\n        }\n      }\n    `}}const qB={kernelName:Wi,backendName:"webgl",kernelFunc:function KB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ai(r,"avgPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(un(a,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=Jn(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&je(c.inShape,c.outShape))return Fn({inputs:{x:r},backend:e});const h=new Fi(c,"avg",!1);return e.runWebGLProgram(h,[r],"float32")}},YB={kernelName:Ui,backendName:"webgl",kernelFunc:function XB(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dimRoundingMode:l,dataFormat:u}=s,h=Os(r.shape,o,a,[1,1,1],i,l,u),d=new Im(h,"avg",!1);return e.runWebGLProgram(d,[r],"float32")}};class ZB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const l=t.effectiveFilterHeight,u=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${l-1-t.padInfo.top}, ${u-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${l};\n            wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${t.dilationWidth}) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class JB{constructor(t){this.variableNames=["dy"],this.outputShape=t.inShape;const h=t.effectiveFilterDepth,d=t.effectiveFilterHeight,p=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${h-1-t.padInfo.front}, ${d-1-t.padInfo.top}, ${p-1-t.padInfo.left});\n      const float avgMultiplier = float(${1/(t.filterDepth*t.filterHeight*t.filterWidth)});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${h};\n            wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const eV={kernelName:Uc,backendName:"webgl",kernelFunc:function QB(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Os(a.shape,i,l,[1,1,1],u,c),p=new JB(d);return e.runWebGLProgram(p,[r],a.dtype)}},nV={kernelName:Wc,backendName:"webgl",kernelFunc:function tV(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o;Ai([r,o],"avgPoolGrad");const{filterSize:i,strides:l,pad:u}=s,c=Jn(a.shape,i,l,1,u),h=new ZB(c);return e.runWebGLProgram(h,[r],a.dtype)}},rV={kernelName:Gi,backendName:"webgl",kernelFunc:function sV(n){const{inputs:t,backend:e,attrs:s}=n,{a:r,b:o}=t,{transposeA:a,transposeB:i}=s;return Sc({a:r,b:o,transposeA:a,transposeB:i,backend:e})}};class oV{constructor(t,e,s,r,o,a){this.outputShape=[],this.variableNames=["x","mean","variance"],Be(t,e),Be(t,s);let i="0.0";null!=r&&(Be(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="1.0";null!=o&&(Be(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${l};\n        float inv = scale * inversesqrt(variance + float(${a}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class aV{constructor(t,e,s,r,o,a){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Be(t,e),Be(t,s);let i="vec4(0.0)";null!=r&&(Be(t,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let l="vec4(1.0)";null!=o&&(Be(t,o),this.variableNames.push("scale"),l="getScaleAtOutCoords()"),this.outputShape=t,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${l};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${a}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const iV={kernelName:nl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s,mean:r,variance:o,offset:a,scale:i}=n;C(r.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),C(null==a||r.shape.length===a.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),C(null==i||r.shape.length===i.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");let{varianceEpsilon:l}=e;null==l&&(l=.001);const u=[s,r,o];let c=null;null!=a&&(c=a.shape,u.push(a));let h=null;null!=i&&(h=i.shape,u.push(i));const d=X().getBool("WEBGL_PACK_NORMALIZATION")?new aV(s.shape,r.shape,o.shape,c,h,l):new oV(s.shape,r.shape,o.shape,c,h,l);return t.runWebGLProgram(d,u,u[0].dtype)}};class lV{constructor(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;const e=ht(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const s=function uV(n){if(1===n)return"sourceLoc";if(n<=6)return Cm.slice(0,n).map(t=>"sourceLoc."+t).join(",");throw Error(`Slicing for rank ${n} is not yet supported`)}(this.rank);let r;r=`\n        ${e} sourceLoc;\n        ${e} coords = getOutputCoords();\n        ${t.map((a,i)=>`sourceLoc.${Cm[i]} = start[${i}] + coords.${Cm[i]};`).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${s}));\n      }\n    `}}const Cm=["x","y","z","w","u","v"];class cV{constructor(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const e=ht(this.rank),s=wn("coords",this.rank),r=wn("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,a=`getChannel(getSource(${r.join()}), ${o})`,i=`\n      result.x = ${a};\n      if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${a};\n        --${r[this.rank-1]};\n      }\n    `,l=1===this.rank?"":`\n      --${s[this.rank-1]};\n      if (++${s[this.rank-2]} < ${t[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${a};\n        if (++${s[this.rank-1]} < ${t[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${a};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${e}(${t.map((c,h)=>`start[${h}]`).join()});`:t.map((c,h)=>`${r[h]} = ${s[h]} + start[${h}];`).join("\n");this.userCode=`\n      void main() {\n        ${e} coords = getOutputCoords();\n        ${e} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${i}\n        ${l}\n        setOutput(result);\n      }\n    `}}function Vo(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,size:a}=s,[i,l]=tu(r,o,a);if(fd(r,i,l),0===q(l))return e.makeTensorInfo(l,r.dtype,[]);if(e.shouldExecuteOnCPU([r])||"string"===r.dtype){const h=e.texData.get(r.dataId),d=Yz(h.values,i,l,r.shape,r.dtype);return e.makeTensorInfo(l,r.dtype,d)}const{isPacked:u}=e.texData.get(r.dataId),c=md(r.shape,i,l);if(u||!c){const h=X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new cV(l):new lV(l);return e.runWebGLProgram(h,[r],r.dtype,[i])}return e.uploadToGPU(r.dataId),function hV(n,t,e,s){const r=s.texData.get(n.dataId),o=s.makeTensorInfo(e,n.dtype),a=s.texData.get(o.dataId);Object.assign(a,r),a.refCount=1,a.shape=e,a.dtype=n.dtype;let i=gd(t,Se(n.shape));r.slice&&(i+=r.slice.flatOffset),a.slice={flatOffset:i,origDataId:r.slice&&r.slice.origDataId||n.dataId};const l=s.dataRefCount.get(a.slice.origDataId)||1;return s.dataRefCount.set(a.slice.origDataId,l+1),o}(r,i,l,e)}const dV={kernelName:El,backendName:"webgl",kernelFunc:Vo},pV={kernelName:Hi,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,crops:a}=s;C(r.shape.length<=4,()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((x,b)=>x*b),l=ii(r.shape,o,i),u=li(l.length,o.length),c=ui(r.shape,o,i),h=up(a,o.length),d=cp(c,a,o.length),p=[],f=fe({inputs:{x:r},backend:e,attrs:{shape:l}}),m=vn({inputs:{x:f},backend:e,attrs:{perm:u}}),g=fe({inputs:{x:m},backend:e,attrs:{shape:c}}),y=Vo({inputs:{x:g},backend:e,attrs:{begin:h,size:d}});return p.push(f),p.push(m),p.push(g),p.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}},mV={kernelName:Gc,backendName:"webgl",kernelFunc:function fV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a}=s,i=e.readSync(r.dataId),l=e.readSync(o.dataId),u=cw(i,l,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,u)}},Lw=hn({opSnippet:"return float(a != b);",cpuKernelImpl:Hz,dtype:"bool"}),gV={kernelName:bl,backendName:"webgl",kernelFunc:Lw};function Oi(n){const{inputs:t,backend:e}=n,{input:s}=t;return Fn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.real},backend:e})}const yV={kernelName:vh,backendName:"webgl",kernelFunc:Oi},wV={kernelName:ta,backendName:"webgl",kernelFunc:function km(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dtype:o}=s;if("complex64"===o){if("complex64"===r.dtype)return Fn({inputs:{x:r},backend:e});const a=Ht(r.shape),i=km({inputs:{x:r},backend:e,attrs:{dtype:"float32"}}),l=br({inputs:{real:i,imag:a},backend:e});return a.dispose(),e.disposeIntermediateTensorInfo(i),l}if("complex64"===r.dtype){const a=Oi({inputs:{input:r},backend:e}),i=km({inputs:{x:a},backend:e,attrs:{dtype:o}});return e.disposeIntermediateTensorInfo(a),i}if(!Em(r.dtype,o)){const a=Fn({inputs:{x:r},backend:e});return{dataId:a.dataId,shape:a.shape,dtype:o}}if("int32"===o)return function bV(n,t){const e=new xr(n.shape,"return float(int(x));"),s=t.runWebGLProgram(e,[n],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,e);if("bool"===o){const a=e.makeTensorInfo([],"bool",an("bool",1)),l=Lw({inputs:{a:r,b:a},backend:e});return e.disposeIntermediateTensorInfo(a),l}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${o}`)}},Pw="return ceil(x);",vV=Ye({opSnippet:Pw,packedOpSnippet:Pw,cpuKernelImpl:Sz}),IV={kernelName:na,backendName:"webgl",kernelFunc:vV};class CV{constructor(t){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class kV{constructor(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=t,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const SV={kernelName:sa,backendName:"webgl",kernelFunc:function NV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{clipValueMin:o,clipValueMax:a}=s;let i;return i=X().getBool("WEBGL_PACK_CLIP")?new kV(r.shape):new CV(r.shape),e.runWebGLProgram(i,[r],r.dtype,[[o],[a]])}};class TV{constructor(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function zw(n,t){return{dataId:t.dataId,dtype:t.dtype,shape:n.shape}}const _V={kernelName:ji,backendName:"webgl",kernelFunc:function $V(n){const{inputs:t,backend:e}=n,{x:s}=t,r=e.texData.get(s.dataId),o=new TV(s.shape),a=[zw(s,r.complexTensorInfos.real),zw(s,r.complexTensorInfos.imag)];return e.runWebGLProgram(o,a,a[0].dtype)}};class EV{constructor(t){this.outputShape=[],this.outputShape=Ns(t,1),this.variableNames=t.map((a,i)=>`T${i}`);const e=new Array(t.length-1);e[0]=t[0][1];for(let a=1;a<e.length;a++)e[a]=e[a-1]+t[a][1];const s=[`if (yC < ${e[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<e.length;a++)s.push(`else if (yC < ${e[a]}) setOutput(getT${a}(yR, yC-${e[a-1]}));`);s.push(`else setOutput(getT${e.length}(yR, yC-${e[e.length-1]}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${s.join("\n        ")}\n      }\n    `}}class AV{constructor(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ns(t,e);const s=this.outputShape,r=s.length,o=ht(r),a=wn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((m,g)=>`T${g}`);const l=new Array(t.length-1);l[0]=t[0][e];for(let m=1;m<l.length;m++)l[m]=l[m-1]+t[m][e];const u=i[e],c=i.slice(-2),h=i.join();let d=`if (${u} < ${l[0]}) {\n        return getChannel(\n            getT0(${h}), vec2(${c.join()}));\n        }`;for(let m=1;m<l.length;m++){const g=l[m-1];d+=`\n        if (${u} < ${l[m]}  && ${u} >= ${l[m-1]}) {\n          return getChannel(\n            getT${m}(${$c(i,u,g)}),\n            vec2(${$c(c,u,g)}));\n        }`}const f=l[l.length-1];d+=`\n        return getChannel(\n          getT${l.length}(${$c(i,u,f)}),\n          vec2(${$c(c,u,f)}));`,this.userCode=`\n      float getValue(${i.map(m=>"int "+m)}) {\n        ${d}\n      }\n\n      void main() {\n        ${o} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${a}), 0., 0., 0.);\n\n        ${a[r-1]} = ${a[r-1]} + 1;\n        if (${a[r-1]} < ${s[r-1]}) {\n          result.g = getValue(${a});\n        }\n\n        ${a[r-2]} = ${a[r-2]} + 1;\n        if (${a[r-2]} < ${s[r-2]}) {\n          result.a = getValue(${a});\n        }\n\n        ${a[r-1]} = ${a[r-1]} - 1;\n        if (${a[r-2]} < ${s[r-2]} &&\n            ${a[r-1]} < ${s[r-1]}) {\n          result.b = getValue(${a});\n        }\n        setOutput(result);\n      }\n    `}}function $c(n,t,e){const s=n.indexOf(t);return n.map((o,a)=>a===s?`${o} - ${e}`:o).join()}function _c(n){const{inputs:t,backend:e}=n,{input:s}=t;return Fn({inputs:{x:e.texData.get(s.dataId).complexTensorInfos.imag},backend:e})}const DV={kernelName:uh,backendName:"webgl",kernelFunc:_c};function Wo(n,t,e){const s=n[0].dtype;if("complex64"===s){const c=n.map(m=>Oi({inputs:{input:m},backend:e})),h=n.map(m=>_c({inputs:{input:m},backend:e})),d=Wo(c,t,e),p=Wo(h,t,e),f=br({inputs:{real:d,imag:p},backend:e});return c.forEach(m=>e.disposeIntermediateTensorInfo(m)),h.forEach(m=>e.disposeIntermediateTensorInfo(m)),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}let r=e.shouldExecuteOnCPU(n);if("string"===s&&(r=!0),r){const c=n.map(y=>{const b=[-1,q(y.shape.slice(t))];return fe({inputs:{x:y},backend:e,attrs:{shape:b}})}),h=c.map(y=>({vals:e.readSync(y.dataId),shape:y.shape})),d=Ns(c.map(y=>y.shape),1),f=Tz(h,d,s,1===c[0].shape[0]),m=Ns(n.map(y=>y.shape),t),g=e.makeTensorInfo(m,s,f);return c.forEach(y=>e.disposeIntermediateTensorInfo(y)),g}if(n.length>X().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const c=Math.floor(n.length/2),h=Wo(n.slice(0,c),t,e),d=Wo(n.slice(c),t,e),p=Wo([h,d],t,e);return e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),p}if(X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&n[0].shape.length>1){const c=new AV(n.map(h=>h.shape),t);return e.runWebGLProgram(c,n,s)}const{tensors2D:o,outShape:a}=function RV(n,t,e){const s=Ns(n.map(o=>o.shape),t);return{tensors2D:n.map(o=>fe({inputs:{x:o},attrs:{shape:[-1,q(o.shape.slice(t))]},backend:e})),outShape:s}}(n,t,e),i=new EV(o.map(c=>c.shape)),l=e.runWebGLProgram(i,o,s);o.forEach(c=>e.disposeIntermediateTensorInfo(c));const u=fe({inputs:{x:l},attrs:{shape:a},backend:e});return e.disposeIntermediateTensorInfo(l),u}function Mw(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s,o=Me(r,t[0].shape)[0],a=Ns(t.map(u=>u.shape),o);if(0===q(a))return e.makeTensorInfo(a,t[0].dtype,[]);const i=t.filter(u=>q(u.shape)>0);return 1===i.length?Fn({inputs:{x:i[0]},backend:e}):(ap(i.map(u=>u.shape),o),Wo(i,o,e))}const FV={kernelName:Ki,backendName:"webgl",kernelFunc:Mw};class Bw{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.outputShape=t.outShape;const a=t.padInfo.top,i=t.padInfo.left,l=t.strideHeight,u=t.strideWidth,c=t.dilationHeight,h=t.dilationWidth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),m=t.inChannels%4,g="channelsLast"===t.dataFormat,y=g?1:2,x=g?2:3,b=g?3:1;let w="",I="";s&&(w=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,I="result = activation(result);");const k=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${w}\n\n      const ivec2 strides = ivec2(${l}, ${u});\n      const ivec2 pads = ivec2(${a}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${y}], coords[${x}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${c};\n\n          if (xR < 0 || xR >= ${t.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${h};\n\n            if (xC < 0 || xC >= ${t.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${f}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${g}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===m}) {\n\n              if (${g}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${f}) *\n                    getW(wR, wC, ${f}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${f}, xR, xC) *\n                    getW(wR, wC, ${f}, d2);\n              }\n\n            } else if (${2===m}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2)\n              );\n\n              if (${g}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===m}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${f}, d2),\n                getW(wR, wC, ${f} + 1, d2),\n                getW(wR, wC, ${f} + 2, d2)\n              );\n\n              if (${g}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${f}),\n                  getX(batch, xR, xC, ${f} + 1),\n                  getX(batch, xR, xC, ${f} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${f}, xR, xC),\n                  getX(batch, ${f} + 1, xR, xC),\n                  getX(batch, ${f} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${I}\n        setOutput(result);\n      }\n    `}}class OV{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const e=t.padInfo.front,s=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,a=t.strideHeight,i=t.strideWidth,l=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,h=t.filterDepth,d=t.filterHeight,p=t.filterWidth,f=4*Math.floor(t.inChannels/4),m=t.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${o}, ${a}, ${i});\n      const ivec3 pads = ivec3(${e}, ${s}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${h}; wF++) {\n          int xF = xFCorner + wF * ${l};\n\n          if (xF < 0 || xF >= ${t.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${c};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${f}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===m}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${f}) *\n                  getW(wF, wR, wC, ${f}, d2);\n              } else if (${2===m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${f}),\n                  getX(batch, xF, xR, xC, ${f} + 1),\n                  getX(batch, xF, xR, xC, ${f} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${f}, d2),\n                  getW(wF, wR, wC, ${f} + 1, d2),\n                  getW(wF, wR, wC, ${f} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LV{constructor(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=t,this.enableShapeUniforms=jn(this.outputShape.length);const{dataFormat:s}=e,r=bn(),o="channelsLast"===s,a=o?0:1,i=o?1:2,l=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${t[1]} && pos < ${t[0]}) {`;let u="";for(let c=0;c<=1;c++)for(let h=0;h<=1;h++)u+=`\n          blockIndex = rc.y + ${h};\n          pos = rc.x + ${c};\n\n          ${l}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${a}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${o}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*c+h}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*c+h}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function Vw({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const l=n.shape,u=s.texData.get(n.dataId),p="channelsLast"===e.dataFormat;let g;const y=[];if((1!=l[0]*l[1]*l[2]&&1!==e.outChannels||!(e.inChannels>Ew))&&u.isPacked&&p&&null!=u.texture&&l[2]%2!=0&&je(u.shape.slice(-3),l.slice(-3))){const I={dataId:n.dataId,shape:[1,l[0]*l[1]*(l[2]+1),e.inChannels],dtype:n.dtype},k=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,C(mc(u.shape,I.shape),()=>`packed reshape ${u.shape} to ${I.shape} isn't free`);const S=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}});y.push(S);const T=Sc({a:I,b:S,backend:s,transposeA:!1,transposeB:!1,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a}),_=s.texData.get(T.dataId);C(_.isPacked,()=>"batchMatMul result is expected to be packed"),u.shape=k,_.shape=e.outShape,g=Fn({inputs:{x:T},backend:s}),g.shape=e.outShape,y.push(T)}else{const I=fe({inputs:{x:n},backend:s,attrs:{shape:[1,p?l[0]*l[1]*l[2]:l[0]*l[2]*l[3],e.inChannels]}}),k=fe({inputs:{x:t},backend:s,attrs:{shape:[1,e.inChannels,e.outChannels]}}),S=Sc({a:I,b:k,transposeA:!1,transposeB:!1,backend:s,bias:r,activation:i,preluActivationWeights:o,leakyreluAlpha:a});g=fe({inputs:{x:S},backend:s,attrs:{shape:e.outShape}}),y.push(I),y.push(k),y.push(S)}for(const w of y)s.disposeIntermediateTensorInfo(w);return g}function Ww({x:n,filter:t,convInfo:e,backend:s,bias:r=null,preluActivationWeights:o=null,leakyreluAlpha:a=0,activation:i=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:d,dataFormat:p}=e,f="channelsLast"===p,m=l*u*c,g=d*h,y=[m,g],w=[],I=fe({inputs:{x:n},backend:s,attrs:{shape:n.shape.slice(1)}}),k=fe({inputs:{x:t},backend:s,attrs:{shape:[1,m,q(t.shape)/m]}});w.push(I),w.push(k);const S=new LV(y,e),_=s.runWebGLProgram(S,[I],"float32",[I.shape,[e.padInfo.top,e.padInfo.left],[e.strideHeight,e.strideWidth],[e.dilationHeight,e.dilationWidth],[e.inChannels],[e.filterWidth*e.inChannels],[e.outWidth]]),E=fe({inputs:{x:_},backend:s,attrs:{shape:[1,y[0],y[1]]}});w.push(_),w.push(E);const M=null!=r,B=null!=o,V="leakyrelu"===i,j=i?Cc(i,!0):null,G=new Nw(E.shape,k.shape,[1,g,e.outChannels],!0,!1,M,j,B,V),W=[E,k];if(r&&W.push(r),B&&W.push(o),V){const te=s.makeTensorInfo([],"float32",Zs(a,"float32"));W.push(te),w.push(te)}const Z=s.runWebGLProgram(G,W,"float32"),Q=fe({inputs:{x:Z},backend:s,attrs:{shape:f?[1,d,h,e.outChannels]:[1,e.outChannels,d,h]}});w.push(Z);for(const te of w)s.disposeIntermediateTensorInfo(te);return Q}const zV={kernelName:qi,backendName:"webgl",kernelFunc:function PV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Ls(l),d=tn(r.shape,o.shape,a,u,i,c,!1,h);let p;if(1!==d.filterHeight||1!==d.filterWidth||1!==d.dilationHeight||1!==d.dilationWidth||1!==d.strideHeight||1!==d.strideWidth||"SAME"!==d.padInfo.type&&"VALID"!==d.padInfo.type)if(X().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])p=Ww({x:r,filter:o,convInfo:d,backend:e});else{const m=new Bw(d);p=e.runWebGLProgram(m,[r,o],"float32")}else p=Vw({x:r,filter:o,convInfo:d,backend:e});const f=fe({inputs:{x:p},backend:e,attrs:{shape:d.outShape}});return e.disposeIntermediateTensorInfo(p),f}};class MV{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              if (${"channelsLast"===t.dataFormat}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BV{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,a="channelsLast"===t.dataFormat;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${a?3:1}];\n\n        ivec2 dyCorner = ivec2(coords[${a?1:2}], coords[${a?2:3}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n\n              if (${a}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class VV{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yF = 0; yF < ${t.outDepth}; yF++) {\n            int xF = wF + yF * ${t.strideDepth} - ${t.padInfo.front};\n\n            if (xF < 0 || xF >= ${t.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${t.outHeight}; yR++) {\n              int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n              if (xR < 0 || xR >= ${t.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${t.outWidth}; yC++) {\n                int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n                if (xC < 0 || xC >= ${t.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WV{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterDepth,s=t.filterHeight,r=t.filterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${e-1-t.padInfo.front}, ${s-1-t.padInfo.top}, ${r-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${e}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${t.strideDepth}.0;\n\n          if (dyF < 0.0 || dyF >= ${t.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${e} - 1 - wF;\n\n          for (int wR = 0; wR < ${s}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${s} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${t.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const GV={kernelName:jc,backendName:"webgl",kernelFunc:function UV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Ls(l),d=tn(r.shape,c,a,1,i,u,!1,h),p=new MV(d);return e.runWebGLProgram(p,[r,o],"float32")}},jV={kernelName:Xi,backendName:"webgl",kernelFunc:function HV(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{inputShape:a,strides:i,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Ls(u),d=tn(a,o.shape,i,1,l,c,!1,h),p=new BV(d);return e.runWebGLProgram(p,[r,o],"float32")}},qV={kernelName:Yi,backendName:"webgl",kernelFunc:function KV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=sr(r.shape,o.shape,a,l,i),c=new OV(u);return e.runWebGLProgram(c,[r,o],"float32")}},YV={kernelName:Kc,backendName:"webgl",kernelFunc:function XV(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,pad:i,filterShape:l}=s,u=sr(r.shape,l,a,1,i),c=new VV(u);return e.runWebGLProgram(c,[r,o],"float32")}},JV={kernelName:qc,backendName:"webgl",kernelFunc:function ZV(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{pad:a,strides:i,inputShape:l}=s,u=sr(l,o.shape,i,1,a),c=new WV(u);return e.runWebGLProgram(c,[r,o],"float32")}},eW=Ye({opSnippet:kw+"\n  return cos(x);\n"}),tW={kernelName:ra,backendName:"webgl",kernelFunc:eW},nW=Ye({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),sW={kernelName:oa,backendName:"webgl",kernelFunc:nW};class rW{constructor(t,e,s,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[a,i,l,u]=t,[c]=e,[h,d]=s;this.outputShape=[c,h,d,u];const p="bilinear"===r?1:0,[f,m]=[i-1+".0",l-1+".0"],[g,y,x]=h>1?[""+(i-1)/(h-1),"(y2-y1) * height_ratio",`y1*${f} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${f}`],[b,w,I]=d>1?[""+(l-1)/(d-1),"(x2-x1) * width_ratio",`x1*${m} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${m}`];this.userCode=`\n      const float height_ratio = float(${g});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${a}) {\n          return;\n        }\n\n        float height_scale = ${y};\n        float width_scale = ${w};\n\n        float in_y = ${x};\n        if( in_y < 0.0 || in_y > ${f} ) {\n          setOutput(float(${o}));\n          return;\n        }\n        float in_x = ${I};\n        if( in_x < 0.0 || in_x > ${m} ) {\n          setOutput(float(${o}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const oW={kernelName:Xc,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{image:r,boxes:o,boxInd:a}=t,{cropSize:i,method:l,extrapolationValue:u}=s,c=new rW(r.shape,o.shape,i,l,u);return e.runWebGLProgram(c,[r,o,a],"float32")}};class Uw{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}],this.outputShape=t;const r=t.length,o=e?"0.0":`getX(${Gw(r,"coords")})`,a=t[t.length-1];let i="",l="";e?(i=s?"end != "+(a-1):"end != 0",l=s?"end + 1":"end - 1"):(i=s?`end + pow2 < ${a}`:"end >= pow2",l=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${ht(r)} coords = getOutputCoords();\n        int end = ${Hw(r,"coords")};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${i}) {\n          int idx = ${l};\n          ${Hw(r,"coords")} = idx;\n          val += getX(${Gw(r,"coords")});\n        }\n        setOutput(val);\n      }\n    `}}function Gw(n,t){if(1===n)return`${t}`;if(2===n)return`${t}.x, ${t}.y`;if(3===n)return`${t}.x, ${t}.y, ${t}.z`;if(4===n)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw Error(`Cumulative sum for rank ${n} is not yet supported`)}function Hw(n,t){if(1===n)return`${t}`;if(2===n)return`${t}.y`;if(3===n)return`${t}.z`;if(4===n)return`${t}.w`;throw Error(`Cumulative sum for rank ${n} is not yet supported`)}const iW={kernelName:Zi,backendName:"webgl",kernelFunc:function aW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,exclusive:a,reverse:i}=s,l=r.shape.length,u=Dt([o],l);let c=r;null!=u&&(c=vn({inputs:{x:r},backend:e,attrs:{perm:u}}));const h=zt(1,l)[0];if(h!==l-1)throw new Error(`WebGL cumsum shader expects an inner-most axis=${r.shape.length-1} but got axis=${o}`);const d=c.shape[h];let p=Fn({inputs:{x:c},backend:e});for(let f=0;f<=Math.ceil(Math.log2(d))-1;f++){const m=new Uw(c.shape,!1,i),y=p;p=e.runWebGLProgram(m,[p],p.dtype,[[f]]),e.disposeIntermediateTensorInfo(y)}if(a){const f=new Uw(c.shape,a,i),m=p;p=e.runWebGLProgram(f,[p],p.dtype),e.disposeIntermediateTensorInfo(m)}if(null!=u){const m=vn({inputs:{x:p},backend:e,attrs:{perm:go(u)}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(c),m}return p}},uW={kernelName:Yc,backendName:"webgl",kernelFunc:function lW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,weights:o}=t,{size:a,binaryOutput:i}=s;if(1===r.shape.length){const l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=cw(l,u,o.dtype,o.shape,a);return e.makeTensorInfo([a],o.dtype,c)}if(2===r.shape.length){const l=e.bufferSync(r),u=e.bufferSync(o),c=Nz(l,u,a,i);return e.makeTensorInfo(c.shape,o.dtype,c.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${r.shape.length}.`)}};class cW{constructor(t,e,s){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=s,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${e};\n      int offset_h = imod(h, ${e});\n      int in_w = w / ${e};\n      int offset_w = imod(w, ${e});\n      int offset_d = (offset_h * ${e} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const dW={kernelName:Zc,backendName:"webgl",kernelFunc:function hW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockSize:o,dataFormat:a}=s;C(o>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${o}`);const i=r.shape[0],h=("NHWC"===a?r.shape[1]:r.shape[2])*o,d=("NHWC"===a?r.shape[2]:r.shape[3])*o,p=("NHWC"===a?r.shape[3]:r.shape[1])/(o*o),m=new cW("NHWC"===a?[i,h,d,p]:[i,p,h,d],o,a);return e.runWebGLProgram(m,[r],r.dtype)}};class jw{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=jn(this.outputShape.length);const a=t.filterHeight,i=t.filterWidth,l=t.outChannels/t.inChannels;let u="",c="";s&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`\n          float activation(float x) {\n            ${s}\n          }\n        `,c="result = activation(result);");const h=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${l};\n        int q = d2 - d1 * ${l};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${a}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${h}\n        ${c}\n        setOutput(result);\n      }\n    `}}class Kw{constructor(t,e=!1,s=null,r=!1,o=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=t.outShape,this.enableShapeUniforms=jn(this.outputShape.length);const a=t.outChannels/t.inChannels,i=t.padInfo.left,l=t.strideWidth,u=t.dilationWidth,c=t.filterHeight,h=t.filterWidth,d=h;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let y=0;y<h;y++)p+=`\n          vec4 xTexelC${2*y};\n          int xTexelC${2*y}Ready;\n          vec4 xTexelC${2*y+1};\n          int xTexelC${2*y+1}Ready;\n          vec4 xC${y};`;for(let y=0;y<c;y++){for(let x=0;x<h;x++)p+=`\n          xTexelC${2*x} = vec4(0.0);\n          xTexelC${2*x}Ready = 0;\n          xTexelC${2*x+1} = vec4(0.0);\n          xTexelC${2*x+1}Ready = 0;\n          xC${x} = vec4(0.0);`;p+=`\n        xR = xRCorner + ${y} * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      `;for(let x=0;x<(d+1)/2;x++){const b=2*x;if(p+=`\n          xC = xCCorner + ${b*u};\n          `,1===l){if(b<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n              `,p+=1===u&&b>0?`\n                xC${b} = vec4(xTexelC${b-2}.zw, xTexelC${b}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);\n                  } else {\n                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xC${b} = xTexelC${b};\n                `,b+1<h)){const w=i%2==0?Pt(u):u;u%2==0&&i%2==1||u%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${w};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                    xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${b+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${b+1}Ready = 1;\n                  }\n                  `,u>1&&(p+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                      xTexelC${b} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${b}Ready = 1;\n                    }\n                    `),p+=`\n                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.xy);\n                  `):p+=1===w?`\n                    xC${b+1} = xTexelC${b};\n                    `:`\n                    xCOffset = xC + ${w};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                      xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${b+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${b+1}Ready = 1;\n                    }\n\n                    xC${b+1} = xTexelC${b+1};\n                    `}}else b<h&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n              `,b+1<h&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${b+1} = vec4(xTexelC${b+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {\n                  xTexelC${b} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${b}.zw = vec2(0.0);\n                  }\n                  xTexelC${b}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b+1}Ready == 0) {\n                  xTexelC${b+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${b+1}.zw = vec2(0.);\n                  }\n                  xTexelC${b+1}Ready = 1;\n                }\n\n                xC${b} = vec4(\n                  xTexelC${b}.xy, xTexelC${b+1}.xy);\n              `,b+1<h&&(p+=`\n                  xC${b+1} = vec4(xTexelC${b}.zw, xTexelC${b+1}.zw);\n                `)));b<h&&(p+=`\n            wTexel = getW(${y}, ${b}, d1, q);\n            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);\n          `,b+1<h&&(p+=`\n              wTexel = getW(${y}, ${b+1}, d1, q);\n              dotProd += xC${b+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n        }\n      "}let f="",m="";s&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${s}\n        }`:o?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${s}\n        }`:`vec4 activation(vec4 x) {\n          ${s}\n        }`,m="result = activation(result);");const g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),o&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${a};\n        int q = d2 - d1 * ${a};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const fW={kernelName:Ji,backendName:"webgl",kernelFunc:function pW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),C(un(a,c),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);const h=tn(r.shape,o.shape,a,c,i,u,!0);let d;return d=X().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new Kw(h):new jw(h),e.runWebGLProgram(d,[r,o],"float32",[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]])}};class mW{constructor(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${t.outChannels/t.inChannels} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${t.batchSize}; b++) {\n          for (int yR = 0; yR < ${t.outHeight}; yR++) {\n            int xR = wR + yR * ${t.strideHeight} - ${t.padInfo.top};\n\n            if (xR < 0 || xR >= ${t.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${t.outWidth}; yC++) {\n              int xC = wC + yC * ${t.strideWidth} - ${t.padInfo.left};\n\n              if (xC < 0 || xC >= ${t.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class gW{constructor(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;const e=t.filterHeight,s=t.filterWidth,l=t.outChannels/t.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${e-1-t.padInfo.top}, ${s-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${e}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${e} - 1 - wR;\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${s} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${l}; dm++) {\n              int d2 = d1 * ${l} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const xW={kernelName:Jc,backendName:"webgl",kernelFunc:function yW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,dy:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,filterShape:c}=s,h=tn(r.shape,c,a,i,l,u,!0),d=new mW(h);return e.runWebGLProgram(d,[r,o],"float32")}},wW={kernelName:Qc,backendName:"webgl",kernelFunc:function bW(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,filter:o}=t,{strides:a,dilations:i,pad:l,dimRoundingMode:u,inputShape:c}=s,h=tn(c,o.shape,a,i,l,u,!0),d=new gW(h);return e.runWebGLProgram(d,[r,o],"float32")}};class vW{constructor(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const CW={kernelName:"Diag",backendName:"webgl",kernelFunc:function IW(n){const{inputs:t,backend:e}=n,{x:s}=t,r=[...s.shape,...s.shape],o=q(s.shape),a=fe({inputs:{x:s},backend:e,attrs:{shape:[o]}}),i=new vW(o),l=e.runWebGLProgram(i,[a],a.dtype),u=fe({inputs:{x:l},backend:e,attrs:{shape:r}});return e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(l),u}};class kW{constructor(t){this.variableNames=["x","W"],this.outputShape=t.outShape;const{inHeight:e,inWidth:s,padInfo:r,strideHeight:o,strideWidth:a,filterHeight:i,filterWidth:l,dilationHeight:u,dilationWidth:c}=t,{top:h,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${a});\n      const ivec2 pads = ivec2(${h}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${e}) {\n            for (int w = 0; w < ${l}; w++) {\n              int wIn = wBeg + w * ${c};\n\n              if (wIn >= 0 && wIn < ${s}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const SW={kernelName:Qi,backendName:"webgl",kernelFunc:function NW(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o}=t,{strides:a,pad:i,dilations:l}=s,u=Xa(r.shape,o.shape,a,i,"NHWC",l);let c;const h=new kW(u);c=e.runWebGLProgram(h,[r,o],"float32");const d=fe({inputs:{x:c},backend:e,attrs:{shape:u.outShape}});return e.disposeIntermediateTensorInfo(c),d}},$W={kernelName:nh,backendName:"webgl",kernelFunc:function TW(n){const{inputs:t,backend:e,attrs:s}=n,{equation:r}=s,o=t,{allDims:a,summedDims:i,idDims:l}=wp(r,o.length);Ip(a.length,l,o);const{path:u,steps:c}=Cp(i,l),h=c.length;let d=null,p=a.length;const f=[];for(let m=0;m<h;++m){for(const g of c[m]){const{permutationIndices:y,expandDims:x}=vp(p,l[g]);let b;kp(y)?b=o[g]:(b=vn({inputs:{x:o[g]},backend:e,attrs:{perm:y}}),f.push(b));const w=b.shape.slice();for(let I=0;I<x.length;++I)w.splice(x[I],0,1);je(b.shape,w)||(b=fe({inputs:{x:b},backend:e,attrs:{shape:w}}),f.push(b)),null===d?d=b:(d=vm({inputs:{a:b,b:d},backend:e}),f.push(d))}m<h-1&&(u[m]>=0&&(d=Nc({inputs:{x:d},backend:e,attrs:{axis:u[m]-(a.length-p),keepDims:!1}}),f.push(d)),p--)}for(const m of f)m!==d&&e.disposeIntermediateTensorInfo(m);return d}},_W=Ye({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),EW={kernelName:ia,backendName:"webgl",kernelFunc:_W},RW={kernelName:sh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e}=n,{dy:s,y:r}=t,o=X().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ri("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,r.shape):new Bo("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,r.shape);return e.runWebGLProgram(o,[s,r],s.dtype)}},FW=hn({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:$z}),OW={kernelName:el,backendName:"webgl",kernelFunc:FW},PW=Ye({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${dp};\n  float a1 = ${pp};\n  float a2 = ${fp};\n  float a3 = ${mp};\n  float a4 = ${gp};\n  float a5 = ${yp};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),zW={kernelName:la,backendName:"webgl",kernelFunc:PW},qw="return exp(x);",Xw=Ye({opSnippet:qw,packedOpSnippet:qw,cpuKernelImpl:_z}),MW={kernelName:ua,backendName:"webgl",kernelFunc:Xw};function Nm(n){const{inputs:t,attrs:e,backend:s}=n,{dim:r}=e,{input:o}=t,a=o.shape.length,i=o.shape.slice();let l=r;return r<0&&(C(-(a+1)<=r,()=>`Axis must be in the interval [${-(a+1)}, ${a}]`),l=a+r+1),i.splice(l,0,1),fe({inputs:{x:o},backend:s,attrs:{shape:i}})}const BW={kernelName:tl,backendName:"webgl",kernelFunc:Nm},Yw="return exp(x) - 1.0;",VW=Ye({opSnippet:Yw,packedOpSnippet:Yw,cpuKernelImpl:Ez}),WW={kernelName:ca,backendName:"webgl",kernelFunc:VW};class Zw{constructor(t,e,s){this.variableNames=["real","imag"];const r=e[1];this.outputShape=e;const o=s?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,a=s?`${r}.0`:"1.0";let i;if("real"===t)i="return real * expR - imag * expI;";else{if("imag"!==t)throw new Error(`FFT component must be either "real" or "imag", got ${t}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${o};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${a};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function Jw(n,t,e){const s=e.texData.get(n.dataId),r=q(n.shape),o=n.shape[n.shape.length-1],i=fe({inputs:{x:n},backend:e,attrs:{shape:[r/o,o]}}),l=i.shape,u=new Zw("real",l,t),c=new Zw("imag",l,t),h=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:l},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:l}],d=e.runWebGLProgram(u,h,"float32"),p=e.runWebGLProgram(c,h,"float32"),f=br({inputs:{real:d,imag:p},backend:e});e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p);const m=fe({inputs:{x:f},backend:e,attrs:{shape:n.shape}});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(f),m}const GW={kernelName:"FFT",backendName:"webgl",kernelFunc:function UW(n){const{inputs:t,backend:e}=n,{input:s}=t;return Jw(s,!1,e)}};class HW{constructor(t,e){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function Li(n){const{backend:t,attrs:e}=n,{shape:s,value:r}=e;let{dtype:o}=e;if(o=o||Ho(r),"string"===o){const a=In(o,q(s));return a.fill(r),t.makeTensorInfo(s,o,a)}{const a=new HW(s,r);return t.runWebGLProgram(a,[],o,[[r]])}}const jW={kernelName:oh,backendName:"webgl",kernelFunc:Li};class KW{constructor(t){this.variableNames=["Image"],this.outputShape=[];const e=t[2];this.outputShape=t,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${e} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${e}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const qW={kernelName:ah,backendName:"webgl",kernelFunc:({inputs:n,backend:t})=>{const{image:e}=n,s=t,r=new KW(e.shape);return s.runWebGLProgram(r,[e],e.dtype)}},Qw="return floor(x);",XW=Ye({opSnippet:Qw,packedOpSnippet:Qw,cpuKernelImpl:Az}),YW={kernelName:ha,backendName:"webgl",kernelFunc:XW},ZW=hn({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),JW={kernelName:da,backendName:"webgl",kernelFunc:ZW};class QW{constructor(t){this.variableNames=["A"];const e=bn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${s}.0);\n\n        vec4 values = ${e.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class e4{constructor(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const e=bn(),[s,r]=t;this.outputShape=t,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${s}.0);\n            vec4 values = ${e.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${e.output} = result;\n      }\n    `}}const t4={kernelName:zh,backendName:"webgl",kernelFunc:function n4(n){const{inputs:t,backend:e,attrs:s}=n;let{pixels:r}=t;const{numChannels:o}=s,a=typeof HTMLVideoElement<"u"&&r instanceof HTMLVideoElement,i=typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement,[l,u]=a?[r.videoWidth,r.videoHeight]:[r.width,r.height],c=[u,l],h=[u,l,o];(i||a)&&(null==Uo&&(Uo=document.createElement("canvas").getContext("2d")),Uo.canvas.width=l,Uo.canvas.height=u,Uo.drawImage(r,0,0,l,u),r=Uo.canvas);const d=e.makeTensorInfo(c,"int32");e.texData.get(d.dataId).usage=Rn.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(d.dataId),r);const p=X().getBool("WEBGL_PACK")?new e4(h):new QW(h),f=e.runWebGLProgram(p,[d],"int32");return e.disposeData(d.dataId),f}};let Uo;const r4={kernelName:Bl,backendName:"webgl",kernelFunc:function s4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:d,activation:p,leakyreluAlpha:f}=s,m=Ls(c),g=tn(r.shape,o.shape,l,h,u,d,!1,m);let y;const x=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(X().getBool("WEBGL_CONV_IM2COL")&&1===r.shape[0])y=Ww({x:r,filter:o,convInfo:g,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});else{const w=null!=a,I=null!=i,k="leakyrelu"===p,S=p?Cc(p,!1):null,T=new Bw(g,w,S,I,k),_=[r,o];if(a&&_.push(a),i&&_.push(i),k){const E=e.makeTensorInfo([],"float32",Zs(f,"float32"));_.push(E),x.push(E)}y=e.runWebGLProgram(T,_,"float32")}else y=Vw({x:r,filter:o,convInfo:g,backend:e,bias:a,activation:p,preluActivationWeights:i,leakyreluAlpha:f});const b=fe({inputs:{x:y},backend:e,attrs:{shape:g.outShape}});return x.push(y),x.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},a4={kernelName:Vl,backendName:"webgl",kernelFunc:function o4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,filter:o,bias:a,preluActivationWeights:i}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:d,leakyreluAlpha:p}=s,f=[];let m=c;null==m&&(m=[1,1]),C(un(l,m),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`);const g=tn(r.shape,o.shape,l,m,u,h,!0),y=X().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,x=d?Cc(d,y):null,b=[r,o],w=null!=a,I=null!=i,k="leakyrelu"===d;if(w&&b.push(a),I&&b.push(i),k){const E=e.makeTensorInfo([],"float32",Zs(p,"float32"));b.push(E),f.push(E)}let S;S=y?new Kw(g,w,x,I,k):new jw(g,w,x,I,k);const _=e.runWebGLProgram(S,b,"float32",[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]]);return f.forEach(E=>e.disposeIntermediateTensorInfo(E)),_}};class i4{constructor(t,e,s){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=s;const r=ht(e.length),o=ht(s.length);this.userCode=`\n        ${r} strides = ${r}(${this.strides});\n         void main() {\n          ${o} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${this.sliceDim>1?"strides[j]":"strides"};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const u4={kernelName:ih,backendName:"webgl",kernelFunc:function l4(n){const{inputs:t,backend:e}=n,{params:s,indices:r}=t,o=r.shape,a=o[o.length-1],i=q(s.shape),[l,u,c,h]=hp(s,r),d=fe({inputs:{x:r},backend:e,attrs:{shape:[u,a]}}),p=fe({inputs:{x:s},backend:e,attrs:{shape:[q(s.shape)/c,c]}});if(e.shouldExecuteOnCPU([s,r])||"string"===s.dtype){const y=e.readSync(r.dataId),x=e.bufferSync(s),b=Dz(y,x,s.dtype,u,a,c,h,s.shape,i);return e.makeTensorInfo(l,s.dtype,b.values)}const f=new i4(a,h,[u,c]),m=e.runWebGLProgram(f,[p,d],p.dtype),g=fe({inputs:{x:m},backend:e,attrs:{shape:l}});return e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(m),g}};class c4{constructor(t,e){this.variableNames=["A","indices"],this.outputShape=e,this.rank=e.length;const s=ht(this.rank),r=function h4(n,t){const e=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let r=0;r<n.length;r++)s.push(2===r?"int(getIndices(resRC.x, resRC.z))":`${e[r]}`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${r}));\n      }\n    `}}function ev(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,indices:o}=t,{axis:a,batchDims:i}=s,u=Sp(r,o,Me(a,r.shape)[0],i),c=q(o.shape),h=[],d=fe({inputs:{x:r},backend:e,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),p=fe({inputs:{x:o},backend:e,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(d),h.push(p);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(e.shouldExecuteOnCPU([r,o])||"string"===r.dtype){const x=e.bufferSync(p),b=e.bufferSync(d),w=Rz(b,x,f);return h.forEach(I=>e.disposeIntermediateTensorInfo(I)),e.makeTensorInfo(u.outputShape,w.dtype,w.values)}const m=new c4(d.shape,f),g=e.runWebGLProgram(m,[d,p],d.dtype);h.push(g);const y=fe({inputs:{x:g},backend:e,attrs:{shape:u.outputShape}});return h.forEach(x=>e.disposeIntermediateTensorInfo(x)),y}const d4={kernelName:sl,backendName:"webgl",kernelFunc:ev},p4=hn({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:Fz,dtype:"bool"}),f4={kernelName:rl,backendName:"webgl",kernelFunc:p4},m4=hn({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:Oz}),g4={kernelName:pa,backendName:"webgl",kernelFunc:m4},x4={kernelName:lh,backendName:"webgl",kernelFunc:function y4(n){const{inputs:t,backend:e}=n,{input:s}=t;return Jw(s,!0,e)}},b4=Ye({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),w4={kernelName:ma,backendName:"webgl",kernelFunc:b4},v4=Ye({opSnippet:"return float(isinf(x));",dtype:"bool"}),I4={kernelName:ga,backendName:"webgl",kernelFunc:v4},C4=Ye({opSnippet:"return float(isnan(x));",dtype:"bool"}),k4={kernelName:ya,backendName:"webgl",kernelFunc:C4},N4=hn({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:Lz,dtype:"bool"}),S4={kernelName:al,backendName:"webgl",kernelFunc:N4},T4=hn({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:Pz,dtype:"bool"}),$4={kernelName:il,backendName:"webgl",kernelFunc:T4},E4={kernelName:ch,backendName:"webgl",kernelFunc:function _4(n){const{backend:t,attrs:e}=n,{start:s,stop:r,num:o}=e,a=zz(s,r,o);return t.makeTensorInfo([a.length],"float32",a)}},A4=Ye({opSnippet:"if (x < 0.0) return NAN;\n  return log(x);",packedOpSnippet:"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:Mz}),D4={kernelName:xa,backendName:"webgl",kernelFunc:A4},R4=Ye({opSnippet:"return log(1.0 + x);"}),F4={kernelName:ba,backendName:"webgl",kernelFunc:R4},O4=hn({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),L4={kernelName:ll,backendName:"webgl",kernelFunc:O4},P4=Ye({opSnippet:"return float(!(x >= 1.0));"}),z4={kernelName:ul,backendName:"webgl",kernelFunc:P4},M4=hn({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),B4={kernelName:cl,backendName:"webgl",kernelFunc:M4};class V4{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[];const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${a}; j <= ${a}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${l};\n        setOutput(val);\n      }\n    `}}class W4{constructor(t,e,s,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const a=e,i=t[3]-1;let l;this.outputShape=t;const u=`float(${s}) + float(${r}) * sum`;l=.5===o?`inversesqrt(${u})`:1===o?`1.0/(${u})`:`exp(log(${u}) * float(-${o}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${a};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${a}; j <= ${a}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${l};\n        setOutput(result);\n      }\n    `}}const U4={kernelName:hl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{depthRadius:o,bias:a,alpha:i,beta:l}=s,u=X().getBool("WEBGL_PACK_NORMALIZATION")?new W4(r.shape,o,a,i,l):new V4(r.shape,o,a,i,l);return e.runWebGLProgram(u,[r],r.dtype)}};class G4{constructor(t,e,s,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=s,this.alpha=r,this.beta=o,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${e})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${e} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${s});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${o})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${o});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const H4={kernelName:hh,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r,y:o,dy:a}=t,{depthRadius:i,bias:l,alpha:u,beta:c}=s,h=new G4(r.shape,i,l,u,c);return e.runWebGLProgram(h,[r,o,a],r.dtype)}};function tv(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reductionIndices:o,keepDims:a}=s,i=r.shape.length,l=Me(o,r.shape);let u=l;const c=Dt(u,i),h=null!=c,d=e.shouldExecuteOnCPU([r]);let p=r;if(h){if(d){const b=e.texData.get(p.dataId).values,w=new Array(i);for(let S=0;S<w.length;S++)w[S]=r.shape[c[S]];const I=wm(b,r.shape,r.dtype,c,w);p=e.makeTensorInfo(w,r.dtype),e.texData.get(p.dataId).values=I}else p=kc(r,c,e);u=zt(u.length,i)}cn("max",u,i);const[f,m]=nn(p.shape,u);let y,g=f;if(a&&(g=At(f,l)),d){const b=e.texData.get(p.dataId).values,w=Bz(b,q(m),g,r.dtype);y=e.makeTensorInfo(g,r.dtype),e.texData.get(y.dataId).values=w}else y=function j4(n,t,e,s){const r=q(t),i=fe({inputs:{x:n},attrs:{shape:[q(n.shape)/r,r]},backend:s}),l=Xr(i,n.dtype,"max",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(p,m,g,e);return h&&e.disposeIntermediateTensorInfo(p),y}const K4={kernelName:dl,backendName:"webgl",kernelFunc:tv},Y4=hn({opSnippet:bw+"\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+Ic+"\n  return result;\n",cpuKernelImpl:Vz}),Z4={kernelName:wa,backendName:"webgl",kernelFunc:Y4},Q4={kernelName:pl,backendName:"webgl",kernelFunc:function J4(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t;Ai(r,"maxPool");const{filterSize:o,strides:a,pad:i,dimRoundingMode:l}=s;C(un(a,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '1'`);const c=Jn(r.shape,o,a,1,i,l);if(1===c.filterWidth&&1===c.filterHeight&&je(c.inShape,c.outShape))return Fn({inputs:{x:r},backend:e});const h=new Fi(c,"max",!1);return e.runWebGLProgram(h,[r],r.dtype)}},tU={kernelName:fl,backendName:"webgl",kernelFunc:function eU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{filterSize:o,strides:a,pad:i,dataFormat:l,dimRoundingMode:u}=s,h=Os(r.shape,o,a,[1,1,1],i,u,l),d=new Im(h,"max",!1);return e.runWebGLProgram(d,[r],r.dtype)}};class nU{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const o=t.effectiveFilterHeight,a=t.effectiveFilterWidth;this.userCode=`\n      const ivec2 pads = ivec2(${o-1-t.padInfo.top}, ${a-1-t.padInfo.left});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n          wR += ${t.dilationHeight}) {\n          float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n          if (dyR < 0.0 || dyR >= ${t.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${a}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n            if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${o*a-1} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${a} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class sU{constructor(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;const l=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth;this.userCode=`\n      const ivec3 pads = ivec3(${l-1-t.padInfo.front}, ${u-1-t.padInfo.top}, ${c-1-t.padInfo.left});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${l};\n           wD += ${t.dilationDepth}) {\n          float dyD = float(dyDCorner + wD) / ${t.strideDepth}.0;\n\n          if (dyD < 0.0 || dyD >= ${t.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${t.dilationHeight}) {\n            float dyR = float(dyRCorner + wR) / ${t.strideHeight}.0;\n\n            if (dyR < 0.0 || dyR >= ${t.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${c};\n                wC += ${t.dilationWidth}) {\n              float dyC = float(dyCCorner + wC) / ${t.strideWidth}.0;\n\n              if (dyC < 0.0 || dyC >= ${t.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${l*u*c-1} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${c} +\n                  wR * ${c} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const oU={kernelName:ph,backendName:"webgl",kernelFunc:function rU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o}=t,a=o,{filterSize:i,strides:l,pad:u,dimRoundingMode:c}=s,d=Os(a.shape,i,l,[1,1,1],u,c),p=new Im(d,"max",!0),f=e.runWebGLProgram(p,[a],a.dtype),m=new sU(d),g=e.runWebGLProgram(m,[r,f],a.dtype);return e.disposeIntermediateTensorInfo(f),g}},iU={kernelName:dh,backendName:"webgl",kernelFunc:function aU(n){const{inputs:t,backend:e,attrs:s}=n,{dy:r,input:o,output:a}=t,i=o;Ai([o,a],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,d=Jn(i.shape,l,u,1,c,h),f=new Fi(d,"max",!0),m=e.runWebGLProgram(f,[i],i.dtype),g=new nU(d),y=e.runWebGLProgram(g,[r,m],i.dtype);return e.disposeIntermediateTensorInfo(m),y}},uU={kernelName:fh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{filterSize:r,strides:o,pad:a,includeBatchInIndex:i}=t,l=e;C(4===s.shape.length,()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`);const u=[1,1];C(un(o,u),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '${u}'`);const c=Jn(s.shape,r,o,u,a),[h,d]=function lU(n,t,e,s){let r=new Fi(e,"max",!1);const o=s.runWebGLProgram(r,[n],"float32");return r=new Fi(e,"max",!0,!0,t),[o,s.runWebGLProgram(r,[n],"float32")]}(s,i,c,l);return[h,d]}},hU={kernelName:ml,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{x:s}=n,{keepDims:r,axis:o}=t,a=e,i=s.shape.length,l=Me(o,s.shape);let u=l;const c=Dt(u,i),h=null!=c,d=a.shouldExecuteOnCPU([s]),p=[];let f=s;if(h){if(d){const w=a.texData.get(f.dataId).values,I=new Array(i);for(let T=0;T<I.length;T++)I[T]=s.shape[c[T]];const k=wm(w,s.shape,s.dtype,c,I);f=a.makeTensorInfo(I,s.dtype),a.texData.get(f.dataId).values=k}else f=kc(s,c,a);p.push(f),u=zt(u.length,i)}cn("sum",u,i);const[m,g]=nn(f.shape,u);let y=m;r&&(y=At(m,l));const x=function cU(n,t,e,s){const r=q(t),i=fe({inputs:{x:n},attrs:{shape:[q(n.shape)/r,r]},backend:s}),l=Xr(i,"float32","mean",s),u=fe({inputs:{x:l},attrs:{shape:e},backend:s});return s.disposeIntermediateTensorInfo(i),s.disposeIntermediateTensorInfo(l),u}(f,g,y,a);for(const b of p)a.disposeIntermediateTensorInfo(b);return x}},pU={kernelName:gl,backendName:"webgl",kernelFunc:function dU(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=Me(o,r.shape);let u=l;const c=Dt(u,i);let h=r;null!=c&&(h=vn({inputs:{x:r},backend:e,attrs:{perm:c}}),u=zt(u.length,r.shape.length)),cn("min",u,i);const[d,p]=nn(h.shape,u),m=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,q(p)]}}),g=Xr(m,m.dtype,"min",e);let y;return y=fe(a?{inputs:{x:g},backend:e,attrs:{shape:At(d,l)}}:{inputs:{x:g},backend:e,attrs:{shape:d}}),e.disposeIntermediateTensorInfo(m),e.disposeIntermediateTensorInfo(g),null!=c&&e.disposeIntermediateTensorInfo(h),y}},gU=hn({opSnippet:bw+"\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  "+Ic+"\n  return result;\n",cpuKernelImpl:Wz}),yU={kernelName:va,backendName:"webgl",kernelFunc:gU};class xU{constructor(t,e,s){this.variableNames=["x"],this.outputShape=e.map((c,h)=>c[0]+t[h]+c[1]);const r=t.length,o=ht(r),a=e.map(c=>c[0]).join(","),i=e.map((c,h)=>c[0]+t[h]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===s?0:1;this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${o} coords = outC - start;\n        setOutput(getX(${l}));\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class bU{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((f,m)=>f[0]+t[m]+f[1]);const r=t.length,o=ht(r),a=e.map(f=>f[0]).join(","),i=e.map((f,m)=>f[0]+t[m]).join(","),l=wn("rc",r),u=wn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===s?0:1;let p="";if(1===r){const f=`\n        ${o} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n      `}else{const f=`\n        ${o} source = rc;\n        ${o} lt = ${o}(lessThan(source, start));\n        ${o} gte = ${o}(greaterThanEqual(source, end));\n        ${o} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${o} rc = outputLoc;\n        ${f}\n        result[0] = getChannel(getX(${u.join()}), ${h});\n        ${l[r-1]} += 1;\n        if(${c}) {\n          ${f}\n          result[1] = getChannel(getX(${u.join()}), ${h});\n        }\n        rc = outputLoc;\n        ${l[r-2]} += 1;\n        if(${l[r-2]} < ${this.outputShape[r-2]}) {\n          ${f}\n          result[2] = getChannel(getX(${u.join()}), ${h});\n          ${l[r-1]} += 1;\n          if(${c}) {\n            ${f}\n            result[3] = getChannel(getX(${u.join()}), ${h});\n          }\n        }\n      `}this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const wU={kernelName:yl,backendName:"webgl",kernelFunc:({inputs:n,backend:t,attrs:e})=>{const{x:s}=n,{paddings:r,mode:o}=e,a=X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new bU(s.shape,r,o):new xU(s.shape,r,o);return t.runWebGLProgram(a,[s],s.dtype)}},CU=hn({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  "+Ic+"\n  return result;\n"}),kU={kernelName:Ia,backendName:"webgl",kernelFunc:CU};class NU{constructor(t,e,s){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[t,s],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${e-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${e-1}));\n      }\n    `}}const nv=hn({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),SU={kernelName:aa,backendName:"webgl",kernelFunc:nv},sv="return a - b;",rv=hn({opSnippet:sv,packedOpSnippet:sv,supportsComplex:!0,cpuKernelImpl:rM}),TU={kernelName:za,backendName:"webgl",kernelFunc:rv};function ov(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{dim:o}=s,a=Me([o],r.shape),i=tv({inputs:{x:r},backend:e,attrs:{reductionIndices:a,keepDims:!1}}),l=At(i.shape,a),u=fe({inputs:{x:i},backend:e,attrs:{shape:l}}),c=rv({inputs:{a:r,b:u},backend:e}),h=Xw({inputs:{x:c},backend:e}),d=Nc({inputs:{x:h},backend:e,attrs:{axis:a,keepDims:!1}}),p=fe({inputs:{x:d},backend:e,attrs:{shape:l}}),f=nv({inputs:{a:h,b:p},backend:e});return e.disposeIntermediateTensorInfo(i),e.disposeIntermediateTensorInfo(u),e.disposeIntermediateTensorInfo(c),e.disposeIntermediateTensorInfo(h),e.disposeIntermediateTensorInfo(d),e.disposeIntermediateTensorInfo(p),f}const $U={kernelName:Fl,backendName:"webgl",kernelFunc:ov},EU={kernelName:mh,backendName:"webgl",kernelFunc:function _U(n){const{inputs:t,backend:e,attrs:s}=n,{logits:r}=t,{numSamples:o,seed:a,normalized:i}=s,l=i?r:ov({inputs:{logits:r},backend:e,attrs:{dim:r.shape.length-1}}),h=new NU(l.shape[0],l.shape[1],o),p=e.runWebGLProgram(h,[l],"int32",[[a]]);return i||e.disposeIntermediateTensorInfo(l),p}},av="return -x;",DU={kernelName:xl,backendName:"webgl",kernelFunc:function AU(n){const{inputs:t,backend:e}=n,{x:s}=t;if(e.shouldExecuteOnCPU([s])){const o=e.texData.get(s.dataId),[a,i]=Gz(o.values,s.shape,s.dtype);return e.makeTensorInfo(i,s.dtype,a)}let r;return r=X().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new Mo(s.shape,av):new xr(s.shape,av),e.runWebGLProgram(r,[s],s.dtype)}},RU=Wd,OU={kernelName:gh,backendName:"webgl",kernelFunc:function FU(n){Cn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l}=s,u=e.readSync(r.dataId),c=e.readSync(o.dataId),{selectedIndices:h}=RU(u,c,a,i,l);return e.makeTensorInfo([h.length],"int32",new Int32Array(h))}},LU=Ud,zU={kernelName:yh,backendName:"webgl",kernelFunc:function PU(n){Cn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,padToMaxOutputSize:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),{selectedIndices:d,validOutputs:p}=LU(c,h,a,i,l,u);return[e.makeTensorInfo([d.length],"int32",new Int32Array(d)),e.makeTensorInfo([],"int32",new Int32Array([p]))]}},MU=Gd,VU={kernelName:xh,backendName:"webgl",kernelFunc:function BU(n){Cn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:e,attrs:s}=n,{boxes:r,scores:o}=t,{maxOutputSize:a,iouThreshold:i,scoreThreshold:l,softNmsSigma:u}=s,c=e.readSync(r.dataId),h=e.readSync(o.dataId),d=a,p=i,f=l,m=u,{selectedIndices:g,selectedScores:y}=MU(c,h,d,p,f,m);return[e.makeTensorInfo([g.length],"int32",new Int32Array(g)),e.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class WU{constructor(t,e,s,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${s}),\n                      float(index == coords.y)));\n      }\n    `}}const UU={kernelName:vl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{indices:r}=t,{depth:o,onValue:a,offValue:i}=s,l=q(r.shape),u=new WU(l,o,a,i),c=fe({inputs:{x:r},backend:e,attrs:{shape:[l]}}),h=e.runWebGLProgram(u,[c],r.dtype);e.disposeIntermediateTensorInfo(c);const p=fe({inputs:{x:h},backend:e,attrs:{shape:[...r.shape,o]}});return e.disposeIntermediateTensorInfo(h),p}};function Ec(n){const{inputs:t,backend:e}=n,{x:s}=t;if("complex64"===s.dtype){const r=Oi({inputs:{input:s},backend:e}),o=Ec({inputs:{x:r},backend:e}),a=_c({inputs:{input:s},backend:e}),i=Ec({inputs:{x:a},backend:e}),l=br({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Li({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:e})}const GU={kernelName:zl,backendName:"webgl",kernelFunc:Ec},HU={kernelName:wl,backendName:"webgl",kernelFunc:function iv(n){const{inputs:t,backend:e}=n,{x:s}=t;if("string"===s.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===s.dtype){const r=Oi({inputs:{input:s},backend:e}),o=iv({inputs:{x:r},backend:e}),a=_c({inputs:{input:s},backend:e}),i=Ec({inputs:{x:a},backend:e}),l=br({inputs:{real:o,imag:i},backend:e});return e.disposeIntermediateTensorInfo(r),e.disposeIntermediateTensorInfo(o),e.disposeIntermediateTensorInfo(a),e.disposeIntermediateTensorInfo(i),l}return Li({attrs:{shape:s.shape,dtype:s.dtype,value:1},backend:e})}},KU={kernelName:Il,backendName:"webgl",kernelFunc:function jU(n){const{inputs:t,backend:e,attrs:s}=n,{axis:r}=s;if(1===t.length)return Nm({inputs:{input:t[0]},backend:e,attrs:{dim:r}});const o=t[0].shape,a=t[0].dtype;t.forEach(c=>{Xn(o,c.shape,"All tensors passed to stack must have matching shapes"),C(a===c.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=Mw({inputs:t.map(c=>{const h=Nm({inputs:{input:c},backend:e,attrs:{dim:r}});return i.push(h),h}),backend:e,attrs:{axis:r}});return i.forEach(c=>e.disposeIntermediateTensorInfo(c)),u}};class qU{constructor(t,e,s){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((u,c)=>u[0]+t[c]+u[1]);const r=t.length,o=ht(r),a=e.map(u=>u[0]).join(","),i=e.map((u,c)=>u[0]+t[c]).join(","),l=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${o} start = ${o}(${a});\n      ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${o} coords = outC - start;\n          setOutput(getX(${l}));\n        }\n      }\n    `:`\n        int start = ${a};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class XU{constructor(t,e,s){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=e.map((m,g)=>m[0]+t[g]+m[1]);const r=t.length,o=ht(r),a=e.map(m=>m[0]).join(","),i=e.map((m,g)=>m[0]+t[g]).join(","),l=wn("rc",r),u=wn("source",r),c=`${l[r-1]} < ${this.outputShape[r-1]}`,h=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${o} rc = outputLoc;`,`${l[r-1]} += 1;\n       if(${c}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${l[r-2]} += 1;\n       if(${l[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${l[r-1]} += 1;\n         if(${c}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let f="";for(let m=0,g=1===r?2:4;m<g;m++)f+=`\n        ${d[m]}\n        if (${p}) {\n          result[${m}] = float(value);\n        } else {\n          ${o} source = rc - start;\n          result[${m}] = getChannel(getX(${u.join()}), ${h});\n        }\n      `;f+=1===r?"} ":"}}",this.userCode=`\n      const ${o} start = ${o}(${a});\n      const ${o} end = ${o}(${i});\n\n      void main() {\n        ${o} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${f}\n        setOutput(result);\n      }\n    `}}const lv=n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{paddings:o,constantValue:a}=s;if(0===q(r.shape))return Li({backend:e,attrs:{shape:o.map((c,h)=>c[0]+r.shape[h]+c[1]),value:a,dtype:r.dtype}});const i=X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new XU(r.shape,o,a):new qU(r.shape,o,a);return e.runWebGLProgram(i,[r],r.dtype,[[a]])},YU={kernelName:Cl,backendName:"webgl",kernelFunc:lv},QU=hn({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  "+Ic+"\n  return result;\n"}),eG={kernelName:ka,backendName:"webgl",kernelFunc:QU},nG={kernelName:bh,backendName:"webgl",kernelFunc:function tG(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{axis:o,keepDims:a}=s,i=r.shape.length,l=[],u=Me(o,r.shape);let c=u;const h=Dt(c,i);let p,d=r;if(null!=h&&(d=vn({inputs:{x:r},backend:e,attrs:{perm:h}}),c=zt(c.length,i),l.push(d)),cn("prod",c,i),e.shouldExecuteOnCPU([d])){const f=e.texData.get(d.dataId).values,{outVals:m,outShape:g,outDtype:y}=jz(d.shape,d.dtype,f,c);p=e.makeTensorInfo(g,y,m)}else{const[f,m]=nn(d.shape,c),g=q(m),y=fe({inputs:{x:d},backend:e,attrs:{shape:[-1,g]}}),b=Xr(y,jh(r.dtype),"prod",e);p=fe({inputs:{x:b},backend:e,attrs:{shape:f}}),l.push(y),l.push(b)}if(a){l.push(p);const f=At(p.shape,u);p=fe({inputs:{x:p},backend:e,attrs:{shape:f}})}return l.forEach(f=>e.disposeIntermediateTensorInfo(f)),p}},uv=n=>{const{backend:t,attrs:e}=n,{start:s,stop:r,step:o,dtype:a}=e,i=Kz(s,r,o,a);return t.makeTensorInfo([i.length],a,i)},sG={kernelName:wh,backendName:"webgl",kernelFunc:uv},rG=Ye({opSnippet:"return 1.0 / x;"}),oG={kernelName:Na,backendName:"webgl",kernelFunc:rG},iG=Ye({opSnippet:ls+"\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),lG={kernelName:Sa,backendName:"webgl",kernelFunc:iG},cG=Ye({opSnippet:ls+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),hG={kernelName:Ta,backendName:"webgl",kernelFunc:cG};class dG{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class pG{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let d;d=o?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const mG={kernelName:Tl,backendName:"webgl",kernelFunc:function fG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=X().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new pG(r.shape,l,u,o,a):new dG(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],"float32")}};class gG{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${o-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const xG={kernelName:Ch,backendName:"webgl",kernelFunc:function yG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new gG(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class bG{constructor(t,e,s,r,o){this.variableNames=["A"],this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${l}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class wG{constructor(t,e,s,r,o){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[a,i,l,u]=t;this.outputShape=[a,e,s,u];const c=[r&&e>1?i-1:i,r&&s>1?l-1:l],h=[r&&e>1?e-1:e,r&&s>1?s-1:s];let p;p=o?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${c[0]/h[0]},\n          ${c[1]/h[1]},\n          ${c[1]/h[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${l}.0,\n                                     ${l}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${r?"0.5":"0.0"})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${s-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const IG={kernelName:Sl,backendName:"webgl",kernelFunc:function vG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r}=t,{alignCorners:o,halfPixelCenters:a,size:i}=s,[l,u]=i,c=X().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new wG(r.shape,l,u,o,a):new bG(r.shape,l,u,o,a);return e.runWebGLProgram(c,[r],r.dtype)}};class CG{constructor(t,e,s){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e;const[,r,o]=e,[,a,i]=t,l=[s&&a>1?r-1:r,s&&i>1?o-1:o],u=[s&&a>1?a-1:a,s&&i>1?i-1:i],c=l[0]/u[0],h=l[1]/u[1],d=1/c,p=1/h,f=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${c});\n        const float widthScale = float(${h});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${f});\n        const int winWidth = int(${m});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${a}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${l[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${l[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${s} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${o}) - 1),\n                ${s} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const NG={kernelName:Ih,backendName:"webgl",kernelFunc:function kG(n){const{inputs:t,backend:e,attrs:s}=n,{images:r,dy:o}=t,{alignCorners:a}=s,i=new CG(o.shape,r.shape,a);return e.runWebGLProgram(i,[o],o.dtype)}};class SG{constructor(t,e){this.variableNames=["x"];const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);if(this.outputShape=t,1===s)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${t[0]} - coord - 1));\n        }\n      `);const o=t.map((i,l)=>(i=>-1!==e.indexOf(i)&&1!==t[i]?`${t[i]} - coords[${i}] - 1`:`coords[${i}]`)(l)).join(","),a=ht(s);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}class TG{constructor(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const s=t.length;if(s>4)throw new Error(`WebGL backend: Reverse of rank-${s} tensor is not yet supported`);this.outputShape=t;const r=wn("rc",s),o=`${r[s-1]} + 1 < ${this.outputShape[s-1]}`,a=`${r[s-2]} + 1 < ${this.outputShape[s-2]}`,i=ht(s);function d(f){const m=t.map((x,b)=>function p(f,m){return-1!==e.indexOf(f)&&1!==t[f]?`${t[f]} - ${m[f]} - 1`:`${m[f]}`}(b,f));return`getChannel(getX(${m.join(",")}), vec2(${m.slice(-2).join(",")}))`}this.userCode=1===s?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${t[0]} - rc - 1),\n            ${t[0]} - rc - 1);\n          if(${o}){\n              result.g = getChannel(getX(${t[0]} - (rc  + 1) - 1),\n                ${t[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function l(f){return d(f)}(r.slice())};\n          if(${o}){\n            result.g = ${function u(f){return f[s-1]="("+f[s-1]+" + 1)",d(f)}(r.slice())};\n          }\n          if(${a}) {\n            result.b = ${function c(f){return f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            if(${o}) {\n              result.a = ${function h(f){return f[s-1]="("+f[s-1]+" + 1)",f[s-2]="("+f[s-2]+" + 1)",d(f)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const _G={kernelName:$l,backendName:"webgl",kernelFunc:function $G(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{dims:o}=s,a=r.shape.length,i=Me(o,r.shape);if(0===a)return Fn({inputs:{x:r},backend:e});const l=X().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new TG(r.shape,i):new SG(r.shape,i);return e.runWebGLProgram(l,[r],r.dtype)}};class EG{constructor(t,e){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const s=t[1],r=t[2];this.outputShape=t;let o="";o="number"==typeof e?`float outputValue = ${e.toFixed(2)};`:`\n        vec3 fill = vec3(${e.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${o}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${s}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const AG={kernelName:Mh,backendName:"webgl",kernelFunc:({inputs:n,attrs:t,backend:e})=>{const{image:s}=n,{radians:r,fillValue:o,center:a}=t,i=e,l=new EG(s.shape,o),[u,c]=lp(a,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(r),Math.cos(r)]];return i.runWebGLProgram(l,[s],s.dtype,h)}},DG=Ye({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),RG={kernelName:$a,backendName:"webgl",kernelFunc:DG},FG=Ye({opSnippet:"return inversesqrt(x);",cpuKernelImpl:qz}),OG={kernelName:_a,backendName:"webgl",kernelFunc:FG};class cv{constructor(t,e,s,r,o,a,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=a;const l=ht(o.length),u=ht(a.length);let c="";1===s?c="i":2===s&&(c="i, j");let d="";1===r?d="i":2===r&&(d="i, coords[1]"),this.userCode=`\n        ${l} strides = ${l}(${o});\n\n        void main() {\n          ${u} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${t}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${e}; j++) {\n              int index = round(getIndices(${c}));\n              flattenedIndex += index * ${e>1?"strides[j]":"strides"};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += getUpdates(${d});\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const PG={kernelName:kh,backendName:"webgl",kernelFunc:function LG(n){const{inputs:t,backend:e,attrs:s}=n,{indices:r,updates:o}=t,{shape:a}=s,{sliceRank:i,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=ci(0,r,a),d=[h/u,u];if(0===h)return e.makeTensorInfo(a,r.dtype);const p=fe({inputs:{x:r},backend:e,attrs:{shape:[l,i]}}),f=fe({inputs:{x:o},backend:e,attrs:{shape:[l,u]}}),m=e.makeTensorInfo([],"float32",new Float32Array([0])),g=new cv(l,i,p.shape.length,f.shape.length,c,d),y=e.runWebGLProgram(g,[f,p,m],f.dtype),x=fe({inputs:{x:y},backend:e,attrs:{shape:a}});return e.disposeIntermediateTensorInfo(p),e.disposeIntermediateTensorInfo(f),e.disposeIntermediateTensorInfo(y),e.disposeIntermediateTensorInfo(m),x}};class zG{constructor(t,e,s){let r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,s>4)throw Error(`Where for rank ${s} is not yet supported`);if(1===s)o="resRC",r="resRC";else{const i=["resRC.x","resRC.y","resRC.z","resRC.w"],l=[],u=[];for(let c=0;c<e.length;c++)u.push(`${i[c]}`),c<t&&l.push(`${i[c]}`);r=l.join(),o=u.join()}const a=ht(s);this.userCode=`\n      void main() {\n        ${a} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${o}));\n        } else {\n          setOutput(getB(${o}));\n        }\n      }\n    `}}const BG={kernelName:_l,backendName:"webgl",kernelFunc:function MG(n){const{inputs:t,backend:e}=n,{condition:s,t:r,e:o}=t,a=new zG(s.shape.length,r.shape,r.shape.length);return e.runWebGLProgram(a,[s,r,o],Ln(r.dtype,o.dtype))}},WG=Ye({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${Su};\n  float scale = ${Tu};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),UG={kernelName:Ea,backendName:"webgl",kernelFunc:WG},hv="return 1.0 / (1.0 + exp(-1.0 * x));",GG=Ye({opSnippet:hv,packedOpSnippet:hv,cpuKernelImpl:Xz}),HG={kernelName:Fa,backendName:"webgl",kernelFunc:GG},jG=Ye({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),KG={kernelName:Ra,backendName:"webgl",kernelFunc:jG},XG=Ye({opSnippet:kw+"\n  return sin(x);\n"}),YG={kernelName:Aa,backendName:"webgl",kernelFunc:XG},ZG=Ye({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),JG={kernelName:Da,backendName:"webgl",kernelFunc:ZG},QG=Ye({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),eH={kernelName:Oa,backendName:"webgl",kernelFunc:QG},tH={kernelName:Dl,backendName:"webgl",kernelFunc:n=>{const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{blockShape:o,paddings:a}=s;C(r.shape.length<=4,()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");const i=o.reduce((y,x)=>y*x),l=[[0,0]];l.push(...a);for(let y=1+o.length;y<r.shape.length;++y)l.push([0,0]);const u=[],c=lv({inputs:{x:r},backend:e,attrs:{paddings:l,constantValue:0}}),h=ii(c.shape,o,i,!1),d=li(h.length,o.length,!1),p=ui(c.shape,o,i,!1),f=fe({inputs:{x:c},backend:e,attrs:{shape:h}}),m=vn({inputs:{x:f},backend:e,attrs:{perm:d}}),g=fe({inputs:{x:m},backend:e,attrs:{shape:p}});return u.push(c),u.push(f),u.push(m),u.forEach(y=>e.disposeIntermediateTensorInfo(y)),g}},sH={kernelName:Nh,backendName:"webgl",kernelFunc:function nH(n){const{inputs:t,backend:e}=n,{indices:s,values:r,denseShape:o,defaultValue:a}=t;if(1!==o.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${o.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==r.shape.length)throw new Error(`Values must be a vector, saw:\n         ${r.shape}`);if(0!==a.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${a.shape}`);const i=e.readSync(s.dataId),l=e.readSync(r.dataId),u=e.readSync(o.dataId),c=e.readSync(a.dataId)[0],[h,d,p,f,m]=Zz(i,s.shape,s.dtype,l,r.dtype,u,c);return[e.makeTensorInfo(d,s.dtype,h),e.makeTensorInfo([d[0]],r.dtype,p),e.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(g=>Number(g)))),e.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},oH={kernelName:Sh,backendName:"webgl",kernelFunc:function rH(n){const{inputs:t,backend:e}=n,{inputIndices:s,inputShape:r,newShape:o}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==r.shape.length)throw new Error(`Input shape should be a vector but received shape ${r.shape}`);if(1!==o.shape.length)throw new Error(`Target shape should be a vector but received shape ${o.shape}`);const a=Array.from(e.readSync(r.dataId)),i=e.readSync(s.dataId),l=Array.from(e.readSync(o.dataId)),[u,c,h]=Jz(i,s.shape,s.dtype,a,l);return[e.makeTensorInfo(c,s.dtype,u),e.makeTensorInfo([h.length],o.dtype,new Int32Array(h))]}},iH={kernelName:Th,backendName:"webgl",kernelFunc:function aH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=dw(a,s.shape,s.dtype,i,l,!0);return e.makeTensorInfo(c,s.dtype,u)}},uH={kernelName:$h,backendName:"webgl",kernelFunc:function lH(n){const{inputs:t,backend:e}=n,{data:s,indices:r,segmentIds:o}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==r.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${r.shape}`);if(1!==o.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${o.shape}`);const a=e.readSync(s.dataId),i=e.readSync(r.dataId),l=e.readSync(o.dataId),[u,c]=dw(a,s.shape,s.dtype,i,l);return e.makeTensorInfo(c,s.dtype,u)}},hH={kernelName:_h,backendName:"webgl",kernelFunc:function cH(n){const{inputs:t,backend:e,attrs:s}=n,{sparseIndices:r,sparseValues:o,defaultValue:a}=t,{outputShape:i}=s,{sliceRank:l,numUpdates:u,strides:c,outputSize:h}=ci(0,r,i),p=new cv(u,l,r.shape.length,o.shape.length,c,[h,1],!1),f=e.runWebGLProgram(p,[o,r,a],o.dtype),m=fe({inputs:{x:f},backend:e,attrs:{shape:i}});return e.disposeIntermediateTensorInfo(f),m}},pH={kernelName:Rl,backendName:"webgl",kernelFunc:function dH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{numOrSizeSplits:o,axis:a}=s,i=Me(a,r.shape)[0],l=Np(r,o,i),c=new Array(r.shape.length).fill(0),h=r.shape.slice();return l.map(d=>{const p=[...h];p[i]=d;const f=Vo({inputs:{x:r},backend:e,attrs:{begin:c,size:p}});return c[i]+=d,f})}},dv="return sqrt(x);",fH=Ye({opSnippet:dv,packedOpSnippet:dv,cpuKernelImpl:Qz}),mH={kernelName:La,backendName:"webgl",kernelFunc:fH},yH={kernelName:Eh,backendName:"webgl",kernelFunc:Ye({opSnippet:"return x * x;"})},pv="return (a - b) * (a - b);",xH=hn({opSnippet:pv,packedOpSnippet:pv}),bH={kernelName:Pa,backendName:"webgl",kernelFunc:xH},vH={kernelName:Wa,backendName:"webgl",kernelFunc:function wH({inputs:n,attrs:t,backend:e}){const{x:s}=n,o=new xr(s.shape,ls+`\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `);return e.runWebGLProgram(o,[s],s.dtype)}};class IH{constructor(t,e,s){this.variableNames=["x"],this.outputShape=s;const r=s.length,o=ht(s.length),a=ht(s.length);let i="";if(1===r)i="coords * strides + begin";else{let l=0;i=s.map((u,c)=>(l++,1===s.length?`coords * strides[${c}] + begin[${c}]`:`coords[${l-1}] * strides[${c}] + begin[${c}]`)).join(",")}this.userCode=`\n      ${o} begin = ${o}(${t});\n      ${o} strides = ${o}(${e});\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const kH={kernelName:Ah,backendName:"webgl",kernelFunc:function CH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{begin:o,end:a,strides:i,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:d}=s,{nonStrided:p,$begin:f,$strides:m,size:g,newShape:y,outShape:x}=yd(r.shape,o,a,i,l,u,c,h,d),b=fe({inputs:{x:r},backend:e,attrs:{shape:y}});let w;if(p){const k=Vo({inputs:{x:b},backend:e,attrs:{begin:f,size:g}});w=fe({inputs:{x:k},backend:e,attrs:{shape:x}}),e.disposeIntermediateTensorInfo(k)}else if(x.some(k=>0===k))w=e.makeTensorInfo(x,r.dtype,[]);else if(e.shouldExecuteOnCPU([b])){const T=e.texData.get(b.dataId).values,_=We(b.shape,b.dtype,T),E=eM(x,_,m,f);w=e.makeTensorInfo(x,b.dtype,E.values)}else{const S=new IH(f,m,x);w=e.runWebGLProgram(S,[b],b.dtype)}const I=fe({inputs:{x:w},backend:e,attrs:{shape:x}});return e.disposeIntermediateTensorInfo(b),e.disposeIntermediateTensorInfo(w),I}},SH={kernelName:Dh,backendName:"webgl",kernelFunc:function NH(n){const{inputs:t,backend:e,attrs:s}=n,{separator:r,nGramWidths:o,leftPad:a,rightPad:i,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,d=e.readSync(c.dataId),p=e.readSync(h.dataId),[f,m]=tM(d,p,r,o,a,i,l,u);return[e.makeTensorInfo([f.length],"string",f),e.makeTensorInfo(h.shape,"int32",m)]}},$H={kernelName:Rh,backendName:"webgl",kernelFunc:function TH(n){const{inputs:t,backend:e,attrs:s}=n,{skipEmpty:r}=s,{input:o,delimiter:a}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(1!==o.shape.length)throw new Error(`Input must be a vector, got shape: ${o.shape}`);if(0!==a.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);const i=e.readSync(o.dataId),l=e.readSync(a.dataId)[0],[u,c,h]=nM(i,l,r),d=c.length;return[e.makeTensorInfo([d,2],"int32",u),e.makeTensorInfo([d],"string",c),e.makeTensorInfo([2],"int32",new Int32Array(h))]}},EH={kernelName:Fh,backendName:"webgl",kernelFunc:function _H(n){const{inputs:t,backend:e,attrs:s}=n,{numBuckets:r}=s,{input:o}=t;if("string"!==o.dtype)throw new Error("Input must be of datatype string");if(r<=0)throw new Error("Number of buckets must be at least 1");const a=e.readSync(o.dataId),i=sM(a,r);return e.makeTensorInfo(o.shape,"int32",i)}},AH=Ye({opSnippet:"return tan(x);"}),DH={kernelName:Ma,backendName:"webgl",kernelFunc:AH},RH=Ye({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),FH={kernelName:Ba,backendName:"webgl",kernelFunc:RH};class OH{constructor(t,e){this.variableNames=["A"];const s=new Array(t.length);for(let a=0;a<s.length;a++)s[a]=t[a]*e[a];this.outputShape=s,this.rank=s.length;const r=ht(this.rank),o=function LH(n){const t=n.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${n[0]})`;const e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let r=0;r<n.length;r++)s.push(`imod(${e[r]}, ${n[r]})`);return s.join()}(t);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${o}));\n      }\n    `}}function fv(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{reps:o}=s;if("string"===r.dtype||r.shape.length>5){const l=e.readSync(r.dataId),u="string"===r.dtype?l.map(d=>so(d)):l,c=We(r.shape,r.dtype,u),h=oM(c,o);return e.makeTensorInfo(h.shape,h.dtype,h.values)}const a=new OH(r.shape,o);return e.runWebGLProgram(a,[r],r.dtype)}const PH={kernelName:Va,backendName:"webgl",kernelFunc:fv};class zH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=t,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class MH{constructor(t){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=t,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Yr(n,t){null!==t&&n.disposeIntermediateTensorInfo(t)}function mv(n){let t=1;for(;t<n;)t*=2;return t}const VH={kernelName:Oh,backendName:"webgl",kernelFunc:function BH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r}=t,{k:o,sorted:a}=s,i=X().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=X().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=r.shape,c=u[u.length-1];if(e.shouldExecuteOnCPU([r])||c<i||o>l){const E=e.readSync(r.dataId),[M,B]=aM(E,u,r.dtype,o,a);return[e.makeTensorInfo(M.shape,M.dtype,M.values),e.makeTensorInfo(B.shape,B.dtype,B.values)]}if(0===o)return u[u.length-1]=0,[e.makeTensorInfo(u,r.dtype,[]),e.makeTensorInfo(u,"int32",[])];if(1===c)return[r,Li({attrs:{shape:u,dtype:"int32",value:0},backend:e})];const h=e.texData.get(r.dataId),d=null!==h&&h.isPacked,p=d?e.unpackTensor(r):r,m=q(u)/c,g=fe({inputs:{x:p},attrs:{shape:[m,c]},backend:e});d&&Yr(e,p);const y=mv(o),x=mv(c);let b=null;const w=()=>null===b?[g,g]:[g,b],I=(E,M,B)=>{const V=w(),j=new zH(B),Z=b;b=e.runWebGLProgram(j,V,"int32",[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[E],[M]]),Yr(e,Z)};for(let E=1;E<y;E*=2){const M=2*E;for(let B=E;B>=1;B/=2)I(M,B,[m,x])}for(let E=x;E>y;E/=2){const M=w(),B=new MH([m,E/2]),G=b;b=e.runWebGLProgram(B,M,"int32",[[c],[null===b?1:0],[y]]),Yr(e,G);const W=y/2,Z=2*W;for(let K=W;K>=1;K/=2)I(Z,K,b.shape)}let k=b;b=Vo({inputs:{x:b},backend:e,attrs:{begin:0,size:[m,o]}}),Yr(e,k);let S=ev({inputs:{x:g,indices:b},backend:e,attrs:{axis:1,batchDims:1}});Yr(e,g);const T=u.slice(0,-1);T.push(o),k=b,b=fe({inputs:{x:b},attrs:{shape:T},backend:e}),Yr(e,k);const _=S;return S=fe({inputs:{x:S},attrs:{shape:T},backend:e}),Yr(e,_),[S,b]}};class WH{constructor(t,e,s,r,o,a){this.variableNames=["Image","Transforms"],this.outputShape=a;const i="nearest"===s?1:2;let l;switch(r){case"constant":default:l=1;break;case"reflect":l=2;break;case"wrap":l=3;break;case"nearest":l=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${l} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${l} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${t} && 0 <= coordX && coordX < ${e}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${o});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${o});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${e}));\n                float mapY = mapCoord(inY, float(${t}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const GH={kernelName:Lh,backendName:"webgl",kernelFunc:function UH(n){const{inputs:t,backend:e,attrs:s}=n,{image:r,transforms:o}=t,{interpolation:a,fillMode:i,fillValue:l,outputShape:u}=s,[c,h,d,p]=r.shape,[f,m]=u??[h,d],y=new WH(h,d,a,i,l,[c,f,m,p]);return e.runWebGLProgram(y,[r,o],"float32")}},jH={kernelName:Ph,backendName:"webgl",kernelFunc:function HH(n){const{inputs:t,attrs:e,backend:s}=n,{axis:r}=e,{x:o}=t;Ai(o,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const a=s.readSync(o.dataId),{outputValues:i,outputShape:l,indices:u}=iM(a,r,o.shape,o.dtype);return[s.makeTensorInfo(l,o.dtype,i),s.makeTensorInfo([u.length],"int32",u)]}},qH={kernelName:Ll,backendName:"webgl",kernelFunc:function KH(n){const{inputs:t,backend:e,attrs:s}=n,{value:r}=t;let{axis:o}=s;o<0&&(o+=r.shape.length);const a=r,i=a.shape.length,l=r.shape[o],u=new Array(i-1);let c=0;for(let m=0;m<i;m++)m!==o&&(u[c++]=a.shape[m]);const h=[],d=new Array(i).fill(0),p=a.shape.slice();p[o]=1;const f=new Array(l);for(let m=0;m<f.length;m++){d[o]=m;const g=Vo({inputs:{x:a},backend:e,attrs:{begin:d,size:p}}),y=fe({inputs:{x:g},backend:e,attrs:{shape:u}});f[m]=y,h.push(g)}return h.forEach(m=>e.disposeIntermediateTensorInfo(m)),f}};class XH{constructor(t,e){this.variableNames=["x","segmentIds"];const s=t.windowSize,r=t.batchSize,o=t.inSize,a=t.numSegments,i=a*Math.ceil(o/s);this.outputShape=[r,i];const c=4*Math.floor(s/4),h=s%4,d="\n        sumValue += dot(values, segFilter);\n    ";let p="";o%s>0&&(p=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return initializationValue;\n        }\n      `);let f="";o%s>0&&(f=`\n        if (inIdx < 0 || inIdx >= ${o}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${p}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${f}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${a})) * float(${s}));\n        int currentSeg = int(mod(float(outIdx), float(${a})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${c}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${c};\n        if (${1===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${d}\n        } else if (${2===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${d}\n        } else if (${3===h}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${d}\n        }\n        setOutput(sumValue);\n      }\n    `}}const JH=[U4,H4,iB,uB,dB,mB,yB,wB,IB,kB,$B,EB,RB,LB,UB,MB,jB,YB,qB,eV,nV,rV,iV,pV,mV,wV,IV,SV,_V,WM,FV,GV,jV,zV,YV,JV,qV,tW,sW,oW,iW,uW,dW,xW,wW,fW,CW,SW,$W,EW,RW,OW,zW,MW,BW,WW,GW,jW,qW,YW,JW,t4,r4,a4,u4,d4,f4,g4,VM,x4,DV,w4,I4,k4,GM,S4,$4,E4,F4,D4,L4,z4,B4,K4,tU,Q4,oU,iU,uU,Z4,hU,pU,yU,wU,kU,EU,XM,DU,OU,zU,VU,gV,UU,HU,KU,YU,eG,jM,nG,sG,yV,SU,oG,hG,lG,ZM,mG,xG,IG,NG,_G,AG,RG,OG,PG,BG,UG,HG,KG,YG,JG,dV,$U,eH,tH,sH,oH,iH,uH,hH,pH,mH,yH,bH,vH,kH,SH,$H,EH,TU,rB,DH,FH,PH,VH,GH,oB,jH,qH,{kernelName:Pl,backendName:"webgl",kernelFunc:function YH(n){const{inputs:t,backend:e,attrs:s}=n,{x:r,segmentIds:o}=t,{numSegments:a}=s,i=r.shape.length,l=[];let u=0;const c=Dt([u],i);let h=r;null!=c&&(h=vn({inputs:{x:r},backend:e,attrs:{perm:c}}),l.push(h),u=zt(1,i)[0]);const d=gy(h.shape,u,a),p=q([h.shape[u]]),f=fe({inputs:{x:h},backend:e,attrs:{shape:[-1,p]}});l.push(f);const m=jh(r.dtype),g=(w,I,k,S,T)=>{const _=w.shape[0],E=w.shape[1],M=my(E,T),V=new XH({windowSize:M,inSize:E,batchSize:_,numSegments:T},I),j=e.compileAndRun(V,[w,k],S);if(l.push(j),j.shape[1]===T)return j;const G=uv({backend:e,attrs:{start:0,stop:T,step:1,dtype:"float32"}}),W=fv({inputs:{x:G},backend:e,attrs:{reps:[E/M]}});return l.push(G),l.push(W),g(j,I,W,S,T)},x=fe({inputs:{x:g(f,"unsortedSegmentSum",o,m,a)},backend:e,attrs:{shape:d}});let b=x;if(null!=c){l.push(x);const w=go(c);b=vn({inputs:{x:b},backend:e,attrs:{perm:w}})}return l.forEach(w=>e.disposeIntermediateTensorInfo(w)),b}},GU];for(const n of JH)Wh(n);class gv{static cropImageOnCanvas(t,e,s){const a=t.width/t.height,i=e.width,l=e.height;if(a>i/l){const c=i/a;s.drawImage(t,0,(l-c)/2,i,c)}else{const h=l*a;s.drawImage(t,(i-h)/2,0,h,l)}}}class ej{constructor(t){this.modelBaseUrl=t.modelBaseUrl}loadModel(){var t=this;return L(function*(){t.model=yield Rb(`${t.modelBaseUrl}/classification/model.json`);const e=yield fetch(`${t.modelBaseUrl}/classification/classes.txt`);t.classes=(yield e.text()).split("\n"),console.log("[TileClassifier] loadModel - Model loaded for classification",t.classes)})()}classify(t){var e=this;return L(function*(){if(!e.model)throw new Error("Model is not loaded yet");const s=document.createElement("canvas"),r=s.getContext("2d");s.width=t.width,s.height=t.height,gv.cropImageOnCanvas(t,s,r);const o=e.model?.inputs[0].shape?.slice(1,3);if(!o)throw new Error("shape is undefined");const a=o[0],i=o[1],l=P(()=>ts.resizeBilinear(Sg(s),[a,i]).div(255).expandDims(0)),u=yield e.model.predict(l);let c=u.dataSync().map(f=>100*f),h=Er(c).dataSync();ze(u),e.classes&&console.log(e.classes[h[0]])})()}}let tj=(()=>{class n{constructor(e){this.modelBaseUrl=e.modelBaseUrl}loadModel(){var e=this;return L(function*(){e.model=yield Rb(`${e.modelBaseUrl}/object-detection/model.json`);const s=yield fetch(`${e.modelBaseUrl}/object-detection/classes.txt`);e.classes=(yield s.text()).split("\n"),console.log("[TileDetector] loadModel - Model loaded for object detection",e.classes)})()}detect(e){var s=this;return L(function*(){if(!s.model)throw new Error("Model is not loaded yet");const r=document.createElement("canvas"),o=r.getContext("2d");r.width=e.width,r.height=e.height,gv.cropImageOnCanvas(e,r,o);const a=s.model?.inputs[0].shape?.slice(1,3);if(!a)throw new Error("shape is undefined");const i=a[0],l=a[1],u=P(()=>ts.resizeBilinear(Sg(r),[i,l]).div(255).expandDims(0)),c=yield s.model.executeAsync(u),h=c[0].dataSync(),d=c[1].dataSync(),p=c[2].dataSync(),f=c[3].dataSync()[0];ze(c);const m=s.convertResultToDetectedTile(r,h,d,p,f);return s.drawPreview(r,m),{preview:r,tiles:m}})()}convertResultToDetectedTile(e,s,r,o,a){const i=[];for(let l=0;l<a;l++){let[u,c,h,d]=s.slice(4*l,4*(l+1));u*=e.width,h*=e.width,c*=e.height,d*=e.height;const p=h-u,f=d-c;let m=this.classes[o[l]];if(void 0===m||"tile"!==m)continue;const g=r[l];if(g<n.MINIMUM_SCORE)continue;const y=document.createElement("canvas");y.width=p,y.height=f,y.getContext("2d").drawImage(e,u,c,p,f,0,0,p,f),i.push({className:m,x:u,y:c,w:p,h:f,score:g,image:y})}return i}drawPreview(e,s){const r=e.getContext("2d");r.font="20px Arial",r.strokeStyle="#18C3D9FA",r.lineWidth=3,r.fillStyle="#18C3D9FA";for(const o of s)r.strokeRect(o.x,o.y,o.w,o.h),r.fillText(`${o.className} (${o.score.toFixed(2)})`,o.x,o.y-10)}}return n.MINIMUM_SCORE=.4,n})(),nj=(()=>{class n{constructor(e){this.tileDetector=new tj({modelBaseUrl:e.modelBaseUrl}),this.tileClassifier=new ej({modelBaseUrl:e.modelBaseUrl})}initialize(){var e=this;return L(function*(){if(e.previewCanvas=document.createElement("canvas"),e.previewCanvas.width=100,e.previewCanvas.height=100,e.previewCanvasContext=e.previewCanvas.getContext("2d")??void 0,void 0===e.previewCanvasContext)throw new Error("Failed to get canvas context");e.previewCanvasContext.fillStyle="black",e.previewCanvasContext.fillRect(0,0,100,100),e.previewMediaStream=e.previewCanvas.captureStream(30),e.inputFrameCanvas=document.createElement("canvas"),yield e.tileDetector.loadModel(),yield e.tileClassifier.loadModel()})()}getPreviewMediaStream(){return this.previewMediaStream}start(e=n.DEFAULT_MEDIA_STREAM_CONSTRAINTS){var s=this;return L(function*(){if(s.inputMediaStream=yield navigator.mediaDevices.getUserMedia(e),!s.inputMediaStream)throw new Error("Failed to get media stream");s.inputVideoElement=document.createElement("video"),s.inputVideoElement.srcObject=s.inputMediaStream,s.inputVideoElement.play(),s.tick()})()}stop(){this.inputMediaStream&&(this.inputMediaStream.getTracks().forEach(e=>e.stop()),this.inputMediaStream=void 0),this.inputVideoElement&&(this.inputVideoElement.srcObject=null,this.inputVideoElement=void 0)}detect(e){return L(function*(){})()}tick(){var e=this;return L(function*(){if(e.inputVideoElement&&e.inputMediaStream&&e.inputFrameCanvas&&e.previewCanvas&&e.previewCanvasContext){if(0===e.inputVideoElement.videoWidth||0===e.inputVideoElement.videoHeight)return void requestAnimationFrame(L(function*(){yield e.tick()}));try{e.inputFrameCanvas.width=e.inputVideoElement.videoWidth,e.inputFrameCanvas.height=e.inputVideoElement.videoHeight,e.inputFrameCanvas.getContext("2d").drawImage(e.inputVideoElement,0,0,e.inputFrameCanvas.width,e.inputFrameCanvas.height);const r=yield e.tileDetector.detect(e.inputFrameCanvas);if(!r)return;if(r.tiles.length>0)for(const o of r.tiles)yield e.tileClassifier.classify(o.image);e.previewCanvas.width=r.preview.width,e.previewCanvas.height=r.preview.height,e.previewCanvasContext.drawImage(r.preview,0,0,e.previewCanvas.width,e.previewCanvas.height)}catch(s){return void console.error("[DonjaraTileClassifier] tick",s)}requestAnimationFrame(L(function*(){yield e.tick()}))}})()}}return n.DEFAULT_MEDIA_STREAM_CONSTRAINTS={video:{facingMode:"environment"},audio:!1},n})();let rj=(()=>{class n{constructor(){this.classifier=new nj({modelBaseUrl:"https://arisucool.github.io/cg-donjara-navi/assets/models"})}initialize(){var e=this;return L(function*(){yield e.classifier.initialize()})()}getCameraPreviewStream(){return this.classifier.getPreviewMediaStream()}start(){var e=this;return L(function*(){return e.classifier.start()})()}stop(){var e=this;return L(function*(){return e.classifier.stop()})()}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275prov=$.Yz7({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();var oj=H(7009);function aj(n,t){if(1&n&&$._UZ(0,"video",1),2&n){const e=$.oxw();$.Q6J("srcObject",e.previewMediaStream)}}let ij=(()=>{class n{constructor(e,s){this.classifierService=e,this.snackBar=s}ngOnInit(){var e=this;return L(function*(){try{yield e.classifierService.initialize(),window.setTimeout(()=>{e.previewMediaStream=e.classifierService.getCameraPreviewStream()},1e3),yield e.classifierService.start()}catch(s){console.error(s),e.snackBar.open(`\u30a8\u30e9\u30fc: ${s.message}`)}})()}ngOnDestroy(){}}return n.\u0275fac=function(e){return new(e||n)($.Y36(rj),$.Y36(oj.ux))},n.\u0275cmp=$.Xpm({type:n,selectors:[["app-classifier"]],decls:1,vars:1,consts:[["autoplay","","muted","",3,"srcObject",4,"ngIf"],["autoplay","","muted","",3,"srcObject"]],template:function(e,s){1&e&&$.YNc(0,aj,1,1,"video",0),2&e&&$.Q6J("ngIf",s.previewMediaStream&&s.previewMediaStream.getTracks().length>0)},dependencies:[ne.O5]}),n})();const lj=[{path:"",component:(()=>{class n{constructor(){}}return n.\u0275fac=function(e){return new(e||n)},n.\u0275cmp=$.Xpm({type:n,selectors:[["app-navi-home-page"]],decls:1,vars:0,template:function(e,s){1&e&&$._UZ(0,"app-classifier")},dependencies:[ij],styles:["[_nghost-%COMP%]{padding:1rem;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:2rem}"]}),n})()}];let uj=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=$.oAB({type:n}),n.\u0275inj=$.cJS({imports:[Y.Bz.forChild(lj),Y.Bz]}),n})();var cj=H(5052);let hj=(()=>{class n{}return n.\u0275fac=function(e){return new(e||n)},n.\u0275mod=$.oAB({type:n}),n.\u0275inj=$.cJS({imports:[ne.ez,uj,cj.m]}),n})()},7658:Je=>{Je.exports=H;var Ge=null;try{Ge=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch{}function H(Y,$,pe){this.low=0|Y,this.high=0|$,this.unsigned=!!pe}function De(Y){return!0===(Y&&Y.__isLong__)}Object.defineProperty(H.prototype,"__isLong__",{value:!0}),H.isLong=De;var Yt={},Ae={};function bt(Y,$){var pe,L,Ze;return $?(Ze=0<=(Y>>>=0)&&Y<256)&&(L=Ae[Y])?L:(pe=_e(Y,(0|Y)<0?-1:0,!0),Ze&&(Ae[Y]=pe),pe):(Ze=-128<=(Y|=0)&&Y<128)&&(L=Yt[Y])?L:(pe=_e(Y,Y<0?-1:0,!1),Ze&&(Yt[Y]=pe),pe)}function Pe(Y,$){if(isNaN(Y))return $?Bt:ot;if($){if(Y<0)return Bt;if(Y>=re)return Qe}else{if(Y<=-ye)return et;if(Y+1>=ye)return He}return Y<0?Pe(-Y,$).neg():_e(Y%J|0,Y/J|0,$)}function _e(Y,$,pe){return new H(Y,$,pe)}H.fromInt=bt,H.fromNumber=Pe,H.fromBits=_e;var Le=Math.pow;function ge(Y,$,pe){if(0===Y.length)throw Error("empty string");if("NaN"===Y||"Infinity"===Y||"+Infinity"===Y||"-Infinity"===Y)return ot;if("number"==typeof $?(pe=$,$=!1):$=!!$,(pe=pe||10)<2||36<pe)throw RangeError("radix");var L;if((L=Y.indexOf("-"))>0)throw Error("interior hyphen");if(0===L)return ge(Y.substring(1),$,pe).neg();for(var Ze=Pe(Le(pe,8)),Ve=ot,st=0;st<Y.length;st+=8){var St=Math.min(8,Y.length-st),rt=parseInt(Y.substring(st,st+St),pe);if(St<8){var Zt=Pe(Le(pe,St));Ve=Ve.mul(Zt).add(Pe(rt))}else Ve=(Ve=Ve.mul(Ze)).add(Pe(rt))}return Ve.unsigned=$,Ve}function z(Y,$){return"number"==typeof Y?Pe(Y,$):"string"==typeof Y?ge(Y,$):_e(Y.low,Y.high,"boolean"==typeof $?$:Y.unsigned)}H.fromString=ge,H.fromValue=z;var J=4294967296,re=J*J,ye=re/2,Ce=bt(1<<24),ot=bt(0);H.ZERO=ot;var Bt=bt(0,!0);H.UZERO=Bt;var Ot=bt(1);H.ONE=Ot;var qn=bt(1,!0);H.UONE=qn;var On=bt(-1);H.NEG_ONE=On;var He=_e(-1,2147483647,!1);H.MAX_VALUE=He;var Qe=_e(-1,-1,!0);H.MAX_UNSIGNED_VALUE=Qe;var et=_e(0,-2147483648,!1);H.MIN_VALUE=et;var ne=H.prototype;ne.toInt=function(){return this.unsigned?this.low>>>0:this.low},ne.toNumber=function(){return this.unsigned?(this.high>>>0)*J+(this.low>>>0):this.high*J+(this.low>>>0)},ne.toString=function($){if(($=$||10)<2||36<$)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(et)){var pe=Pe($),L=this.div(pe),Ze=L.mul(pe).sub(this);return L.toString($)+Ze.toInt().toString($)}return"-"+this.neg().toString($)}for(var Ve=Pe(Le($,6),this.unsigned),st=this,St="";;){var rt=st.div(Ve),Lt=(st.sub(rt.mul(Ve)).toInt()>>>0).toString($);if((st=rt).isZero())return Lt+St;for(;Lt.length<6;)Lt="0"+Lt;St=""+Lt+St}},ne.getHighBits=function(){return this.high},ne.getHighBitsUnsigned=function(){return this.high>>>0},ne.getLowBits=function(){return this.low},ne.getLowBitsUnsigned=function(){return this.low>>>0},ne.getNumBitsAbs=function(){if(this.isNegative())return this.eq(et)?64:this.neg().getNumBitsAbs();for(var $=0!=this.high?this.high:this.low,pe=31;pe>0&&!($&1<<pe);pe--);return 0!=this.high?pe+33:pe+1},ne.isZero=function(){return 0===this.high&&0===this.low},ne.eqz=ne.isZero,ne.isNegative=function(){return!this.unsigned&&this.high<0},ne.isPositive=function(){return this.unsigned||this.high>=0},ne.isOdd=function(){return 1==(1&this.low)},ne.isEven=function(){return 0==(1&this.low)},ne.equals=function($){return De($)||($=z($)),(this.unsigned===$.unsigned||this.high>>>31!=1||$.high>>>31!=1)&&this.high===$.high&&this.low===$.low},ne.eq=ne.equals,ne.notEquals=function($){return!this.eq($)},ne.neq=ne.notEquals,ne.ne=ne.notEquals,ne.lessThan=function($){return this.comp($)<0},ne.lt=ne.lessThan,ne.lessThanOrEqual=function($){return this.comp($)<=0},ne.lte=ne.lessThanOrEqual,ne.le=ne.lessThanOrEqual,ne.greaterThan=function($){return this.comp($)>0},ne.gt=ne.greaterThan,ne.greaterThanOrEqual=function($){return this.comp($)>=0},ne.gte=ne.greaterThanOrEqual,ne.ge=ne.greaterThanOrEqual,ne.compare=function($){if(De($)||($=z($)),this.eq($))return 0;var pe=this.isNegative(),L=$.isNegative();return pe&&!L?-1:!pe&&L?1:this.unsigned?$.high>>>0>this.high>>>0||$.high===this.high&&$.low>>>0>this.low>>>0?-1:1:this.sub($).isNegative()?-1:1},ne.comp=ne.compare,ne.negate=function(){return!this.unsigned&&this.eq(et)?et:this.not().add(Ot)},ne.neg=ne.negate,ne.add=function($){De($)||($=z($));var Lt=0,Vt=0,Pt=0,Et=0;return Pt+=(Et+=(65535&this.low)+(65535&$.low))>>>16,Vt+=(Pt+=(this.low>>>16)+($.low>>>16))>>>16,Lt+=(Vt+=(65535&this.high)+(65535&$.high))>>>16,Lt+=(this.high>>>16)+($.high>>>16),_e((Pt&=65535)<<16|(Et&=65535),(Lt&=65535)<<16|(Vt&=65535),this.unsigned)},ne.subtract=function($){return De($)||($=z($)),this.add($.neg())},ne.sub=ne.subtract,ne.multiply=function($){if(this.isZero())return ot;if(De($)||($=z($)),Ge)return _e(Ge.mul(this.low,this.high,$.low,$.high),Ge.get_high(),this.unsigned);if($.isZero())return ot;if(this.eq(et))return $.isOdd()?et:ot;if($.eq(et))return this.isOdd()?et:ot;if(this.isNegative())return $.isNegative()?this.neg().mul($.neg()):this.neg().mul($).neg();if($.isNegative())return this.mul($.neg()).neg();if(this.lt(Ce)&&$.lt(Ce))return Pe(this.toNumber()*$.toNumber(),this.unsigned);var Ze=65535&this.high,Ve=this.low>>>16,st=65535&this.low,rt=65535&$.high,Zt=$.low>>>16,Lt=65535&$.low,Vt=0,Pt=0,Et=0,Jr=0;return Et+=(Jr+=st*Lt)>>>16,Pt+=(Et+=Ve*Lt)>>>16,Et&=65535,Pt+=(Et+=st*Zt)>>>16,Vt+=(Pt+=Ze*Lt)>>>16,Pt&=65535,Vt+=(Pt+=Ve*Zt)>>>16,Pt&=65535,Vt+=(Pt+=st*rt)>>>16,Vt+=(this.high>>>16)*Lt+Ze*Zt+Ve*rt+st*($.high>>>16),_e((Et&=65535)<<16|(Jr&=65535),(Vt&=65535)<<16|(Pt&=65535),this.unsigned)},ne.mul=ne.multiply,ne.divide=function($){if(De($)||($=z($)),$.isZero())throw Error("division by zero");var L,Ze,Ve;if(Ge)return this.unsigned||-2147483648!==this.high||-1!==$.low||-1!==$.high?_e((this.unsigned?Ge.div_u:Ge.div_s)(this.low,this.high,$.low,$.high),Ge.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?Bt:ot;if(this.unsigned){if($.unsigned||($=$.toUnsigned()),$.gt(this))return Bt;if($.gt(this.shru(1)))return qn;Ve=Bt}else{if(this.eq(et))return $.eq(Ot)||$.eq(On)?et:$.eq(et)?Ot:(L=this.shr(1).div($).shl(1)).eq(ot)?$.isNegative()?Ot:On:(Ze=this.sub($.mul(L)),Ve=L.add(Ze.div($)));if($.eq(et))return this.unsigned?Bt:ot;if(this.isNegative())return $.isNegative()?this.neg().div($.neg()):this.neg().div($).neg();if($.isNegative())return this.div($.neg()).neg();Ve=ot}for(Ze=this;Ze.gte($);){L=Math.max(1,Math.floor(Ze.toNumber()/$.toNumber()));for(var St=Math.ceil(Math.log(L)/Math.LN2),rt=St<=48?1:Le(2,St-48),Zt=Pe(L),Lt=Zt.mul($);Lt.isNegative()||Lt.gt(Ze);)Lt=(Zt=Pe(L-=rt,this.unsigned)).mul($);Zt.isZero()&&(Zt=Ot),Ve=Ve.add(Zt),Ze=Ze.sub(Lt)}return Ve},ne.div=ne.divide,ne.modulo=function($){return De($)||($=z($)),Ge?_e((this.unsigned?Ge.rem_u:Ge.rem_s)(this.low,this.high,$.low,$.high),Ge.get_high(),this.unsigned):this.sub(this.div($).mul($))},ne.mod=ne.modulo,ne.rem=ne.modulo,ne.not=function(){return _e(~this.low,~this.high,this.unsigned)},ne.and=function($){return De($)||($=z($)),_e(this.low&$.low,this.high&$.high,this.unsigned)},ne.or=function($){return De($)||($=z($)),_e(this.low|$.low,this.high|$.high,this.unsigned)},ne.xor=function($){return De($)||($=z($)),_e(this.low^$.low,this.high^$.high,this.unsigned)},ne.shiftLeft=function($){return De($)&&($=$.toInt()),0==($&=63)?this:$<32?_e(this.low<<$,this.high<<$|this.low>>>32-$,this.unsigned):_e(0,this.low<<$-32,this.unsigned)},ne.shl=ne.shiftLeft,ne.shiftRight=function($){return De($)&&($=$.toInt()),0==($&=63)?this:$<32?_e(this.low>>>$|this.high<<32-$,this.high>>$,this.unsigned):_e(this.high>>$-32,this.high>=0?0:-1,this.unsigned)},ne.shr=ne.shiftRight,ne.shiftRightUnsigned=function($){if(De($)&&($=$.toInt()),0==($&=63))return this;var pe=this.high;return $<32?_e(this.low>>>$|pe<<32-$,pe>>>$,this.unsigned):_e(32===$?pe:pe>>>$-32,0,this.unsigned)},ne.shru=ne.shiftRightUnsigned,ne.shr_u=ne.shiftRightUnsigned,ne.toSigned=function(){return this.unsigned?_e(this.low,this.high,!1):this},ne.toUnsigned=function(){return this.unsigned?this:_e(this.low,this.high,!0)},ne.toBytes=function($){return $?this.toBytesLE():this.toBytesBE()},ne.toBytesLE=function(){var $=this.high,pe=this.low;return[255&pe,pe>>>8&255,pe>>>16&255,pe>>>24,255&$,$>>>8&255,$>>>16&255,$>>>24]},ne.toBytesBE=function(){var $=this.high,pe=this.low;return[$>>>24,$>>>16&255,$>>>8&255,255&$,pe>>>24,pe>>>16&255,pe>>>8&255,255&pe]},H.fromBytes=function($,pe,L){return L?H.fromBytesLE($,pe):H.fromBytesBE($,pe)},H.fromBytesLE=function($,pe){return new H($[0]|$[1]<<8|$[2]<<16|$[3]<<24,$[4]|$[5]<<8|$[6]<<16|$[7]<<24,pe)},H.fromBytesBE=function($,pe){return new H($[4]<<24|$[5]<<16|$[6]<<8|$[7],$[0]<<24|$[1]<<16|$[2]<<8|$[3],pe)}},340:(Je,Ge,H)=>{var De=H(9471),Yt=H(2992),Ae=H(7657),bt=H(5583),Pe=H(1929),_e=H(8083),Le=H(3818);Le.alea=De,Le.xor128=Yt,Le.xorwow=Ae,Le.xorshift7=bt,Le.xor4096=Pe,Le.tychei=_e,Je.exports=Le},9471:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(z){var ae=this,he=function ge(){var z=4022871197;return function(he){he=he.toString();for(var J=0;J<he.length;J++){var re=.02519603282416938*(z+=he.charCodeAt(J));re-=z=re>>>0,z=(re*=z)>>>0,z+=4294967296*(re-=z)}return 2.3283064365386963e-10*(z>>>0)}}();ae.next=function(){var J=2091639*ae.s0+2.3283064365386963e-10*ae.c;return ae.s0=ae.s1,ae.s1=ae.s2,ae.s2=J-(ae.c=0|J)},ae.c=1,ae.s0=he(" "),ae.s1=he(" "),ae.s2=he(" "),ae.s0-=he(z),ae.s0<0&&(ae.s0+=1),ae.s1-=he(z),ae.s1<0&&(ae.s1+=1),ae.s2-=he(z),ae.s2<0&&(ae.s2+=1),he=null}function _e(z,ae){return ae.c=z.c,ae.s0=z.s0,ae.s1=z.s1,ae.s2=z.s2,ae}function Le(z,ae){var he=new Pe(z),J=ae&&ae.state,re=he.next;return re.int32=function(){return 4294967296*he.next()|0},re.double=function(){return re()+11102230246251565e-32*(2097152*re()|0)},re.quick=re,J&&("object"==typeof J&&_e(J,he),re.state=function(){return _e(he,{})}),re}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.alea=Le}(0,Je=H.nmd(Je))},8083:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(ge){var z=this,ae="";z.next=function(){var J=z.b,re=z.c,ye=z.d,Ce=z.a;return J=J<<25^J>>>7^re,re=re-ye|0,ye=ye<<24^ye>>>8^Ce,Ce=Ce-J|0,z.b=J=J<<20^J>>>12^re,z.c=re=re-ye|0,z.d=ye<<16^re>>>16^Ce,z.a=Ce-J|0},z.a=0,z.b=0,z.c=-1640531527,z.d=1367130551,ge===Math.floor(ge)?(z.a=ge/4294967296|0,z.b=0|ge):ae+=ge;for(var he=0;he<ae.length+20;he++)z.b^=0|ae.charCodeAt(he),z.next()}function _e(ge,z){return z.a=ge.a,z.b=ge.b,z.c=ge.c,z.d=ge.d,z}function Le(ge,z){var ae=new Pe(ge),he=z&&z.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ce=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},J.int32=ae.next,J.quick=J,he&&("object"==typeof he&&_e(he,ae),J.state=function(){return _e(ae,{})}),J}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.tychei=Le}(0,Je=H.nmd(Je))},2992:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(ge){var z=this,ae="";z.x=0,z.y=0,z.z=0,z.w=0,z.next=function(){var J=z.x^z.x<<11;return z.x=z.y,z.y=z.z,z.z=z.w,z.w^=z.w>>>19^J^J>>>8},ge===(0|ge)?z.x=ge:ae+=ge;for(var he=0;he<ae.length+64;he++)z.x^=0|ae.charCodeAt(he),z.next()}function _e(ge,z){return z.x=ge.x,z.y=ge.y,z.z=ge.z,z.w=ge.w,z}function Le(ge,z){var ae=new Pe(ge),he=z&&z.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ce=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},J.int32=ae.next,J.quick=J,he&&("object"==typeof he&&_e(he,ae),J.state=function(){return _e(ae,{})}),J}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.xor128=Le}(0,Je=H.nmd(Je))},1929:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(ge){var z=this;z.next=function(){var ye,Ce,he=z.w,J=z.X,re=z.i;return z.w=he=he+1640531527|0,Ce=J[re+34&127],ye=J[re=re+1&127],Ce^=Ce<<13,ye^=ye<<17,Ce=J[re]=(Ce^=Ce>>>15)^(ye^=ye>>>12),z.i=re,Ce+(he^he>>>16)|0},function ae(he,J){var re,ye,Ce,ot,Bt,Ot=[],qn=128;for(J===(0|J)?(ye=J,J=null):(J+="\0",ye=0,qn=Math.max(qn,J.length)),Ce=0,ot=-32;ot<qn;++ot)J&&(ye^=J.charCodeAt((ot+32)%J.length)),0===ot&&(Bt=ye),ye^=ye<<10,ye^=ye>>>15,ye^=ye<<4,ye^=ye>>>13,ot>=0&&(Ce=0==(re=Ot[127&ot]^=ye+(Bt=Bt+1640531527|0))?Ce+1:0);for(Ce>=128&&(Ot[127&(J&&J.length||0)]=-1),Ce=127,ot=512;ot>0;--ot)ye=Ot[Ce+34&127],re=Ot[Ce=Ce+1&127],ye^=ye<<13,re^=re<<17,Ot[Ce]=(ye^=ye>>>15)^(re^=re>>>12);he.w=Bt,he.X=Ot,he.i=Ce}(z,ge)}function _e(ge,z){return z.i=ge.i,z.w=ge.w,z.X=ge.X.slice(),z}function Le(ge,z){null==ge&&(ge=+new Date);var ae=new Pe(ge),he=z&&z.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ce=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},J.int32=ae.next,J.quick=J,he&&(he.X&&_e(he,ae),J.state=function(){return _e(ae,{})}),J}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.xor4096=Le}(0,Je=H.nmd(Je))},5583:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(ge){var z=this;z.next=function(){var re,ye,he=z.x,J=z.i;return re=he[J],ye=(re^=re>>>7)^re<<24,ye^=(re=he[J+1&7])^re>>>10,ye^=(re=he[J+3&7])^re>>>3,ye^=(re=he[J+4&7])^re<<7,re=he[J+7&7],he[J]=ye^=(re^=re<<13)^re<<9,z.i=J+1&7,ye},function ae(he,J){var re,Ce=[];if(J===(0|J))Ce[0]=J;else for(J=""+J,re=0;re<J.length;++re)Ce[7&re]=Ce[7&re]<<15^J.charCodeAt(re)+Ce[re+1&7]<<13;for(;Ce.length<8;)Ce.push(0);for(re=0;re<8&&0===Ce[re];++re);for(8==re&&(Ce[7]=-1),he.x=Ce,he.i=0,re=256;re>0;--re)he.next()}(z,ge)}function _e(ge,z){return z.x=ge.x.slice(),z.i=ge.i,z}function Le(ge,z){null==ge&&(ge=+new Date);var ae=new Pe(ge),he=z&&z.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ce=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},J.int32=ae.next,J.quick=J,he&&(he.x&&_e(he,ae),J.state=function(){return _e(ae,{})}),J}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.xorshift7=Le}(0,Je=H.nmd(Je))},7657:function(Je,Ge,H){var De;!function(Yt,Ae,bt){function Pe(ge){var z=this,ae="";z.next=function(){var J=z.x^z.x>>>2;return z.x=z.y,z.y=z.z,z.z=z.w,z.w=z.v,(z.d=z.d+362437|0)+(z.v=z.v^z.v<<4^J^J<<1)|0},z.x=0,z.y=0,z.z=0,z.w=0,z.v=0,ge===(0|ge)?z.x=ge:ae+=ge;for(var he=0;he<ae.length+64;he++)z.x^=0|ae.charCodeAt(he),he==ae.length&&(z.d=z.x<<10^z.x>>>4),z.next()}function _e(ge,z){return z.x=ge.x,z.y=ge.y,z.z=ge.z,z.w=ge.w,z.v=ge.v,z.d=ge.d,z}function Le(ge,z){var ae=new Pe(ge),he=z&&z.state,J=function(){return(ae.next()>>>0)/4294967296};return J.double=function(){do{var Ce=((ae.next()>>>11)+(ae.next()>>>0)/4294967296)/(1<<21)}while(0===Ce);return Ce},J.int32=ae.next,J.quick=J,he&&("object"==typeof he&&_e(he,ae),J.state=function(){return _e(ae,{})}),J}Ae&&Ae.exports?Ae.exports=Le:H.amdD&&H.amdO?void 0!==(De=function(){return Le}.call(Ge,H,Ge,Ae))&&(Ae.exports=De):this.xorwow=Le}(0,Je=H.nmd(Je))},3818:(Je,Ge,H)=>{var De;!function(Yt,Ae){var re,bt=this,Pe=256,_e=6,ge="random",z=Ae.pow(Pe,_e),ae=Ae.pow(2,52),he=2*ae,J=Pe-1;function ye(He,Qe,et){var ne=[],Y=Ot(Bt((Qe=1==Qe?{entropy:!0}:Qe||{}).entropy?[He,On(Yt)]:He??function qn(){try{var He;return re&&(He=re.randomBytes)?He=He(Pe):(He=new Uint8Array(Pe),(bt.crypto||bt.msCrypto).getRandomValues(He)),On(He)}catch{var Qe=bt.navigator,et=Qe&&Qe.plugins;return[+new Date,bt,et,bt.screen,On(Yt)]}}(),3),ne),$=new Ce(ne),pe=function(){for(var L=$.g(_e),Ze=z,Ve=0;L<ae;)L=(L+Ve)*Pe,Ze*=Pe,Ve=$.g(1);for(;L>=he;)L/=2,Ze/=2,Ve>>>=1;return(L+Ve)/Ze};return pe.int32=function(){return 0|$.g(4)},pe.quick=function(){return $.g(4)/4294967296},pe.double=pe,Ot(On($.S),Yt),(Qe.pass||et||function(L,Ze,Ve,st){return st&&(st.S&&ot(st,$),L.state=function(){return ot($,{})}),Ve?(Ae[ge]=L,Ze):L})(pe,Y,"global"in Qe?Qe.global:this==Ae,Qe.state)}function Ce(He){var Qe,et=He.length,ne=this,Y=0,$=ne.i=ne.j=0,pe=ne.S=[];for(et||(He=[et++]);Y<Pe;)pe[Y]=Y++;for(Y=0;Y<Pe;Y++)pe[Y]=pe[$=J&$+He[Y%et]+(Qe=pe[Y])],pe[$]=Qe;(ne.g=function(L){for(var Ze,Ve=0,st=ne.i,St=ne.j,rt=ne.S;L--;)Ze=rt[st=J&st+1],Ve=Ve*Pe+rt[J&(rt[st]=rt[St=J&St+Ze])+(rt[St]=Ze)];return ne.i=st,ne.j=St,Ve})(Pe)}function ot(He,Qe){return Qe.i=He.i,Qe.j=He.j,Qe.S=He.S.slice(),Qe}function Bt(He,Qe){var Y,et=[],ne=typeof He;if(Qe&&"object"==ne)for(Y in He)try{et.push(Bt(He[Y],Qe-1))}catch{}return et.length?et:"string"==ne?He:He+"\0"}function Ot(He,Qe){for(var ne,et=He+"",Y=0;Y<et.length;)Qe[J&Y]=J&(ne^=19*Qe[J&Y])+et.charCodeAt(Y++);return On(Qe)}function On(He){return String.fromCharCode.apply(0,He)}if(Ae["seed"+ge]=ye,Ot(Ae.random(),Yt),Je.exports){Je.exports=ye;try{re=H(5042)}catch{}}else void 0!==(De=function(){return ye}.call(Ge,H,Ge,Je))&&(Je.exports=De)}([],Math)},5410:()=>{},8628:()=>{},1601:()=>{},7792:()=>{},4977:()=>{},5042:()=>{}}]);